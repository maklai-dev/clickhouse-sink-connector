"use strict";(self.webpackChunkclickhouse_sink_connector=self.webpackChunkclickhouse_sink_connector||[]).push([[29],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),f=o,m=p["".concat(l,".").concat(f)]||p[f]||d[f]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=f;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}f.displayName="MDXCreateElement"},6475:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var n=r(7462),o=(r(7294),r(3905));const i={},a=void 0,c={unversionedId:"doc/sink_configuration",id:"doc/sink_configuration",title:"sink_configuration",description:"All the Sink Connector configuration variables are documented here.",source:"@site/docs/doc/sink_configuration.md",sourceDirName:"doc",slug:"/doc/sink_configuration",permalink:"/doc/sink_configuration",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"setup",permalink:"/doc/setup"},next:{title:"sink_connector_cli",permalink:"/doc/sink_connector_cli"}},l={},s=[],u={toc:s},p="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(p,(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"All the Sink Connector configuration variables are documented here."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"topics"),": Kafka topics delimited by comma.\\\n",(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse.topic2table.map"),": Map of Kafka topics to table names, <topic_name1>:<table_name1>,<topic_name2>:<table_name2>\nThis variable will override the default mapping of topics to table names."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.kafka.metadata"),": If set to true, kafka metadata columns will be added to Clickhouse."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"buffer.flush.time"),": The clickhouse records after mapping are stored in a buffer. This variable defines the time in seconds\nafter which the buffer is flushed. This is added to avoid frequent calls to clickhouse. Its performed using the Clickhouse\nJDBC Bulk Insert functionality."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.raw.data"),": If set to true, the entire row is converted to JSON and stored in the column defined by the ",(0,o.kt)("inlineCode",{parentName:"p"},"store.raw.data.column")," field."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"store.raw.data.column"),": Clickhouse table column to store the raw data in JSON form(String Clickhouse DataType)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"clickhouse.sign.column"),": Clickhouse table column to store sign values(-1 for deletes, 1 for other operations.)"),(0,o.kt)("p",null,"This is a sample configuration that's used in creating the connector using the Kafka connect REST API."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'`"topics": "${TOPICS}",\n"clickhouse.topic2table.map": "${TOPICS_TABLE_MAP}",\n"clickhouse.server.url": "${CLICKHOUSE_HOST}",\n"clickhouse.server.user": "${CLICKHOUSE_USER}",\n"clickhouse.server.password": "${CLICKHOUSE_PASSWORD}",\n"clickhouse.server.database": "${CLICKHOUSE_DATABASE}",\n"clickhouse.server.port": ${CLICKHOUSE_PORT},\n"clickhouse.table.name": "${CLICKHOUSE_TABLE}",\n"key.converter": "io.apicurio.registry.utils.converter.AvroConverter",\n"value.converter": "io.apicurio.registry.utils.converter.AvroConverter",\n\n"key.converter.apicurio.registry.url": "http://schemaregistry:8080/apis/registry/v2",\n"key.converter.apicurio.registry.auto-register": "true",\n"key.converter.apicurio.registry.find-latest": "true",\n\n"value.converter.apicurio.registry.url": "http://schemaregistry:8080/apis/registry/v2",\n"value.converter.apicurio.registry.auto-register": "true",\n"value.converter.apicurio.registry.find-latest": "true",\n"store.kafka.metadata": true,\n"topic.creation.default.partitions": 3,\n\n"store.raw.data": true,\n"store.raw.data.column": "raw_data"`\n')))}d.isMDXComponent=!0}}]);