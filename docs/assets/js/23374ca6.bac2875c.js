"use strict";(self.webpackChunkclickhouse_sink_connector=self.webpackChunkclickhouse_sink_connector||[]).push([[8421],{3905:(t,e,a)=>{a.d(e,{Zo:()=>c,kt:()=>k});var n=a(7294);function r(t,e,a){return e in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}function l(t,e){var a=Object.keys(t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(t);e&&(n=n.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),a.push.apply(a,n)}return a}function o(t){for(var e=1;e<arguments.length;e++){var a=null!=arguments[e]?arguments[e]:{};e%2?l(Object(a),!0).forEach((function(e){r(t,e,a[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(a,e))}))}return t}function i(t,e){if(null==t)return{};var a,n,r=function(t,e){if(null==t)return{};var a,n,r={},l=Object.keys(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||(r[a]=t[a]);return r}(t,e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(t);for(n=0;n<l.length;n++)a=l[n],e.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(t,a)&&(r[a]=t[a])}return r}var s=n.createContext({}),d=function(t){var e=n.useContext(s),a=e;return t&&(a="function"==typeof t?t(e):o(o({},e),t)),a},c=function(t){var e=d(t.components);return n.createElement(s.Provider,{value:e},t.children)},p="mdxType",m={inlineCode:"code",wrapper:function(t){var e=t.children;return n.createElement(n.Fragment,{},e)}},u=n.forwardRef((function(t,e){var a=t.components,r=t.mdxType,l=t.originalType,s=t.parentName,c=i(t,["components","mdxType","originalType","parentName"]),p=d(a),u=r,k=p["".concat(s,".").concat(u)]||p[u]||m[u]||l;return a?n.createElement(k,o(o({ref:e},c),{},{components:a})):n.createElement(k,o({ref:e},c))}));function k(t,e){var a=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var l=a.length,o=new Array(l);o[0]=u;var i={};for(var s in e)hasOwnProperty.call(e,s)&&(i[s]=e[s]);i.originalType=t,i[p]="string"==typeof t?t:r,o[1]=i;for(var d=2;d<l;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},6527:(t,e,a)=>{a.r(e),a.d(e,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>l,metadata:()=>i,toc:()=>d});var n=a(7462),r=(a(7294),a(3905));const l={},o=void 0,i={unversionedId:"README",id:"README",title:"README",description:"License",source:"@site/docs/README.md",sourceDirName:".",slug:"/",permalink:"/docs/",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Translate your site",permalink:"/docs/tutorial-extras/translate-your-site"},next:{title:"Kafka",permalink:"/docs/doc/Kafka"}},s={},d=[{value:"Supports DDL in MySQL.",id:"supports-ddl-in-mysql",level:5},{value:"Usage",id:"usage",level:3},{value:"From Command line.",id:"from-command-line",level:5},{value:"MySQL Configuration (docker/config.yaml)",id:"mysql-configuration-dockerconfigyaml",level:3},{value:"PostgreSQL Config(docker/config_postgres.yml)",id:"postgresql-configdockerconfig_postgresyml",level:3},{value:"Command Line(JAR)",id:"command-linejar",level:2},{value:"Docker compose",id:"docker-compose",level:3},{value:"Docker",id:"docker",level:5},{value:"CLI tool (To start/stop replication and set binlog status and gtid) - Start replication from a specific binlog position or gtid",id:"cli-tool-to-startstop-replication-and-set-binlog-status-and-gtid---start-replication-from-a-specific-binlog-position-or-gtid",level:5},{value:"Configuration",id:"configuration",level:4},{value:"Quick Start (Docker-compose)",id:"quick-start-docker-compose",level:3},{value:"Recommended Memory limits.",id:"recommended-memory-limits",level:3},{value:"Kubernetes",id:"kubernetes",level:3},{value:"MySQL:",id:"mysql",level:4},{value:"PostgreSQL:",id:"postgresql",level:4},{value:"Development:",id:"development",level:2},{value:"Data Types",id:"data-types",level:2},{value:"Note: Using float data types are highly discouraged, because of the behaviour in ClickHouse with handing precision.(Decimal is a better choice)",id:"note-using-float-data-types-are-highly-discouraged-because-of-the-behaviour-in-clickhouse-with-handing-precisiondecimal-is-a-better-choice",level:4},{value:"Sink Connector Configuration",id:"sink-connector-configuration",level:3},{value:"ClickHouse Loader(Load Data from MySQL to CH for Initial Load)",id:"clickhouse-loaderload-data-from-mysql-to-ch-for-initial-load",level:2}],c={toc:d},p="wrapper";function m(t){let{components:e,...a}=t;return(0,r.kt)(p,(0,n.Z)({},c,a,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"http://www.apache.org/licenses/LICENSE-2.0.html"},(0,r.kt)("img",{parentName:"a",src:"http://img.shields.io/:license-apache%202.0-brightgreen.svg",alt:"License"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Altinity/clickhouse-sink-connector/actions/workflows/sink-connector-lightweight-integration-tests.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/Altinity/clickhouse-sink-connector/actions/workflows/sink-connector-lightweight-integration-tests.yml/badge.svg",alt:"Tests"})),"\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Altinity/clickhouse-sink-connector/actions/workflows/unit_test_docker_image.yml"},(0,r.kt)("img",{parentName:"a",src:"https://github.com/Altinity/clickhouse-sink-connector/actions/workflows/unit_test_docker_image.yml/badge.svg",alt:"Build, Unit tests, Push Docker image."}))),(0,r.kt)("a",{href:"https://join.slack.com/t/altinitydbworkspace/shared_invite/zt-w6mpotc1-fTz9oYp0VM719DNye9UvrQ"},(0,r.kt)("img",{src:"https://img.shields.io/static/v1?logo=slack&logoColor=959DA5&label=Slack&labelColor=333a41&message=join%20conversation&color=3AC358",alt:"AltinityDB Slack"})),(0,r.kt)("h1",{id:"altinity-replicator-for-clickhouse-lightweight-version"},"Altinity Replicator for ClickHouse (Lightweight version)"),(0,r.kt)("p",null,"New tool to replicate data from MySQL, PostgreSQL, MariaDB and Mongo without additional dependencies.\nSingle executable and lightweight."),(0,r.kt)("h5",{id:"supports-ddl-in-mysql"},"Supports DDL in MySQL."),(0,r.kt)("h3",{id:"usage"},"Usage"),(0,r.kt)("h5",{id:"from-command-line"},"From Command line."),(0,r.kt)("p",null,"Download the JAR file from the releases.\n",(0,r.kt)("a",{parentName:"p",href:"https://github.com/Altinity/clickhouse-sink-connector/releases"},"https://github.com/Altinity/clickhouse-sink-connector/releases")),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Update ",(0,r.kt)("strong",{parentName:"li"},"MySQL information")," in config.yaml: ",(0,r.kt)("inlineCode",{parentName:"li"},"database.hostname"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"database.port"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"database.user")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"database.password"),"."),(0,r.kt)("li",{parentName:"ol"},"Update ",(0,r.kt)("strong",{parentName:"li"},"ClickHouse information")," in config.yaml: ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse.server.url"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse.server.user"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse.server.password"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"clickhouse.server.port"),".\nAlso Update ",(0,r.kt)("strong",{parentName:"li"},"ClickHouse information")," for the following fields that are used to store the offset information- ",(0,r.kt)("inlineCode",{parentName:"li"},"offset.storage.jdbc.url"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"offset.storage.jdbc.user"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"offset.storage.jdbc.password"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.history.internal.jdbc.url"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.history.internal.jdbc.user"),", and ",(0,r.kt)("inlineCode",{parentName:"li"},"schema.history.internal.jdbc.password"),"."),(0,r.kt)("li",{parentName:"ol"},"Update MySQL databases to be replicated: ",(0,r.kt)("inlineCode",{parentName:"li"},"database.include.list"),"."),(0,r.kt)("li",{parentName:"ol"},"Add table filters: ",(0,r.kt)("inlineCode",{parentName:"li"},"table.include.list"),"."),(0,r.kt)("li",{parentName:"ol"},"Set ",(0,r.kt)("inlineCode",{parentName:"li"},"snapshot.mode")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"initial")," if you like to replicate existing records, set ",(0,r.kt)("inlineCode",{parentName:"li"},"snapshot.mode")," to ",(0,r.kt)("inlineCode",{parentName:"li"},"schema_only")," to replicate schema and only the records that are modified after the connector is started."),(0,r.kt)("li",{parentName:"ol"},"Start replication by running the JAR file. ",(0,r.kt)("inlineCode",{parentName:"li"},"java -jar clickhouse-debezium-embedded-1.0-SNAPSHOT.jar <yaml_config_file>")," or docker.")),(0,r.kt)("h3",{id:"mysql-configuration-dockerconfigyaml"},"MySQL Configuration (docker/config.yaml)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'database.hostname: "mysql-master"\ndatabase.port: "3306"\ndatabase.user: "root"\ndatabase.password: "root"\ndatabase.server.name: "ER54"\ndatabase.include.list: sbtest\n#table.include.list=sbtest1\nclickhouse.server.url: "clickhouse"\nclickhouse.server.user: "root"\nclickhouse.server.password: "root"\nclickhouse.server.port: "8123"\nclickhouse.server.database: "test"\ndatabase.allowPublicKeyRetrieval: "true"\nsnapshot.mode: "schema_only"\noffset.flush.interval.ms: 5000\nconnector.class: "io.debezium.connector.mysql.MySqlConnector"\noffset.storage: "io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"\noffset.storage.offset.storage.jdbc.offset.table.name: "altinity_sink_connector.replica_source_info"\noffset.storage.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"\noffset.storage.jdbc.user: "root"\noffset.storage.jdbc.password: "root"\noffset.storage.offset.storage.jdbc.offset.table.ddl: "CREATE TABLE if not exists %s\n(\n    `id` String,\n    `offset_key` String,\n    `offset_val` String,\n    `record_insert_ts` DateTime,\n    `record_insert_seq` UInt64,\n    `_version` UInt64 MATERIALIZED toUnixTimestamp64Nano(now64(9))\n)\nENGINE = ReplacingMergeTree(_version)\nORDER BY id\nSETTINGS index_granularity = 8198"\noffset.storage.offset.storage.jdbc.offset.table.delete: "delete from %s where 1=1"\nschema.history.internal: "io.debezium.storage.jdbc.history.JdbcSchemaHistory"\nschema.history.internal.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"\nschema.history.internal.jdbc.user: "root"\nschema.history.internal.jdbc.password: "root"\nschema.history.internal.jdbc.schema.history.table.ddl: "CREATE TABLE if not exists %s\n(`id` VARCHAR(36) NOT NULL, `history_data` VARCHAR(65000), `history_data_seq` INTEGER, `record_insert_ts` TIMESTAMP NOT NULL, `record_insert_seq` INTEGER NOT NULL) ENGINE=ReplacingMergeTree(record_insert_seq) order by id"\n\nschema.history.internal.jdbc.schema.history.table.name: "altinity_sink_connector.replicate_schema_history"\nenable.snapshot.ddl: "true"\n\n')),(0,r.kt)("h3",{id:"postgresql-configdockerconfig_postgresyml"},"PostgreSQL Config(docker/config_postgres.yml)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'database.hostname: "postgres"\ndatabase.port: "5432"\ndatabase.user: "root"\ndatabase.password: "root"\ndatabase.server.name: "ER54"\nschema.include.list: public\nplugin.name: "pgoutput"\ntable.include.list: "public.tm"\nclickhouse.server.url: "clickhouse"\nclickhouse.server.user: "root"\nclickhouse.server.password: "root"\nclickhouse.server.port: "8123"\nclickhouse.server.database: "test"\ndatabase.allowPublicKeyRetrieval: "true"\nsnapshot.mode: "initial"\noffset.flush.interval.ms: 5000\nconnector.class: "io.debezium.connector.postgresql.PostgresConnector"\noffset.storage: "io.debezium.storage.jdbc.offset.JdbcOffsetBackingStore"\noffset.storage.offset.storage.jdbc.offset.table.name: "altinity_sink_connector.replica_source_info"\noffset.storage.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"\noffset.storage.jdbc.user: "root"\noffset.storage.jdbc.password: "root"\noffset.storage.offset.storage.jdbc.offset.table.ddl: "CREATE TABLE if not exists %s\n(\n    `id` String,\n    `offset_key` String,\n    `offset_val` String,\n    `record_insert_ts` DateTime,\n    `record_insert_seq` UInt64,\n    `_version` UInt64 MATERIALIZED toUnixTimestamp64Nano(now64(9))\n)\nENGINE = ReplacingMergeTree(_version)\nORDER BY id\nSETTINGS index_granularity = 8198"\noffset.storage.offset.storage.jdbc.offset.table.delete: "delete from %s where 1=1"\nschema.history.internal: "io.debezium.storage.jdbc.history.JdbcSchemaHistory"\nschema.history.internal.jdbc.url: "jdbc:clickhouse://clickhouse:8123/altinity_sink_connector"\nschema.history.internal.jdbc.user: "root"\nschema.history.internal.jdbc.password: "root"\nschema.history.internal.jdbc.schema.history.table.ddl: "CREATE TABLE if not exists %s\n(`id` VARCHAR(36) NOT NULL, `history_data` VARCHAR(65000), `history_data_seq` INTEGER, `record_insert_ts` TIMESTAMP NOT NULL, `record_insert_seq` INTEGER NOT NULL) ENGINE=ReplacingMergeTree(record_insert_seq) order by id"\n\nschema.history.internal.jdbc.schema.history.table.name: "altinity_sink_connector.replicate_schema_history"\nenable.snapshot.ddl: "true"\nauto.create.tables: "true"\ndatabase.dbname: "public"\n')),(0,r.kt)("h2",{id:"command-linejar"},"Command Line(JAR)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://github.com/Altinity/clickhouse-sink-connector/releases"},"https://github.com/Altinity/clickhouse-sink-connector/releases")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"java -jar clickhouse-debezium-embedded-1.0-SNAPSHOT.jar <yaml_config_file>")),(0,r.kt)("h3",{id:"docker-compose"},"Docker compose"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"export SINK_LIGHTWEIGHT_VERSION=latest")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"MySQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd sink-connector-lightweight/docker\ndocker-compose -f docker-compose-mysql.yml up\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PostgreSQL")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd sink-connector-lightweight/docker\ndocker-compose -f docker-compose-postgres.yml up\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"PostgreSQL(Connect to external PostgreSQL and ClickHouse configuration)")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"cd sink-connector-lightweight/docker\ndocker-compose -f docker-compose-postgres-standalone.yml up\n")),(0,r.kt)("h5",{id:"docker"},"Docker"),(0,r.kt)("p",null,"Images are published in Gitlab."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"registry.gitlab.com/altinity-public/container-images/clickhouse_debezium_embedded:latest")),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/sink-connector-lightweight/"},"Docker Setup instructions")),(0,r.kt)("h5",{id:"cli-tool-to-startstop-replication-and-set-binlog-status-and-gtid---start-replication-from-a-specific-binlog-position-or-gtid"},"CLI tool (To start/stop replication and set binlog status and gtid) - Start replication from a specific binlog position or gtid"),(0,r.kt)("p",null,"Download the ",(0,r.kt)("inlineCode",{parentName:"p"},"sink-connector-client")," from the latest releases."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"}," ./sink-connector-client \nNAME:\n   Sink Connector Lightweight CLI - CLI for Sink Connector Lightweight, operations to get status, start/stop replication and set binlog/gtid position\n\nUSAGE:\n   sink-connector-client [global options] command [command options] [arguments...]\n\nVERSION:\n   1.0\n\nCOMMANDS:\n   start_replica        Start the replication\n   stop_replica         Stop the replication\n   show_replica_status  Status of replication\n   update_binlog        Update binlog file/position and gtids\n   help, h              Shows a list of commands or help for one command\n\nGLOBAL OPTIONS:\n   --host value   Host server address of sink connector\n   --port value   Port of sink connector\n   --secure       If true, then use https, else http\n   --help, -h     show help\n   --version, -v  print the version\n\n\n")),(0,r.kt)("h4",{id:"configuration"},"Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Configuration"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.hostname"),(0,r.kt)("td",{parentName:"tr",align:null},"Source Database HostName")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.port"),(0,r.kt)("td",{parentName:"tr",align:null},"Source Database Port number")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.user"),(0,r.kt)("td",{parentName:"tr",align:null},"Source Database Username(user needs to have replication permission, Refer ",(0,r.kt)("a",{parentName:"td",href:"https://debezium.io/documentation/reference/stable/connectors/mysql.html"},"https://debezium.io/documentation/reference/stable/connectors/mysql.html"),")                                                                                                          GRANT SELECT, RELOAD, SHOW DATABASES, REPLICATION SLAVE, REPLICATION CLIENT ON ",(0,r.kt)("em",{parentName:"td"},".")," TO 'user' IDENTIFIED BY 'password';")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.password"),(0,r.kt)("td",{parentName:"tr",align:null},"Source Database Password")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.include.list"),(0,r.kt)("td",{parentName:"tr",align:null},"List of databases to be included in replication.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"table.include.list"),(0,r.kt)("td",{parentName:"tr",align:null},"List of tables to be included in replication.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.url"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.user"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse username")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.password"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse password")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.port"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse port")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.database"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse destination database")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"snapshot.mode"),(0,r.kt)("td",{parentName:"tr",align:null},'"initial" -> Data that already exists in source database will be replicated. "schema_only" -> Replicate data that is added/modified after the connector is started.\\',(0,r.kt)("br",null)," MySQL: ",(0,r.kt)("a",{parentName:"td",href:"https://debezium.io/documentation/reference/stable/connectors/mysql.html#mysql-property-snapshot-mode"},"https://debezium.io/documentation/reference/stable/connectors/mysql.html#mysql-property-snapshot-mode")," \\ ",(0,r.kt)("br",null),"PostgreSQL: ",(0,r.kt)("a",{parentName:"td",href:"https://debezium.io/documentation/reference/stable/connectors/postgresql.html#postgresql-property-snapshot-mode"},"https://debezium.io/documentation/reference/stable/connectors/postgresql.html#postgresql-property-snapshot-mode"),"  ",(0,r.kt)("br",null)," MongoDB: initial, never. ",(0,r.kt)("a",{parentName:"td",href:"https://debezium.io/documentation/reference/stable/connectors/mongodb.html"},"https://debezium.io/documentation/reference/stable/connectors/mongodb.html"))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"connector.class"),(0,r.kt)("td",{parentName:"tr",align:null},'MySQL -> "io.debezium.connector.mysql.MySqlConnector" ',(0,r.kt)("br",null)," PostgreSQL -> ",(0,r.kt)("br",null)," Mongo ->   ",(0,r.kt)("br",null))),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"offset.storage.file.filename"),(0,r.kt)("td",{parentName:"tr",align:null},"Offset storage file(This stores the offsets of the source database) MySQL: mysql binlog file and position, gtid set. Make sure this file is durable and its not persisted in temp directories.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.history.file.filename"),(0,r.kt)("td",{parentName:"tr",align:null},"Database History: Make sure this file is durable and its not persisted in temp directories.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"schema.history.internal.file.filename"),(0,r.kt)("td",{parentName:"tr",align:null},"Schema History: Make sure this file is durable and its not persisted in temp directories.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"disable.ddl"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Optional"),", Default: false, if DDL execution needs to be disabled")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enable.ddl.snapshot"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Optional"),", Default: false, If set to true, the DDL that is passed as part of snapshot process will be executed. Default behavior is DROP/TRUNCATE as part of snapshot is disabled.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"database.allowPublicKeyRetrieval"),(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("strong",{parentName:"td"},"Optional"),", MySQL specific: true/false")))),(0,r.kt)("h1",{id:"altinity-sink-connector-for-clickhouse"},"Altinity Sink Connector for ClickHouse"),(0,r.kt)("p",null,"Sink connector is used to transfer data from Kafka to Clickhouse using the Kafka connect framework.\nThe connector is tested with the following converters"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"JsonConverter"),(0,r.kt)("li",{parentName:"ul"},"AvroConverter (Using ",(0,r.kt)("a",{parentName:"li",href:"https://www.apicur.io/registry/"},"Apicurio Schema Registry")," or Confluent Schema Registry)")),(0,r.kt)("h1",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Inserts, Updates and Deletes using ReplacingMergeTree - ",(0,r.kt)("a",{parentName:"li",href:"/docs/doc/mutable_data"},"Updates/Deletes")),(0,r.kt)("li",{parentName:"ul"},"Auto create tables in ClickHouse"),(0,r.kt)("li",{parentName:"ul"},"Exactly once semantics "),(0,r.kt)("li",{parentName:"ul"},"Bulk insert to Clickhouse. "),(0,r.kt)("li",{parentName:"ul"},"Store Kafka metadata ",(0,r.kt)("a",{parentName:"li",href:"/docs/doc/Kafka_metadata"},"Kafka Metadata")),(0,r.kt)("li",{parentName:"ul"},"Kafka topic to ClickHouse table mapping, use case where MySQL table can be mapped to a different CH table name."),(0,r.kt)("li",{parentName:"ul"},"Store raw data in JSON(For Auditing purposes)"),(0,r.kt)("li",{parentName:"ul"},"Monitoring(Using Grafana/Prometheus) Dashboard to monitor lag."),(0,r.kt)("li",{parentName:"ul"},"Kafka Offset management in ClickHouse"),(0,r.kt)("li",{parentName:"ul"},"Increased Parallelism(Customize thread pool for JDBC connections)")),(0,r.kt)("h1",{id:"source-databases"},"Source Databases"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"MySQL (Debezium)\n",(0,r.kt)("strong",{parentName:"li"},"Note:GTID Enabled - Highly encouraged for Updates/Deletes"),"\nRefer enabling Gtid in Replica for non-GTID sources - ",(0,r.kt)("a",{parentName:"li",href:"https://www.percona.com/blog/useful-gtid-feature-for-migrating-to-mysql-gtid-replication-assign_gtids_to_anonymous_transactions/"},"https://www.percona.com/blog/useful-gtid-feature-for-migrating-to-mysql-gtid-replication-assign_gtids_to_anonymous_transactions/")),(0,r.kt)("li",{parentName:"ul"},"PostgreSQL (Debezium)")),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Component"),(0,r.kt)("th",{parentName:"tr",align:null},"Version(Tested)"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Redpanda"),(0,r.kt)("td",{parentName:"tr",align:null},"22.1.3, 22.3.9")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Kafka-connect"),(0,r.kt)("td",{parentName:"tr",align:null},"1.9.5.Final")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Debezium"),(0,r.kt)("td",{parentName:"tr",align:null},"2.1.0.Alpha1")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"MySQL"),(0,r.kt)("td",{parentName:"tr",align:null},"8.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse"),(0,r.kt)("td",{parentName:"tr",align:null},"22.9, 22.10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"PostgreSQL"),(0,r.kt)("td",{parentName:"tr",align:null},"15")))),(0,r.kt)("h3",{id:"quick-start-docker-compose"},"Quick Start (Docker-compose)"),(0,r.kt)("p",null,"Docker image for Sink connector (Updated December 12, 2022)\n",(0,r.kt)("inlineCode",{parentName:"p"},"altinity/clickhouse-sink-connector:latest"),"\n",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/r/altinity/clickhouse-sink-connector"},"https://hub.docker.com/r/altinity/clickhouse-sink-connector")),(0,r.kt)("h3",{id:"recommended-memory-limits"},"Recommended Memory limits."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Production Usage"),"\nIn ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose.yml")," file, its recommended to set Xmx to atleast 5G ",(0,r.kt)("inlineCode",{parentName:"p"},"-Xmx5G")," when using in Production and\nif you encounter a ",(0,r.kt)("inlineCode",{parentName:"p"},"Out of memory/Heap exception")," error.\nfor both ",(0,r.kt)("strong",{parentName:"p"},"Debezium")," and ",(0,r.kt)("strong",{parentName:"p"},"Sink")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"- KAFKA_HEAP_OPTS=-Xms2G -Xmx5G\n")),(0,r.kt)("h3",{id:"kubernetes"},"Kubernetes"),(0,r.kt)("p",null,"Docker Image for Sink connector(with Strimzi)\n",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/repository/docker/subkanthi/clickhouse-kafka-sink-connector-strimzi"},"https://hub.docker.com/repository/docker/subkanthi/clickhouse-kafka-sink-connector-strimzi")),(0,r.kt)("p",null,"Docker Image for Debezium MySQL connector(with Strimzi)\n",(0,r.kt)("a",{parentName:"p",href:"https://hub.docker.com/repository/docker/subkanthi/debezium-mysql-source-connector"},"https://hub.docker.com/repository/docker/subkanthi/debezium-mysql-source-connector")),(0,r.kt)("p",null,"Recommended to atleast set 5Gi as memory limits to run on kubernetes using strimzi."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-resources:"},"      limits:\n        memory: 6Gi\n      requests:\n        memory: 6Gi\n\n")),(0,r.kt)("h4",{id:"mysql"},"MySQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"cd deploy/docker\n./start-docker-compose.sh \n")),(0,r.kt)("h4",{id:"postgresql"},"PostgreSQL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"export SINK_VERSION=latest\ncd deploy/docker\ndocker-compose -f docker-compose.yaml -f docker-compose-postgresql.override.yaml up\n")),(0,r.kt)("p",null,"For Detailed setup instructions - ",(0,r.kt)("a",{parentName:"p",href:"/docs/doc/setup"},"Setup")),(0,r.kt)("h2",{id:"development"},"Development:"),(0,r.kt)("p",null,"Requirements"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Java JDK 11 (",(0,r.kt)("a",{parentName:"li",href:"https://openjdk.java.net/projects/jdk/11/"},"https://openjdk.java.net/projects/jdk/11/"),")"),(0,r.kt)("li",{parentName:"ul"},"Maven (mvn) (",(0,r.kt)("a",{parentName:"li",href:"https://maven.apache.org/download.cgi"},"https://maven.apache.org/download.cgi"),")"),(0,r.kt)("li",{parentName:"ul"},"Docker and Docker-compose")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"mvn install -DskipTests=true\n")),(0,r.kt)("h2",{id:"data-types"},"Data Types"),(0,r.kt)("h4",{id:"note-using-float-data-types-are-highly-discouraged-because-of-the-behaviour-in-clickhouse-with-handing-precisiondecimal-is-a-better-choice"},"Note: Using float data types are highly discouraged, because of the behaviour in ClickHouse with handing precision.(Decimal is a better choice)"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"MySQL"),(0,r.kt)("th",{parentName:"tr",align:null},"Kafka    Connect"),(0,r.kt)("th",{parentName:"tr",align:null},"ClickHouse"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bigint"),(0,r.kt)("td",{parentName:"tr",align:null},"INT64","_","SCHEMA"),(0,r.kt)("td",{parentName:"tr",align:null},"Int64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Bigint Unsigned"),(0,r.kt)("td",{parentName:"tr",align:null},"INT64","_","SCHEMA"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Blob"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String + hex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Char"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"String / LowCardinality(String)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Date"),(0,r.kt)("td",{parentName:"tr",align:null},"Schema: INT64Name:debezium.Date"),(0,r.kt)("td",{parentName:"tr",align:null},"Date(6)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"DateTime(6)"),(0,r.kt)("td",{parentName:"tr",align:null},"Schema: INT64Name: debezium.Timestamp"),(0,r.kt)("td",{parentName:"tr",align:null},"DateTime64(6)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Decimal(30,12)"),(0,r.kt)("td",{parentName:"tr",align:null},"Schema: BytesName:kafka.connect.data.Decimal"),(0,r.kt)("td",{parentName:"tr",align:null},"Decimal(30,12)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Double"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"Float64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32"),(0,r.kt)("td",{parentName:"tr",align:null},"Int32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Int Unsigned"),(0,r.kt)("td",{parentName:"tr",align:null},"INT64"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Longblob"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String + hex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mediumblob"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String + hex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mediumint"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32"),(0,r.kt)("td",{parentName:"tr",align:null},"Int32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Mediumint Unsigned"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Smallint"),(0,r.kt)("td",{parentName:"tr",align:null},"INT16"),(0,r.kt)("td",{parentName:"tr",align:null},"Int16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Smallint Unsigned"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt16")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Text"),(0,r.kt)("td",{parentName:"tr",align:null},"String"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Time"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Time(6)"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"DateTime64")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tinyint"),(0,r.kt)("td",{parentName:"tr",align:null},"INT16"),(0,r.kt)("td",{parentName:"tr",align:null},"Int8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"Tinyint Unsigned"),(0,r.kt)("td",{parentName:"tr",align:null},"INT16"),(0,r.kt)("td",{parentName:"tr",align:null},"UInt8")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"varbinary(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String + hex")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"varchar(","*",")"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"JSON"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"BYTES"),(0,r.kt)("td",{parentName:"tr",align:null},"BYTES, io.debezium.bits"),(0,r.kt)("td",{parentName:"tr",align:null},"String")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"YEAR"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32"),(0,r.kt)("td",{parentName:"tr",align:null},"INT32")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"GEOMETRY"),(0,r.kt)("td",{parentName:"tr",align:null},"Binary of WKB"),(0,r.kt)("td",{parentName:"tr",align:null},"String")))),(0,r.kt)("h3",{id:"sink-connector-configuration"},"Sink Connector Configuration"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Property"),(0,r.kt)("th",{parentName:"tr",align:null},"Default"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"tasks.max"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"SinkConnector task(essentially threads), ideally this needs to be the same as the Kafka partitions.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"topics.regex"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},'Regex of matching topics.  Example: "SERVER5432.test.(.*)" matches SERVER5432.test.employees and SERVER5432.test.products')),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"topics"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"The list of topics. topics or topics.regex has to be provided.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.url"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Server URL")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.user"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Server username")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.password"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Server password")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.database"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Database name")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.server.port"),(0,r.kt)("td",{parentName:"tr",align:null},"8123"),(0,r.kt)("td",{parentName:"tr",align:null},"ClickHouse Server port")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"clickhouse.topic2table.map"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Map of Kafka topics to table names, <topic_name1>:<table_name1>,<topic_name2>:<table_name2> This variable will override the default mapping of topics to table names.")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"store.kafka.metadata"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, kafka metadata columns will be added to Clickhouse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"store.raw.data"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"If set to true, the entire row is converted to JSON and stored in the column defined by the  ",(0,r.kt)("inlineCode",{parentName:"td"},"store.raw.data.column")," field")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"store.raw.data.column"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Clickhouse table column to store the raw data in JSON form(String Clickhouse DataType)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"metrics.enable"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Enable Prometheus scraping")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"metrics.port"),(0,r.kt)("td",{parentName:"tr",align:null},"8084"),(0,r.kt)("td",{parentName:"tr",align:null},"Metrics port")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"buffer.flush.time.ms"),(0,r.kt)("td",{parentName:"tr",align:null},"30"),(0,r.kt)("td",{parentName:"tr",align:null},"Buffer(Batch of records) flush time in milliseconds")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"thread.pool.size"),(0,r.kt)("td",{parentName:"tr",align:null},"10"),(0,r.kt)("td",{parentName:"tr",align:null},"Number of threads that is used to connect to ClickHouse")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"auto.create.tables"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"Sink connector will create tables in ClickHouse (If it does not exist)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"snowflake.id"),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"Uses SnowFlake ID(Timestamp + GTID) as the version column for ReplacingMergeTree")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replacingmergetree.delete.column"),(0,r.kt)("td",{parentName:"tr",align:null},'"sign"'),(0,r.kt)("td",{parentName:"tr",align:null},"Column used as the sign column for ReplacingMergeTree.")))),(0,r.kt)("h2",{id:"clickhouse-loaderload-data-from-mysql-to-ch-for-initial-load"},"ClickHouse Loader(Load Data from MySQL to CH for Initial Load)"),(0,r.kt)("p",null,"ClickHouse loader is a program that loads data dumped in MySQL into a CH database compatible the sink connector (ReplacingMergeTree with virtual columns _version and _sign)"))}m.isMDXComponent=!0}}]);