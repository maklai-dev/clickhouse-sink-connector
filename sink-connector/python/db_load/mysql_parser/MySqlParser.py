# Generated from MySqlParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,1155,7233,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,
        6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,
        7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
        2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,
        7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,
        2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,
        7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,
        2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,
        7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,58,
        2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,2,64,7,64,2,65,
        7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,2,71,7,71,
        2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,78,
        7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,
        2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
        7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,
        2,98,7,98,2,99,7,99,2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,
        103,2,104,7,104,2,105,7,105,2,106,7,106,2,107,7,107,2,108,7,108,
        2,109,7,109,2,110,7,110,2,111,7,111,2,112,7,112,2,113,7,113,2,114,
        7,114,2,115,7,115,2,116,7,116,2,117,7,117,2,118,7,118,2,119,7,119,
        2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,2,124,7,124,2,125,
        7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,2,130,7,130,
        2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,2,136,
        7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
        2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,
        7,147,2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,
        2,153,7,153,2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,
        7,158,2,159,7,159,2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,
        2,164,7,164,2,165,7,165,2,166,7,166,2,167,7,167,2,168,7,168,2,169,
        7,169,2,170,7,170,2,171,7,171,2,172,7,172,2,173,7,173,2,174,7,174,
        2,175,7,175,2,176,7,176,2,177,7,177,2,178,7,178,2,179,7,179,2,180,
        7,180,2,181,7,181,2,182,7,182,2,183,7,183,2,184,7,184,2,185,7,185,
        2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,2,190,7,190,2,191,
        7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,2,196,7,196,
        2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,2,202,
        7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
        2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,
        7,213,2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,
        2,219,7,219,2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,
        7,224,2,225,7,225,2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,
        2,230,7,230,2,231,7,231,2,232,7,232,2,233,7,233,2,234,7,234,2,235,
        7,235,2,236,7,236,2,237,7,237,2,238,7,238,2,239,7,239,2,240,7,240,
        2,241,7,241,2,242,7,242,2,243,7,243,2,244,7,244,2,245,7,245,2,246,
        7,246,2,247,7,247,2,248,7,248,2,249,7,249,2,250,7,250,2,251,7,251,
        2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,2,256,7,256,2,257,
        7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,2,262,7,262,
        2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,2,268,
        7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
        2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,
        7,279,2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,
        2,285,7,285,2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,
        7,290,2,291,7,291,2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,
        2,296,7,296,2,297,7,297,2,298,7,298,2,299,7,299,2,300,7,300,2,301,
        7,301,2,302,7,302,2,303,7,303,2,304,7,304,2,305,7,305,2,306,7,306,
        2,307,7,307,2,308,7,308,2,309,7,309,2,310,7,310,2,311,7,311,2,312,
        7,312,2,313,7,313,2,314,7,314,2,315,7,315,2,316,7,316,2,317,7,317,
        2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,2,322,7,322,2,323,
        7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,2,328,7,328,
        2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,2,334,
        7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
        2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,
        7,345,2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,1,0,3,0,702,
        8,0,1,0,1,0,3,0,706,8,0,1,0,1,0,1,1,1,1,1,1,3,1,713,8,1,1,1,3,1,
        716,8,1,1,1,5,1,719,8,1,10,1,12,1,722,9,1,1,1,1,1,1,1,3,1,727,8,
        1,1,1,3,1,730,8,1,1,1,3,1,733,8,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,
        2,742,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,
        4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,784,8,4,1,5,1,5,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,796,8,5,1,6,1,6,1,6,1,6,1,6,1,
        6,1,6,1,6,1,6,3,6,807,8,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
        7,1,7,1,7,1,7,1,7,1,7,3,7,824,8,7,1,8,1,8,1,8,3,8,829,8,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,3,9,841,8,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,868,8,10,1,11,1,11,
        1,11,1,11,1,11,1,11,1,11,3,11,877,8,11,1,12,1,12,1,12,3,12,882,8,
        12,1,12,1,12,5,12,886,8,12,10,12,12,12,889,9,12,1,13,1,13,3,13,893,
        8,13,1,13,1,13,3,13,897,8,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,906,8,13,1,13,3,13,909,8,13,1,13,3,13,912,8,13,1,13,1,13,3,
        13,916,8,13,1,13,1,13,1,13,1,14,1,14,3,14,923,8,14,1,14,3,14,926,
        8,14,1,14,1,14,1,14,3,14,931,8,14,1,14,1,14,1,14,1,14,5,14,937,8,
        14,10,14,12,14,940,9,14,1,14,1,14,3,14,944,8,14,1,14,1,14,1,14,3,
        14,949,8,14,1,14,5,14,952,8,14,10,14,12,14,955,9,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,966,8,15,1,15,3,15,969,8,15,
        1,15,1,15,3,15,973,8,15,1,15,3,15,976,8,15,1,15,1,15,3,15,980,8,
        15,1,15,3,15,983,8,15,1,15,1,15,3,15,987,8,15,1,15,3,15,990,8,15,
        1,15,3,15,993,8,15,1,15,1,15,3,15,997,8,15,1,15,3,15,1000,8,15,1,
        15,1,15,3,15,1004,8,15,1,15,1,15,1,16,1,16,3,16,1010,8,16,1,16,1,
        16,1,16,1,16,3,16,1016,8,16,1,16,1,16,5,16,1020,8,16,10,16,12,16,
        1023,9,16,1,16,1,16,5,16,1027,8,16,10,16,12,16,1030,9,16,1,16,1,
        16,1,17,1,17,3,17,1036,8,17,1,17,3,17,1039,8,17,1,17,1,17,3,17,1043,
        8,17,1,17,1,17,1,17,3,17,1048,8,17,1,17,1,17,5,17,1052,8,17,10,17,
        12,17,1055,9,17,1,17,1,17,1,17,1,17,5,17,1061,8,17,10,17,12,17,1064,
        9,17,1,17,1,17,3,17,1068,8,17,1,18,1,18,1,18,3,18,1073,8,18,1,18,
        1,18,1,18,5,18,1078,8,18,10,18,12,18,1081,9,18,1,19,1,19,1,19,1,
        19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,5,19,1095,8,19,10,19,
        12,19,1098,9,19,1,19,1,19,1,20,1,20,3,20,1104,8,20,1,20,1,20,3,20,
        1108,8,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,1118,8,20,
        1,20,1,20,3,20,1122,8,20,1,20,1,20,3,20,1126,8,20,1,20,1,20,3,20,
        1130,8,20,1,20,1,20,3,20,1134,8,20,1,20,5,20,1137,8,20,10,20,12,
        20,1140,9,20,3,20,1142,8,20,1,20,3,20,1145,8,20,1,20,3,20,1148,8,
        20,1,20,3,20,1151,8,20,1,20,1,20,1,20,1,20,3,20,1157,8,20,1,20,1,
        20,3,20,1161,8,20,1,20,1,20,1,20,1,20,3,20,1167,8,20,1,20,5,20,1170,
        8,20,10,20,12,20,1173,9,20,3,20,1175,8,20,1,20,3,20,1178,8,20,3,
        20,1180,8,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,3,21,1191,
        8,21,1,21,1,21,3,21,1195,8,21,1,21,3,21,1198,8,21,1,22,1,22,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,22,1212,8,22,1,22,
        3,22,1215,8,22,1,22,1,22,3,22,1219,8,22,1,22,3,22,1222,8,22,1,22,
        1,22,3,22,1226,8,22,1,22,3,22,1229,8,22,1,22,1,22,3,22,1233,8,22,
        1,22,3,22,1236,8,22,1,22,1,22,3,22,1240,8,22,1,22,3,22,1243,8,22,
        1,22,3,22,1246,8,22,1,22,1,22,3,22,1250,8,22,1,22,3,22,1253,8,22,
        1,22,1,22,3,22,1257,8,22,1,22,1,22,1,23,1,23,3,23,1263,8,23,1,23,
        1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,1276,8,23,
        1,23,1,23,1,24,1,24,3,24,1282,8,24,1,24,1,24,1,25,1,25,1,25,1,25,
        1,25,5,25,1291,8,25,10,25,12,25,1294,9,25,1,25,1,25,3,25,1298,8,
        25,1,25,1,25,1,25,1,25,1,25,1,25,3,25,1306,8,25,1,26,1,26,1,27,1,
        27,1,28,1,28,3,28,1314,8,28,1,28,1,28,1,28,3,28,1319,8,28,1,28,3,
        28,1322,8,28,1,28,1,28,1,28,3,28,1327,8,28,1,28,1,28,1,28,1,28,1,
        28,1,28,3,28,1335,8,28,1,28,1,28,1,28,3,28,1340,8,28,1,28,1,28,1,
        28,1,28,3,28,1346,8,28,1,28,1,28,1,28,3,28,1351,8,28,1,28,1,28,3,
        28,1355,8,28,3,28,1357,8,28,1,29,3,29,1360,8,29,1,29,1,29,3,29,1364,
        8,29,1,29,1,29,3,29,1368,8,29,1,29,3,29,1371,8,29,1,29,1,29,3,29,
        1375,8,29,1,29,1,29,3,29,1379,8,29,1,29,1,29,3,29,1383,8,29,1,29,
        1,29,1,29,1,29,3,29,1389,8,29,1,29,3,29,1392,8,29,1,30,1,30,1,30,
        1,30,1,30,3,30,1399,8,30,1,31,1,31,1,31,1,31,1,31,1,31,3,31,1407,
        8,31,3,31,1409,8,31,1,32,1,32,1,32,5,32,1414,8,32,10,32,12,32,1417,
        9,32,1,32,1,32,1,32,3,32,1422,8,32,1,32,1,32,1,32,1,32,5,32,1428,
        8,32,10,32,12,32,1431,9,32,3,32,1433,8,32,1,32,1,32,1,32,5,32,1438,
        8,32,10,32,12,32,1441,9,32,3,32,1443,8,32,3,32,1445,8,32,1,33,1,
        33,1,33,1,33,3,33,1451,8,33,1,34,1,34,1,34,1,34,3,34,1457,8,34,1,
        34,1,34,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,35,1,
        35,1,35,3,35,1474,8,35,1,36,1,36,1,36,1,36,1,36,3,36,1481,8,36,1,
        37,1,37,1,37,1,38,1,38,3,38,1488,8,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,3,38,1500,8,38,1,38,1,38,1,38,3,38,1505,8,
        38,1,38,3,38,1508,8,38,1,39,3,39,1511,8,39,1,39,1,39,1,39,1,40,1,
        40,1,40,1,41,1,41,1,41,1,41,1,41,3,41,1524,8,41,1,41,1,41,1,41,1,
        41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,1537,8,41,1,41,1,41,1,
        41,3,41,1542,8,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,42,1,42,3,42,1558,8,42,1,43,1,43,1,43,1,43,5,43,1564,
        8,43,10,43,12,43,1567,9,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,3,
        44,1576,8,44,1,45,1,45,5,45,1580,8,45,10,45,12,45,1583,9,45,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,3,46,1594,8,46,1,46,3,46,
        1597,8,46,1,46,1,46,1,46,3,46,1602,8,46,1,46,1,46,1,46,1,46,1,46,
        1,46,1,46,1,46,1,46,1,46,1,46,3,46,1615,8,46,1,46,1,46,1,46,1,46,
        1,46,3,46,1622,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1629,8,46,3,46,
        1631,8,46,1,46,1,46,1,46,1,46,1,46,3,46,1638,8,46,1,47,1,47,3,47,
        1642,8,47,3,47,1644,8,47,1,47,1,47,1,47,3,47,1649,8,47,1,47,3,47,
        1652,8,47,1,47,1,47,5,47,1656,8,47,10,47,12,47,1659,9,47,1,47,1,
        47,3,47,1663,8,47,3,47,1665,8,47,1,47,1,47,3,47,1669,8,47,1,47,3,
        47,1672,8,47,1,47,3,47,1675,8,47,1,47,1,47,5,47,1679,8,47,10,47,
        12,47,1682,9,47,1,47,1,47,3,47,1686,8,47,3,47,1688,8,47,1,47,1,47,
        1,47,3,47,1693,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1700,8,47,3,47,
        1702,8,47,1,47,1,47,1,47,1,47,1,47,3,47,1709,8,47,1,48,1,48,1,48,
        3,48,1714,8,48,1,48,1,48,3,48,1718,8,48,1,48,3,48,1721,8,48,1,49,
        1,49,1,49,1,49,1,49,1,49,3,49,1729,8,49,1,49,1,49,1,49,1,49,1,49,
        1,49,3,49,1737,8,49,3,49,1739,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        3,50,1747,8,50,1,51,1,51,3,51,1751,8,51,1,51,3,51,1754,8,51,1,51,
        1,51,5,51,1758,8,51,10,51,12,51,1761,9,51,1,51,1,51,3,51,1765,8,
        51,1,51,3,51,1768,8,51,1,51,1,51,5,51,1772,8,51,10,51,12,51,1775,
        9,51,3,51,1777,8,51,1,52,1,52,3,52,1781,8,52,1,52,3,52,1784,8,52,
        1,52,1,52,3,52,1788,8,52,1,52,1,52,1,52,3,52,1793,8,52,1,52,1,52,
        1,52,3,52,1798,8,52,1,52,1,52,1,52,3,52,1803,8,52,1,52,1,52,3,52,
        1807,8,52,1,52,1,52,3,52,1811,8,52,1,52,1,52,3,52,1815,8,52,1,52,
        1,52,3,52,1819,8,52,1,52,1,52,3,52,1823,8,52,1,52,1,52,3,52,1827,
        8,52,1,52,1,52,1,52,3,52,1832,8,52,1,52,1,52,1,52,3,52,1837,8,52,
        1,52,1,52,1,52,3,52,1842,8,52,1,52,1,52,1,52,1,52,3,52,1848,8,52,
        1,52,1,52,1,52,3,52,1853,8,52,1,52,1,52,1,52,3,52,1858,8,52,1,52,
        1,52,1,52,3,52,1863,8,52,1,52,1,52,1,52,3,52,1868,8,52,1,52,1,52,
        1,52,3,52,1873,8,52,1,52,1,52,1,52,1,52,3,52,1879,8,52,1,52,1,52,
        1,52,3,52,1884,8,52,1,52,1,52,1,52,3,52,1889,8,52,1,52,1,52,1,52,
        3,52,1894,8,52,1,52,1,52,1,52,3,52,1899,8,52,1,52,1,52,1,52,3,52,
        1904,8,52,1,52,1,52,1,52,3,52,1909,8,52,1,52,1,52,1,52,3,52,1914,
        8,52,1,52,1,52,1,52,1,52,1,52,3,52,1921,8,52,1,52,1,52,1,52,3,52,
        1926,8,52,1,52,1,52,1,52,3,52,1931,8,52,1,52,1,52,1,52,3,52,1936,
        8,52,1,52,1,52,3,52,1940,8,52,1,52,1,52,1,52,3,52,1945,8,52,1,52,
        1,52,1,52,1,52,1,52,1,52,3,52,1953,8,52,1,52,1,52,1,52,3,52,1958,
        8,52,1,52,1,52,1,52,1,52,3,52,1964,8,52,1,53,1,53,1,54,1,54,1,54,
        1,55,1,55,1,55,1,55,1,55,3,55,1976,8,55,1,55,1,55,1,55,1,55,1,55,
        3,55,1983,8,55,3,55,1985,8,55,1,55,1,55,1,55,1,55,5,55,1991,8,55,
        10,55,12,55,1994,9,55,1,55,1,55,3,55,1998,8,55,1,56,3,56,2001,8,
        56,1,56,1,56,1,56,1,56,1,56,1,56,3,56,2009,8,56,1,56,1,56,1,56,1,
        56,3,56,2015,8,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,3,56,2031,8,56,1,56,1,56,1,56,1,56,1,56,1,
        56,1,56,1,56,1,56,1,56,3,56,2043,8,56,3,56,2045,8,56,1,57,3,57,2048,
        8,57,1,57,1,57,1,57,1,57,1,57,1,57,3,57,2056,8,57,1,57,1,57,1,57,
        1,57,3,57,2062,8,57,1,57,1,57,1,57,1,57,3,57,2068,8,57,1,58,1,58,
        1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,2079,8,58,10,58,12,58,2082,
        9,58,1,58,1,58,5,58,2086,8,58,10,58,12,58,2089,9,58,1,58,1,58,1,
        58,1,58,5,58,2095,8,58,10,58,12,58,2098,9,58,1,58,1,58,3,58,2102,
        8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,5,58,2111,8,58,10,58,12,
        58,2114,9,58,1,58,1,58,1,58,1,58,5,58,2120,8,58,10,58,12,58,2123,
        9,58,1,58,1,58,3,58,2127,8,58,1,58,1,58,1,58,1,58,1,58,1,58,1,58,
        1,58,5,58,2137,8,58,10,58,12,58,2140,9,58,1,58,1,58,5,58,2144,8,
        58,10,58,12,58,2147,9,58,1,58,1,58,1,58,1,58,5,58,2153,8,58,10,58,
        12,58,2156,9,58,1,58,1,58,3,58,2160,8,58,1,58,1,58,1,58,1,58,1,58,
        1,58,1,58,1,58,5,58,2170,8,58,10,58,12,58,2173,9,58,1,58,1,58,5,
        58,2177,8,58,10,58,12,58,2180,9,58,1,58,1,58,1,58,1,58,5,58,2186,
        8,58,10,58,12,58,2189,9,58,1,58,1,58,3,58,2193,8,58,1,58,1,58,1,
        58,5,58,2198,8,58,10,58,12,58,2201,9,58,1,58,1,58,1,58,1,58,5,58,
        2207,8,58,10,58,12,58,2210,9,58,1,58,1,58,3,58,2214,8,58,3,58,2216,
        8,58,1,59,1,59,1,59,3,59,2221,8,59,1,60,1,60,1,60,1,60,4,60,2227,
        8,60,11,60,12,60,2228,1,60,1,60,1,61,1,61,1,61,5,61,2236,8,61,10,
        61,12,61,2239,9,61,1,62,3,62,2242,8,62,1,62,3,62,2245,8,62,1,62,
        1,62,3,62,2249,8,62,1,62,1,62,1,62,3,62,2254,8,62,1,62,1,62,1,62,
        1,62,3,62,2260,8,62,1,62,1,62,1,62,1,62,3,62,2266,8,62,1,62,1,62,
        1,62,3,62,2271,8,62,1,62,1,62,1,62,3,62,2276,8,62,1,62,1,62,1,62,
        3,62,2281,8,62,1,62,1,62,1,62,3,62,2286,8,62,1,62,3,62,2289,8,62,
        1,63,1,63,1,63,3,63,2294,8,63,1,63,4,63,2297,8,63,11,63,12,63,2298,
        1,63,1,63,1,63,1,63,1,63,1,63,1,63,1,63,3,63,2309,8,63,1,64,1,64,
        3,64,2313,8,64,1,64,1,64,1,64,1,64,1,64,3,64,2320,8,64,1,64,1,64,
        1,64,3,64,2325,8,64,1,64,3,64,2328,8,64,1,64,1,64,1,64,3,64,2333,
        8,64,1,64,3,64,2336,8,64,1,64,1,64,3,64,2340,8,64,1,64,1,64,3,64,
        2344,8,64,1,65,1,65,1,65,1,65,5,65,2350,8,65,10,65,12,65,2353,9,
        65,1,66,1,66,1,66,1,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,1,67,1,
        67,1,67,1,67,1,67,3,67,2371,8,67,1,67,3,67,2374,8,67,1,67,3,67,2377,
        8,67,1,67,1,67,3,67,2381,8,67,1,67,1,67,1,68,1,68,1,68,1,68,5,68,
        2389,8,68,10,68,12,68,2392,9,68,1,69,1,69,1,69,1,69,1,69,1,69,1,
        69,1,69,5,69,2402,8,69,10,69,12,69,2405,9,69,1,69,1,69,1,70,1,70,
        3,70,2411,8,70,1,70,3,70,2414,8,70,1,70,1,70,1,70,3,70,2419,8,70,
        1,70,1,70,1,70,5,70,2424,8,70,10,70,12,70,2427,9,70,3,70,2429,8,
        70,1,70,3,70,2432,8,70,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,71,1,
        71,3,71,2443,8,71,1,71,3,71,2446,8,71,1,71,1,71,3,71,2450,8,71,1,
        71,1,71,1,72,1,72,1,72,1,72,3,72,2458,8,72,1,72,3,72,2461,8,72,1,
        72,1,72,1,72,3,72,2466,8,72,1,72,1,72,1,72,1,72,1,72,1,72,3,72,2474,
        8,72,1,72,1,72,1,72,1,72,3,72,2480,8,72,1,72,1,72,3,72,2484,8,72,
        1,73,1,73,3,73,2488,8,73,1,73,5,73,2491,8,73,10,73,12,73,2494,9,
        73,1,73,1,73,3,73,2498,8,73,1,73,1,73,1,73,1,73,1,73,3,73,2505,8,
        73,1,73,1,73,3,73,2509,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,
        73,2518,8,73,10,73,12,73,2521,9,73,1,73,1,73,1,73,1,73,1,73,3,73,
        2528,8,73,1,73,3,73,2531,8,73,1,73,1,73,5,73,2535,8,73,10,73,12,
        73,2538,9,73,1,73,1,73,1,73,3,73,2543,8,73,3,73,2545,8,73,1,73,1,
        73,1,73,3,73,2550,8,73,1,73,3,73,2553,8,73,1,73,1,73,5,73,2557,8,
        73,10,73,12,73,2560,9,73,1,73,1,73,1,73,3,73,2565,8,73,3,73,2567,
        8,73,1,73,1,73,3,73,2571,8,73,1,73,3,73,2574,8,73,1,73,3,73,2577,
        8,73,1,73,1,73,5,73,2581,8,73,10,73,12,73,2584,9,73,1,73,1,73,1,
        73,3,73,2589,8,73,1,73,3,73,2592,8,73,1,73,1,73,5,73,2596,8,73,10,
        73,12,73,2599,9,73,1,73,1,73,1,73,3,73,2604,8,73,3,73,2606,8,73,
        1,73,1,73,1,73,3,73,2611,8,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        2619,8,73,3,73,2621,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,
        2630,8,73,1,73,1,73,1,73,3,73,2635,8,73,1,73,1,73,1,73,1,73,1,73,
        1,73,3,73,2643,8,73,1,73,1,73,3,73,2647,8,73,1,73,1,73,1,73,1,73,
        1,73,1,73,3,73,2655,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2665,8,73,1,73,1,73,1,73,3,73,2670,8,73,1,73,1,73,1,73,1,73,
        1,73,3,73,2677,8,73,1,73,1,73,3,73,2681,8,73,1,73,1,73,3,73,2685,
        8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,2717,8,73,1,73,1,73,3,73,2721,8,73,
        1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2733,8,73,
        1,73,3,73,2736,8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,3,73,2745,
        8,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        1,73,5,73,2760,8,73,10,73,12,73,2763,9,73,1,73,1,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,3,73,2774,8,73,1,73,1,73,1,73,1,73,1,73,3,
        73,2781,8,73,1,73,1,73,1,73,1,73,1,73,3,73,2788,8,73,1,73,1,73,1,
        73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,5,73,2801,8,73,10,73,
        12,73,2804,9,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,1,73,
        3,73,2816,8,73,1,73,1,73,1,73,1,73,3,73,2822,8,73,1,73,1,73,1,73,
        1,73,3,73,2828,8,73,1,73,1,73,1,73,1,73,3,73,2834,8,73,1,73,1,73,
        1,73,1,73,3,73,2840,8,73,1,73,1,73,1,73,1,73,3,73,2846,8,73,1,73,
        1,73,1,73,1,73,1,73,1,73,3,73,2854,8,73,1,73,1,73,1,73,1,73,5,73,
        2860,8,73,10,73,12,73,2863,9,73,1,73,1,73,3,73,2867,8,73,1,74,1,
        74,1,74,3,74,2872,8,74,1,74,1,74,1,75,1,75,1,75,3,75,2879,8,75,1,
        75,1,75,1,76,1,76,1,76,3,76,2886,8,76,1,76,1,76,1,76,1,76,1,76,3,
        76,2893,8,76,1,76,1,76,1,76,3,76,2898,8,76,1,76,5,76,2901,8,76,10,
        76,12,76,2904,9,76,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,77,1,78,
        1,78,1,78,3,78,2917,8,78,1,78,1,78,1,79,1,79,1,79,3,79,2924,8,79,
        1,79,1,79,1,80,1,80,1,80,3,80,2931,8,80,1,80,1,80,1,81,1,81,3,81,
        2937,8,81,1,81,1,81,3,81,2941,8,81,1,81,1,81,3,81,2945,8,81,1,82,
        1,82,1,82,1,82,1,82,3,82,2952,8,82,1,82,3,82,2955,8,82,1,83,1,83,
        1,83,3,83,2960,8,83,1,83,1,83,1,84,1,84,1,84,3,84,2967,8,84,1,84,
        1,84,1,84,5,84,2972,8,84,10,84,12,84,2975,9,84,1,84,3,84,2978,8,
        84,1,85,1,85,1,85,3,85,2983,8,85,1,85,1,85,1,85,5,85,2988,8,85,10,
        85,12,85,2991,9,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,
        3001,8,86,10,86,12,86,3004,9,86,3,86,3006,8,86,1,86,1,86,1,86,3,
        86,3011,8,86,1,86,1,86,1,86,3,86,3016,8,86,5,86,3018,8,86,10,86,
        12,86,3021,9,86,1,86,1,86,1,86,3,86,3026,8,86,1,87,1,87,1,87,1,87,
        1,87,5,87,3033,8,87,10,87,12,87,3036,9,87,1,88,1,88,1,88,1,88,1,
        89,1,89,3,89,3044,8,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,3,90,3053,
        8,90,1,90,3,90,3056,8,90,1,91,1,91,3,91,3060,8,91,1,92,1,92,1,92,
        1,93,1,93,1,93,1,93,3,93,3069,8,93,1,94,1,94,3,94,3073,8,94,1,94,
        3,94,3076,8,94,1,94,3,94,3079,8,94,1,94,1,94,1,94,1,94,3,94,3085,
        8,94,1,94,3,94,3088,8,94,1,94,1,94,1,94,1,94,3,94,3094,8,94,1,94,
        1,94,1,94,1,94,1,94,5,94,3101,8,94,10,94,12,94,3104,9,94,3,94,3106,
        8,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,3115,8,94,10,94,12,
        94,3118,9,94,3,94,3120,8,94,1,95,1,95,1,95,3,95,3125,8,95,1,95,3,
        95,3128,8,95,1,95,1,95,1,95,3,95,3133,8,95,1,95,1,95,1,95,1,95,1,
        95,1,95,1,95,1,95,3,95,3143,8,95,1,95,1,95,1,95,3,95,3148,8,95,1,
        95,1,95,4,95,3152,8,95,11,95,12,95,3153,3,95,3156,8,95,1,95,1,95,
        4,95,3160,8,95,11,95,12,95,3161,3,95,3164,8,95,1,95,1,95,1,95,1,
        95,3,95,3170,8,95,1,95,1,95,1,95,1,95,5,95,3176,8,95,10,95,12,95,
        3179,9,95,1,95,1,95,3,95,3183,8,95,1,95,1,95,1,95,1,95,5,95,3189,
        8,95,10,95,12,95,3192,9,95,3,95,3194,8,95,1,96,1,96,1,96,3,96,3199,
        8,96,1,96,3,96,3202,8,96,1,96,1,96,1,96,3,96,3207,8,96,1,96,1,96,
        1,96,1,96,1,96,1,96,3,96,3215,8,96,1,96,1,96,1,96,1,96,1,96,1,96,
        3,96,3223,8,96,1,96,1,96,1,96,1,96,3,96,3229,8,96,1,96,1,96,1,96,
        1,96,5,96,3235,8,96,10,96,12,96,3238,9,96,1,96,1,96,3,96,3242,8,
        96,1,96,1,96,1,96,1,96,5,96,3248,8,96,10,96,12,96,3251,9,96,3,96,
        3253,8,96,1,97,1,97,3,97,3257,8,97,1,97,3,97,3260,8,97,1,97,1,97,
        1,97,1,97,1,97,1,97,3,97,3268,8,97,1,97,1,97,1,97,1,97,3,97,3274,
        8,97,1,97,1,97,1,97,1,97,1,97,5,97,3281,8,97,10,97,12,97,3284,9,
        97,3,97,3286,8,97,1,98,1,98,3,98,3290,8,98,1,98,1,98,3,98,3294,8,
        98,1,98,1,98,4,98,3298,8,98,11,98,12,98,3299,1,98,1,98,3,98,3304,
        8,98,1,98,1,98,3,98,3308,8,98,3,98,3310,8,98,1,98,3,98,3313,8,98,
        1,98,3,98,3316,8,98,1,98,3,98,3319,8,98,1,98,1,98,4,98,3323,8,98,
        11,98,12,98,3324,1,98,1,98,3,98,3329,8,98,1,98,3,98,3332,8,98,1,
        98,3,98,3335,8,98,1,98,3,98,3338,8,98,1,98,3,98,3341,8,98,1,98,1,
        98,1,98,4,98,3346,8,98,11,98,12,98,3347,3,98,3350,8,98,1,99,1,99,
        3,99,3354,8,99,1,100,1,100,1,100,1,100,3,100,3360,8,100,1,100,1,
        100,1,100,1,100,3,100,3366,8,100,1,100,5,100,3369,8,100,10,100,12,
        100,3372,9,100,3,100,3374,8,100,1,101,1,101,1,101,1,101,3,101,3380,
        8,101,1,102,1,102,3,102,3384,8,102,1,103,1,103,1,103,1,103,1,103,
        1,103,3,103,3392,8,103,1,104,1,104,3,104,3396,8,104,1,104,3,104,
        3399,8,104,1,104,3,104,3402,8,104,1,104,1,104,1,104,1,104,1,104,
        1,104,1,104,3,104,3411,8,104,1,104,1,104,3,104,3415,8,104,1,104,
        3,104,3418,8,104,1,104,1,104,3,104,3422,8,104,1,105,1,105,3,105,
        3426,8,105,1,105,3,105,3429,8,105,1,105,3,105,3432,8,105,1,105,1,
        105,1,105,3,105,3437,8,105,1,105,1,105,1,105,1,105,3,105,3443,8,
        105,5,105,3445,8,105,10,105,12,105,3448,9,105,1,105,1,105,1,105,
        1,105,1,105,1,105,1,105,3,105,3457,8,105,1,105,1,105,1,105,1,105,
        3,105,3463,8,105,5,105,3465,8,105,10,105,12,105,3468,9,105,1,105,
        1,105,1,105,3,105,3473,8,105,1,105,1,105,3,105,3477,8,105,1,106,
        1,106,1,106,1,106,3,106,3483,8,106,1,106,3,106,3486,8,106,1,107,
        1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,1,107,3,107,3498,
        8,107,1,107,1,107,3,107,3502,8,107,1,107,1,107,3,107,3506,8,107,
        1,108,1,108,1,108,1,108,1,108,1,108,3,108,3514,8,108,1,108,1,108,
        3,108,3518,8,108,1,109,1,109,1,109,1,109,1,110,1,110,3,110,3526,
        8,110,1,110,3,110,3529,8,110,1,110,1,110,3,110,3533,8,110,1,110,
        3,110,3536,8,110,1,110,1,110,1,110,1,110,5,110,3542,8,110,10,110,
        12,110,3545,9,110,1,110,1,110,3,110,3549,8,110,1,110,3,110,3552,
        8,110,1,110,3,110,3555,8,110,1,111,1,111,3,111,3559,8,111,1,111,
        3,111,3562,8,111,1,111,1,111,1,111,1,111,1,111,5,111,3569,8,111,
        10,111,12,111,3572,9,111,1,111,1,111,3,111,3576,8,111,1,112,1,112,
        1,112,1,112,1,112,5,112,3583,8,112,10,112,12,112,3586,9,112,1,113,
        1,113,3,113,3590,8,113,1,114,1,114,1,114,5,114,3595,8,114,10,114,
        12,114,3598,9,114,1,115,1,115,5,115,3602,8,115,10,115,12,115,3605,
        9,115,1,115,1,115,1,115,5,115,3610,8,115,10,115,12,115,3613,9,115,
        1,115,1,115,1,115,3,115,3618,8,115,1,116,1,116,1,116,1,116,1,116,
        1,116,3,116,3626,8,116,1,116,3,116,3629,8,116,1,116,3,116,3632,8,
        116,1,116,1,116,1,116,5,116,3637,8,116,10,116,12,116,3640,9,116,
        3,116,3642,8,116,1,116,1,116,1,116,1,116,1,116,3,116,3649,8,116,
        1,116,3,116,3652,8,116,1,116,1,116,1,116,1,116,1,116,1,116,3,116,
        3660,8,116,1,117,1,117,1,117,1,117,3,117,3666,8,117,1,117,1,117,
        1,117,1,117,1,118,1,118,1,118,1,118,1,118,3,118,3677,8,118,1,119,
        3,119,3680,8,119,1,119,1,119,3,119,3684,8,119,1,119,1,119,1,119,
        1,119,1,119,1,119,1,119,1,119,3,119,3694,8,119,1,119,1,119,1,119,
        1,119,3,119,3700,8,119,1,119,1,119,3,119,3704,8,119,1,119,1,119,
        3,119,3708,8,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,1,119,
        3,119,3718,8,119,1,119,1,119,1,119,3,119,3723,8,119,3,119,3725,8,
        119,1,119,1,119,3,119,3729,8,119,1,120,1,120,1,120,1,120,1,120,1,
        120,1,120,1,120,3,120,3739,8,120,1,121,1,121,1,121,1,121,1,121,1,
        121,1,121,1,121,3,121,3749,8,121,1,122,1,122,5,122,3753,8,122,10,
        122,12,122,3756,9,122,1,122,1,122,3,122,3760,8,122,1,122,3,122,3763,
        8,122,1,122,3,122,3766,8,122,1,122,3,122,3769,8,122,1,122,3,122,
        3772,8,122,1,122,3,122,3775,8,122,1,122,3,122,3778,8,122,1,122,1,
        122,5,122,3782,8,122,10,122,12,122,3785,9,122,1,122,1,122,3,122,
        3789,8,122,1,122,3,122,3792,8,122,1,122,3,122,3795,8,122,1,122,3,
        122,3798,8,122,1,122,3,122,3801,8,122,1,122,3,122,3804,8,122,1,122,
        3,122,3807,8,122,3,122,3809,8,122,1,123,1,123,5,123,3813,8,123,10,
        123,12,123,3816,9,123,1,123,1,123,3,123,3820,8,123,1,123,3,123,3823,
        8,123,1,123,3,123,3826,8,123,1,123,3,123,3829,8,123,1,123,3,123,
        3832,8,123,1,123,3,123,3835,8,123,1,124,1,124,3,124,3839,8,124,1,
        124,1,124,1,125,1,125,3,125,3845,8,125,1,125,1,125,3,125,3849,8,
        125,1,126,1,126,1,126,1,126,1,126,1,126,3,126,3857,8,126,1,126,1,
        126,3,126,3861,8,126,1,126,3,126,3864,8,126,3,126,3866,8,126,1,127,
        1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,1,127,3,127,
        3879,8,127,1,127,3,127,3882,8,127,1,128,1,128,1,128,5,128,3887,8,
        128,10,128,12,128,3890,9,128,1,129,1,129,1,129,1,129,1,129,1,129,
        1,129,3,129,3899,8,129,1,129,3,129,3902,8,129,1,129,1,129,1,129,
        3,129,3907,8,129,3,129,3909,8,129,1,129,1,129,3,129,3913,8,129,1,
        129,1,129,1,129,1,129,1,129,1,129,3,129,3921,8,129,1,130,1,130,1,
        130,1,130,3,130,3927,8,130,1,130,1,130,1,130,1,131,1,131,1,131,1,
        131,3,131,3936,8,131,1,131,1,131,1,131,1,132,1,132,1,132,1,132,1,
        132,1,132,1,132,1,132,3,132,3949,8,132,1,133,1,133,3,133,3953,8,
        133,1,133,1,133,5,133,3957,8,133,10,133,12,133,3960,9,133,1,134,
        1,134,1,134,1,134,1,134,1,134,3,134,3968,8,134,1,134,3,134,3971,
        8,134,1,134,1,134,3,134,3975,8,134,1,134,3,134,3978,8,134,1,134,
        1,134,3,134,3982,8,134,1,134,1,134,3,134,3986,8,134,1,134,3,134,
        3989,8,134,3,134,3991,8,134,1,135,1,135,1,135,1,135,5,135,3997,8,
        135,10,135,12,135,4000,9,135,1,135,1,135,1,135,1,135,1,135,1,135,
        1,135,1,135,1,135,3,135,4011,8,135,1,135,1,135,4,135,4015,8,135,
        11,135,12,135,4016,3,135,4019,8,135,1,135,1,135,4,135,4023,8,135,
        11,135,12,135,4024,3,135,4027,8,135,3,135,4029,8,135,1,136,1,136,
        1,136,1,136,3,136,4035,8,136,1,136,1,136,1,136,1,136,1,136,1,136,
        3,136,4043,8,136,1,137,1,137,1,137,1,137,1,137,1,137,3,137,4051,
        8,137,1,138,1,138,3,138,4055,8,138,1,138,1,138,3,138,4059,8,138,
        1,139,1,139,1,139,1,139,1,139,5,139,4066,8,139,10,139,12,139,4069,
        9,139,1,139,1,139,3,139,4073,8,139,1,140,1,140,1,140,1,141,1,141,
        1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,1,141,
        5,141,4091,8,141,10,141,12,141,4094,9,141,1,142,1,142,3,142,4098,
        8,142,1,143,1,143,1,143,1,143,3,143,4104,8,143,1,143,1,143,1,143,
        1,143,1,143,3,143,4111,8,143,1,144,1,144,1,144,3,144,4116,8,144,
        1,145,1,145,1,145,1,145,1,145,5,145,4123,8,145,10,145,12,145,4126,
        9,145,3,145,4128,8,145,1,146,1,146,3,146,4132,8,146,1,147,1,147,
        3,147,4136,8,147,1,147,1,147,3,147,4140,8,147,1,147,3,147,4143,8,
        147,1,147,3,147,4146,8,147,1,147,3,147,4149,8,147,1,148,1,148,3,
        148,4153,8,148,1,148,1,148,3,148,4157,8,148,1,148,3,148,4160,8,148,
        1,148,3,148,4163,8,148,1,148,3,148,4166,8,148,1,149,1,149,1,149,
        1,150,1,150,3,150,4173,8,150,1,150,1,150,3,150,4177,8,150,1,150,
        1,150,1,151,1,151,1,151,1,151,1,152,1,152,1,152,1,152,1,152,5,152,
        4190,8,152,10,152,12,152,4193,9,152,1,152,3,152,4196,8,152,1,153,
        1,153,1,153,1,154,1,154,1,154,1,154,1,154,1,155,1,155,3,155,4208,
        8,155,1,155,1,155,1,155,1,155,5,155,4214,8,155,10,155,12,155,4217,
        9,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,3,156,4226,8,156,
        1,157,1,157,3,157,4230,8,157,1,157,3,157,4233,8,157,1,157,1,157,
        1,158,1,158,3,158,4239,8,158,1,158,3,158,4242,8,158,1,158,3,158,
        4245,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,4254,
        8,159,1,160,1,160,1,160,1,160,1,160,1,160,1,160,3,160,4263,8,160,
        1,161,1,161,1,161,1,161,1,161,1,161,5,161,4271,8,161,10,161,12,161,
        4274,9,161,1,161,3,161,4277,8,161,1,162,1,162,1,162,1,162,1,162,
        1,162,5,162,4285,8,162,10,162,12,162,4288,9,162,1,163,1,163,1,163,
        1,163,1,163,1,163,1,163,3,163,4297,8,163,1,164,1,164,1,164,1,165,
        1,165,1,165,3,165,4305,8,165,1,165,3,165,4308,8,165,1,166,1,166,
        1,166,1,166,1,166,5,166,4315,8,166,10,166,12,166,4318,9,166,3,166,
        4320,8,166,1,166,1,166,3,166,4324,8,166,1,166,5,166,4327,8,166,10,
        166,12,166,4330,9,166,1,166,3,166,4333,8,166,1,167,1,167,1,167,1,
        167,1,167,5,167,4340,8,167,10,167,12,167,4343,9,167,3,167,4345,8,
        167,1,168,1,168,1,168,1,169,1,169,1,169,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,1,170,
        1,170,1,170,1,170,1,170,1,170,1,170,5,170,4374,8,170,10,170,12,170,
        4377,9,170,3,170,4379,8,170,1,170,3,170,4382,8,170,1,171,1,171,1,
        172,1,172,1,173,1,173,1,174,1,174,1,174,1,174,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,1,175,
        1,175,1,175,1,175,1,175,1,175,1,175,5,175,4436,8,175,10,175,12,175,
        4439,9,175,1,175,1,175,3,175,4443,8,175,1,176,1,176,1,176,1,176,
        1,176,1,176,1,177,1,177,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,1,178,
        3,178,4471,8,178,1,179,1,179,1,179,1,179,1,179,1,179,1,179,1,179,
        1,179,1,179,1,179,1,179,3,179,4485,8,179,1,180,1,180,1,180,5,180,
        4490,8,180,10,180,12,180,4493,9,180,1,180,3,180,4496,8,180,1,181,
        1,181,1,181,1,181,3,181,4502,8,181,1,182,1,182,1,182,1,182,1,182,
        1,182,3,182,4510,8,182,3,182,4512,8,182,1,183,1,183,1,183,1,183,
        1,184,1,184,1,184,1,184,1,184,3,184,4523,8,184,1,185,1,185,1,185,
        1,185,1,186,1,186,1,186,1,186,3,186,4533,8,186,1,187,1,187,1,187,
        1,187,1,187,3,187,4540,8,187,1,188,1,188,1,188,1,188,3,188,4546,
        8,188,1,189,1,189,1,189,1,189,1,190,1,190,3,190,4554,8,190,1,191,
        1,191,1,191,3,191,4559,8,191,1,191,1,191,1,191,1,191,5,191,4565,
        8,191,10,191,12,191,4568,9,191,1,191,1,191,1,191,5,191,4573,8,191,
        10,191,12,191,4576,9,191,1,191,1,191,1,191,5,191,4581,8,191,10,191,
        12,191,4584,9,191,1,191,1,191,1,191,5,191,4589,8,191,10,191,12,191,
        4592,9,191,1,191,5,191,4595,8,191,10,191,12,191,4598,9,191,3,191,
        4600,8,191,1,191,1,191,3,191,4604,8,191,1,192,1,192,1,192,3,192,
        4609,8,192,1,192,4,192,4612,8,192,11,192,12,192,4613,1,192,1,192,
        4,192,4618,8,192,11,192,12,192,4619,3,192,4622,8,192,1,192,1,192,
        1,192,1,193,1,193,1,193,1,193,4,193,4631,8,193,11,193,12,193,4632,
        1,193,5,193,4636,8,193,10,193,12,193,4639,9,193,1,193,1,193,4,193,
        4643,8,193,11,193,12,193,4644,3,193,4647,8,193,1,193,1,193,1,193,
        1,194,1,194,1,194,1,195,1,195,1,195,1,196,1,196,1,196,3,196,4661,
        8,196,1,196,1,196,4,196,4665,8,196,11,196,12,196,4666,1,196,1,196,
        1,196,3,196,4672,8,196,1,197,1,197,1,197,3,197,4677,8,197,1,197,
        1,197,4,197,4681,8,197,11,197,12,197,4682,1,197,1,197,1,197,1,197,
        1,197,3,197,4690,8,197,1,198,1,198,1,198,1,199,1,199,1,199,3,199,
        4698,8,199,1,199,1,199,1,199,1,199,4,199,4704,8,199,11,199,12,199,
        4705,1,199,1,199,1,199,3,199,4711,8,199,1,200,1,200,1,200,1,200,
        3,200,4717,8,200,1,200,3,200,4720,8,200,1,200,1,200,1,200,1,200,
        1,200,1,200,3,200,4728,8,200,1,201,1,201,1,201,1,201,1,201,3,201,
        4735,8,201,1,202,1,202,1,202,1,202,1,202,1,202,1,202,3,202,4744,
        8,202,1,202,3,202,4747,8,202,1,203,1,203,1,203,1,203,1,203,1,203,
        1,204,1,204,1,204,1,204,1,204,1,204,1,204,5,204,4762,8,204,10,204,
        12,204,4765,9,204,1,204,1,204,1,205,1,205,1,205,3,205,4772,8,205,
        1,205,1,205,1,205,1,205,1,205,1,205,3,205,4780,8,205,1,206,1,206,
        3,206,4784,8,206,1,206,1,206,1,207,1,207,1,207,3,207,4791,8,207,
        1,207,1,207,4,207,4795,8,207,11,207,12,207,4796,1,208,1,208,1,208,
        1,208,4,208,4803,8,208,11,208,12,208,4804,1,209,1,209,1,209,1,209,
        1,209,5,209,4812,8,209,10,209,12,209,4815,9,209,1,209,1,209,1,209,
        3,209,4820,8,209,1,209,1,209,1,209,5,209,4825,8,209,10,209,12,209,
        4828,9,209,1,209,1,209,1,209,1,209,3,209,4834,8,209,1,209,5,209,
        4837,8,209,10,209,12,209,4840,9,209,3,209,4842,8,209,3,209,4844,
        8,209,1,209,1,209,4,209,4848,8,209,11,209,12,209,4849,3,209,4852,
        8,209,1,209,1,209,5,209,4856,8,209,10,209,12,209,4859,9,209,1,209,
        1,209,1,209,1,209,3,209,4865,8,209,1,209,1,209,1,209,3,209,4870,
        8,209,1,209,1,209,3,209,4874,8,209,1,209,1,209,1,209,1,209,3,209,
        4880,8,209,1,210,1,210,1,210,1,210,1,210,5,210,4887,8,210,10,210,
        12,210,4890,9,210,1,210,1,210,1,210,3,210,4895,8,210,1,210,1,210,
        1,210,5,210,4900,8,210,10,210,12,210,4903,9,210,1,210,1,210,1,210,
        3,210,4908,8,210,1,210,1,210,1,210,1,210,3,210,4914,8,210,1,210,
        5,210,4917,8,210,10,210,12,210,4920,9,210,3,210,4922,8,210,3,210,
        4924,8,210,1,210,1,210,4,210,4928,8,210,11,210,12,210,4929,3,210,
        4932,8,210,1,210,1,210,5,210,4936,8,210,10,210,12,210,4939,9,210,
        1,210,1,210,1,210,1,210,3,210,4945,8,210,3,210,4947,8,210,1,211,
        1,211,1,211,3,211,4952,8,211,1,211,1,211,1,211,5,211,4957,8,211,
        10,211,12,211,4960,9,211,1,212,1,212,1,212,1,212,5,212,4966,8,212,
        10,212,12,212,4969,9,212,1,212,1,212,3,212,4973,8,212,1,212,1,212,
        1,212,1,212,1,212,5,212,4980,8,212,10,212,12,212,4983,9,212,1,212,
        1,212,1,212,1,212,3,212,4989,8,212,1,212,5,212,4992,8,212,10,212,
        12,212,4995,9,212,3,212,4997,8,212,3,212,4999,8,212,1,212,1,212,
        1,212,1,212,5,212,5005,8,212,10,212,12,212,5008,9,212,3,212,5010,
        8,212,1,212,1,212,1,212,1,212,1,212,1,212,3,212,5018,8,212,1,212,
        1,212,1,212,3,212,5023,8,212,1,212,1,212,1,212,3,212,5028,8,212,
        5,212,5030,8,212,10,212,12,212,5033,9,212,1,212,1,212,1,212,3,212,
        5038,8,212,1,212,1,212,1,212,3,212,5043,8,212,5,212,5045,8,212,10,
        212,12,212,5048,9,212,1,212,1,212,1,212,3,212,5053,8,212,3,212,5055,
        8,212,1,213,1,213,1,213,1,213,1,213,1,213,1,213,5,213,5064,8,213,
        10,213,12,213,5067,9,213,3,213,5069,8,213,1,213,1,213,1,213,5,213,
        5074,8,213,10,213,12,213,5077,9,213,3,213,5079,8,213,1,214,1,214,
        1,214,1,214,1,214,1,214,1,214,1,214,5,214,5089,8,214,10,214,12,214,
        5092,9,214,1,214,1,214,1,214,3,214,5097,8,214,1,215,1,215,1,215,
        1,215,1,215,5,215,5104,8,215,10,215,12,215,5107,9,215,1,216,1,216,
        1,216,1,216,5,216,5113,8,216,10,216,12,216,5116,9,216,1,216,1,216,
        3,216,5120,8,216,1,216,1,216,1,216,1,216,1,216,5,216,5127,8,216,
        10,216,12,216,5130,9,216,1,216,1,216,1,216,3,216,5135,8,216,1,216,
        1,216,1,216,1,216,1,216,1,216,1,216,5,216,5144,8,216,10,216,12,216,
        5147,9,216,1,216,1,216,1,216,3,216,5152,8,216,1,216,1,216,1,216,
        3,216,5157,8,216,5,216,5159,8,216,10,216,12,216,5162,9,216,1,216,
        1,216,1,216,3,216,5167,8,216,1,216,1,216,1,216,3,216,5172,8,216,
        5,216,5174,8,216,10,216,12,216,5177,9,216,3,216,5179,8,216,1,217,
        1,217,1,217,1,217,1,217,1,217,1,217,1,217,5,217,5189,8,217,10,217,
        12,217,5192,9,217,1,218,1,218,1,218,1,218,3,218,5198,8,218,1,218,
        1,218,1,218,3,218,5203,8,218,1,219,1,219,1,219,1,220,1,220,1,220,
        1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,
        5221,8,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,5229,8,220,
        1,221,1,221,1,221,3,221,5234,8,221,1,221,1,221,1,221,1,221,3,221,
        5240,8,221,1,222,1,222,1,222,1,222,1,222,1,222,1,222,1,222,3,222,
        5250,8,222,1,223,1,223,1,223,1,223,1,223,1,223,1,223,1,223,3,223,
        5260,8,223,1,224,1,224,1,224,1,224,1,224,1,224,1,224,1,224,3,224,
        5270,8,224,1,224,1,224,1,224,1,224,3,224,5276,8,224,1,224,1,224,
        1,224,1,224,1,224,1,224,1,224,3,224,5285,8,224,1,224,1,224,1,224,
        1,224,3,224,5291,8,224,1,224,1,224,1,224,1,224,1,224,3,224,5298,
        8,224,3,224,5300,8,224,1,225,1,225,1,225,1,226,1,226,1,226,1,226,
        1,226,3,226,5310,8,226,1,227,1,227,3,227,5314,8,227,1,227,1,227,
        3,227,5318,8,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        3,227,5328,8,227,1,227,1,227,1,227,3,227,5333,8,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,
        1,227,1,227,1,227,1,227,1,227,1,227,1,227,1,227,3,227,5400,8,227,
        1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,1,228,
        1,228,1,228,1,228,1,228,1,228,3,228,5418,8,228,1,229,1,229,1,229,
        1,229,1,230,1,230,3,230,5426,8,230,1,230,1,230,1,230,1,230,1,230,
        1,230,1,230,1,230,5,230,5436,8,230,10,230,12,230,5439,9,230,1,230,
        1,230,1,230,1,230,3,230,5445,8,230,3,230,5447,8,230,1,230,1,230,
        1,230,1,230,1,230,1,230,5,230,5455,8,230,10,230,12,230,5458,9,230,
        3,230,5460,8,230,1,231,1,231,1,231,1,231,5,231,5466,8,231,10,231,
        12,231,5469,9,231,1,232,1,232,1,232,1,232,3,232,5475,8,232,1,233,
        1,233,3,233,5479,8,233,1,233,1,233,1,233,1,234,1,234,3,234,5486,
        8,234,1,234,1,234,1,234,3,234,5491,8,234,1,234,3,234,5494,8,234,
        1,234,3,234,5497,8,234,1,235,1,235,1,235,1,235,1,235,1,235,1,235,
        3,235,5506,8,235,1,236,1,236,3,236,5510,8,236,1,236,1,236,3,236,
        5514,8,236,1,236,1,236,1,236,1,236,1,236,1,236,1,237,1,237,1,237,
        1,237,1,237,1,237,1,238,1,238,1,238,1,238,1,239,1,239,1,239,1,239,
        1,239,3,239,5537,8,239,1,239,1,239,1,239,1,239,1,239,3,239,5544,
        8,239,5,239,5546,8,239,10,239,12,239,5549,9,239,1,239,1,239,1,239,
        1,239,3,239,5555,8,239,1,239,1,239,1,239,1,239,1,239,3,239,5562,
        8,239,1,239,3,239,5565,8,239,1,239,1,239,1,239,1,239,1,239,1,239,
        1,239,1,239,1,239,1,239,1,239,1,239,5,239,5579,8,239,10,239,12,239,
        5582,9,239,3,239,5584,8,239,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,3,240,5594,8,240,1,240,1,240,3,240,5598,8,240,1,240,
        1,240,1,240,1,240,3,240,5604,8,240,1,240,3,240,5607,8,240,1,240,
        1,240,1,240,3,240,5612,8,240,1,240,1,240,3,240,5616,8,240,1,240,
        1,240,1,240,1,240,1,240,3,240,5623,8,240,1,240,3,240,5626,8,240,
        1,240,1,240,1,240,1,240,3,240,5632,8,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,1,240,3,240,5656,8,240,1,240,
        3,240,5659,8,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,3,240,5671,8,240,1,240,3,240,5674,8,240,1,240,1,240,
        1,240,1,240,1,240,1,240,1,240,1,240,3,240,5684,8,240,1,240,1,240,
        1,240,1,240,1,240,1,240,3,240,5692,8,240,1,240,1,240,3,240,5696,
        8,240,1,240,1,240,1,240,1,240,1,240,3,240,5703,8,240,1,240,3,240,
        5706,8,240,1,240,1,240,1,240,1,240,1,240,5,240,5713,8,240,10,240,
        12,240,5716,9,240,1,240,1,240,1,240,3,240,5721,8,240,1,240,1,240,
        1,240,1,240,3,240,5727,8,240,1,240,1,240,1,240,1,240,1,240,1,240,
        1,240,1,240,3,240,5737,8,240,3,240,5739,8,240,1,241,1,241,1,241,
        1,241,3,241,5745,8,241,1,241,3,241,5748,8,241,1,241,3,241,5751,8,
        241,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,1,242,
        3,242,5763,8,242,1,242,3,242,5766,8,242,1,243,1,243,1,243,1,243,
        3,243,5772,8,243,1,244,3,244,5775,8,244,1,244,1,244,1,244,1,244,
        1,244,1,244,3,244,5783,8,244,1,244,1,244,1,244,1,244,1,244,1,244,
        3,244,5791,8,244,1,245,1,245,1,245,1,245,3,245,5797,8,245,1,245,
        1,245,3,245,5801,8,245,1,246,1,246,1,246,1,246,1,246,1,246,1,246,
        1,246,1,246,1,246,1,246,1,246,3,246,5815,8,246,1,247,1,247,1,247,
        1,248,1,248,1,248,1,248,1,248,5,248,5825,8,248,10,248,12,248,5828,
        9,248,1,248,1,248,1,248,1,248,3,248,5834,8,248,1,248,3,248,5837,
        8,248,1,248,1,248,1,248,1,249,1,249,3,249,5844,8,249,1,249,1,249,
        1,249,5,249,5849,8,249,10,249,12,249,5852,9,249,1,250,1,250,3,250,
        5856,8,250,1,250,1,250,1,251,1,251,1,251,1,251,1,251,1,251,1,251,
        5,251,5867,8,251,10,251,12,251,5870,9,251,1,252,1,252,1,252,1,252,
        1,253,1,253,1,254,1,254,3,254,5880,8,254,1,254,1,254,1,254,1,254,
        3,254,5886,8,254,1,255,1,255,1,255,3,255,5891,8,255,1,255,1,255,
        1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,1,255,3,255,5904,
        8,255,3,255,5906,8,255,1,255,1,255,1,255,3,255,5911,8,255,1,255,
        1,255,3,255,5915,8,255,1,255,3,255,5918,8,255,3,255,5920,8,255,1,
        256,1,256,1,256,1,256,1,256,3,256,5927,8,256,1,257,1,257,1,257,1,
        257,1,257,3,257,5934,8,257,1,257,3,257,5937,8,257,1,257,3,257,5940,
        8,257,1,257,1,257,1,257,1,257,3,257,5946,8,257,1,257,1,257,3,257,
        5950,8,257,1,258,1,258,1,258,1,258,3,258,5956,8,258,1,259,1,259,
        1,259,1,259,3,259,5962,8,259,1,259,1,259,1,260,1,260,1,260,1,261,
        1,261,1,261,1,262,1,262,1,262,3,262,5975,8,262,1,262,1,262,1,262,
        3,262,5980,8,262,1,262,1,262,1,262,1,262,5,262,5986,8,262,10,262,
        12,262,5989,9,262,3,262,5991,8,262,1,263,1,263,1,263,3,263,5996,
        8,263,1,263,1,263,1,263,3,263,6001,8,263,1,263,1,263,1,263,1,263,
        5,263,6007,8,263,10,263,12,263,6010,9,263,3,263,6012,8,263,1,264,
        1,264,1,264,1,264,1,264,1,264,3,264,6020,8,264,1,265,1,265,3,265,
        6024,8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,
        5,265,6035,8,265,10,265,12,265,6038,9,265,1,265,1,265,1,265,3,265,
        6043,8,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,1,265,5,265,
        6053,8,265,10,265,12,265,6056,9,265,3,265,6058,8,265,1,266,1,266,
        1,267,1,267,1,267,1,267,1,267,3,267,6067,8,267,1,267,1,267,1,267,
        3,267,6072,8,267,1,268,1,268,1,268,1,268,3,268,6078,8,268,1,269,
        1,269,1,270,1,270,3,270,6084,8,270,1,271,1,271,1,271,3,271,6089,
        8,271,3,271,6091,8,271,1,271,3,271,6094,8,271,1,271,1,271,3,271,
        6098,8,271,3,271,6100,8,271,1,272,1,272,3,272,6104,8,272,1,272,1,
        272,1,272,1,272,3,272,6110,8,272,1,272,3,272,6113,8,272,1,272,3,
        272,6116,8,272,1,273,1,273,1,273,1,273,1,273,3,273,6123,8,273,1,
        274,1,274,1,275,1,275,1,275,1,275,3,275,6131,8,275,1,276,1,276,3,
        276,6135,8,276,1,277,1,277,1,278,1,278,1,278,1,278,1,278,1,278,1,
        278,1,278,1,278,1,278,1,278,1,278,1,278,1,278,4,278,6153,8,278,11,
        278,12,278,6154,1,279,1,279,1,279,1,279,1,279,3,279,6162,8,279,3,
        279,6164,8,279,1,280,1,280,1,280,4,280,6169,8,280,11,280,12,280,
        6170,3,280,6173,8,280,1,281,1,281,3,281,6177,8,281,1,282,1,282,1,
        282,3,282,6182,8,282,1,283,1,283,1,283,1,283,1,283,1,283,1,283,1,
        283,1,283,3,283,6193,8,283,1,284,1,284,1,284,3,284,6198,8,284,1,
        285,1,285,1,286,1,286,3,286,6204,8,286,1,287,3,287,6207,8,287,1,
        287,1,287,3,287,6211,8,287,1,287,4,287,6214,8,287,11,287,12,287,
        6215,1,287,3,287,6219,8,287,1,287,1,287,3,287,6223,8,287,1,287,1,
        287,3,287,6227,8,287,3,287,6229,8,287,1,288,1,288,1,289,3,289,6234,
        8,289,1,289,1,289,1,290,3,290,6239,8,290,1,290,1,290,1,291,1,291,
        1,291,1,291,1,291,1,291,1,291,1,291,1,291,3,291,6252,8,291,1,291,
        3,291,6255,8,291,1,292,1,292,3,292,6259,8,292,1,292,3,292,6262,8,
        292,1,292,3,292,6265,8,292,1,292,1,292,1,292,3,292,6270,8,292,1,
        292,1,292,1,292,3,292,6275,8,292,1,292,1,292,1,292,3,292,6280,8,
        292,1,292,3,292,6283,8,292,1,292,1,292,1,292,3,292,6288,8,292,1,
        292,3,292,6291,8,292,1,292,1,292,1,292,1,292,3,292,6297,8,292,1,
        292,3,292,6300,8,292,1,292,1,292,3,292,6304,8,292,1,292,5,292,6307,
        8,292,10,292,12,292,6310,9,292,1,292,1,292,3,292,6314,8,292,1,292,
        5,292,6317,8,292,10,292,12,292,6320,9,292,1,292,1,292,3,292,6324,
        8,292,1,292,3,292,6327,8,292,1,292,5,292,6330,8,292,10,292,12,292,
        6333,9,292,1,292,1,292,3,292,6337,8,292,1,292,5,292,6340,8,292,10,
        292,12,292,6343,9,292,1,292,1,292,1,292,3,292,6348,8,292,1,292,1,
        292,1,292,3,292,6353,8,292,1,292,1,292,1,292,3,292,6358,8,292,1,
        292,1,292,1,292,3,292,6363,8,292,1,292,3,292,6366,8,292,1,292,1,
        292,1,292,3,292,6371,8,292,1,292,1,292,3,292,6375,8,292,1,292,1,
        292,3,292,6379,8,292,1,293,1,293,1,293,1,293,5,293,6385,8,293,10,
        293,12,293,6388,9,293,1,293,1,293,1,294,1,294,3,294,6394,8,294,1,
        294,1,294,3,294,6398,8,294,1,294,1,294,1,294,3,294,6403,8,294,1,
        294,1,294,1,294,3,294,6408,8,294,1,294,1,294,3,294,6412,8,294,3,
        294,6414,8,294,1,294,3,294,6417,8,294,1,295,1,295,1,295,1,295,1,
        296,1,296,1,296,1,296,1,296,1,296,1,297,1,297,1,297,1,297,3,297,
        6433,8,297,1,297,1,297,1,298,1,298,1,298,5,298,6440,8,298,10,298,
        12,298,6443,9,298,1,299,1,299,1,299,5,299,6448,8,299,10,299,12,299,
        6451,9,299,1,300,1,300,1,300,5,300,6456,8,300,10,300,12,300,6459,
        9,300,1,301,1,301,1,301,1,301,5,301,6465,8,301,10,301,12,301,6468,
        9,301,1,301,1,301,1,302,1,302,1,302,5,302,6475,8,302,10,302,12,302,
        6478,9,302,1,303,1,303,1,303,5,303,6483,8,303,10,303,12,303,6486,
        9,303,1,304,1,304,1,304,5,304,6491,8,304,10,304,12,304,6494,9,304,
        1,305,1,305,1,305,5,305,6499,8,305,10,305,12,305,6502,9,305,1,306,
        1,306,1,306,5,306,6507,8,306,10,306,12,306,6510,9,306,1,307,1,307,
        1,307,1,307,1,307,1,307,1,307,1,307,1,307,3,307,6521,8,307,1,307,
        1,307,1,307,1,307,1,307,3,307,6528,8,307,1,307,1,307,1,307,1,307,
        1,307,1,307,1,307,1,307,3,307,6538,8,307,1,308,1,308,1,308,3,308,
        6543,8,308,1,308,3,308,6546,8,308,1,308,1,308,1,308,3,308,6551,8,
        308,1,308,3,308,6554,8,308,1,309,1,309,3,309,6558,8,309,1,310,1,
        310,1,310,1,311,1,311,1,311,1,311,1,312,1,312,1,312,1,313,1,313,
        1,313,3,313,6573,8,313,1,314,1,314,1,314,1,314,1,314,1,314,3,314,
        6581,8,314,1,314,1,314,1,314,1,314,1,314,3,314,6588,8,314,1,314,
        1,314,1,314,3,314,6593,8,314,1,315,1,315,1,315,3,315,6598,8,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,4,315,6629,8,315,11,315,
        12,315,6630,1,315,1,315,3,315,6635,8,315,1,315,1,315,1,315,1,315,
        4,315,6641,8,315,11,315,12,315,6642,1,315,1,315,3,315,6647,8,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6656,8,315,1,315,
        1,315,1,315,1,315,1,315,1,315,3,315,6664,8,315,1,315,1,315,1,315,
        3,315,6669,8,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6677,
        8,315,1,315,1,315,1,315,3,315,6682,8,315,1,315,1,315,1,315,3,315,
        6687,8,315,3,315,6689,8,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,3,315,6698,8,315,1,315,1,315,1,315,3,315,6703,8,315,1,315,
        1,315,1,315,1,315,1,315,1,315,3,315,6711,8,315,1,315,1,315,1,315,
        3,315,6716,8,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6724,
        8,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6732,8,315,1,315,
        3,315,6735,8,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        3,315,6745,8,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,
        1,315,1,315,1,315,1,315,1,315,1,315,1,315,1,315,3,315,6763,8,315,
        1,315,3,315,6766,8,315,1,315,3,315,6769,8,315,1,315,1,315,3,315,
        6773,8,315,1,316,1,316,1,316,1,316,1,316,1,317,1,317,1,317,1,317,
        5,317,6784,8,317,10,317,12,317,6787,9,317,1,317,1,317,1,317,1,317,
        1,317,3,317,6794,8,317,1,318,1,318,3,318,6798,8,318,1,319,1,319,
        1,319,3,319,6803,8,319,1,319,1,319,1,319,3,319,6808,8,319,1,319,
        1,319,1,319,1,319,3,319,6814,8,319,1,319,1,319,1,319,3,319,6819,
        8,319,1,319,1,319,3,319,6823,8,319,1,319,1,319,1,319,3,319,6828,
        8,319,1,319,1,319,1,319,3,319,6833,8,319,1,319,1,319,1,319,3,319,
        6838,8,319,1,319,1,319,1,319,1,319,1,319,1,319,5,319,6846,8,319,
        10,319,12,319,6849,9,319,3,319,6851,8,319,1,319,1,319,3,319,6855,
        8,319,1,319,1,319,3,319,6859,8,319,1,320,1,320,1,320,1,320,1,320,
        3,320,6866,8,320,1,320,1,320,3,320,6870,8,320,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
        1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,1,320,
        1,320,1,320,3,320,6899,8,320,1,321,1,321,1,321,3,321,6904,8,321,
        1,321,1,321,3,321,6908,8,321,1,322,3,322,6911,8,322,1,322,3,322,
        6914,8,322,1,322,3,322,6917,8,322,1,322,3,322,6920,8,322,1,323,1,
        323,1,324,1,324,1,324,1,325,1,325,1,326,1,326,3,326,6931,8,326,1,
        327,1,327,1,327,1,327,1,327,1,328,1,328,1,328,1,328,1,328,1,328,
        1,328,3,328,6945,8,328,1,329,1,329,1,329,1,329,1,329,5,329,6952,
        8,329,10,329,12,329,6955,9,329,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,1,330,
        1,330,1,330,1,330,1,330,1,330,1,330,3,330,6980,8,330,1,331,1,331,
        1,331,1,331,1,331,1,332,1,332,1,332,1,332,3,332,6991,8,332,1,332,
        1,332,1,332,1,332,1,332,3,332,6998,8,332,5,332,7000,8,332,10,332,
        12,332,7003,9,332,1,333,1,333,1,333,1,333,3,333,7009,8,333,1,334,
        1,334,1,334,1,334,1,334,1,334,3,334,7017,8,334,1,334,1,334,1,334,
        3,334,7022,8,334,1,334,1,334,1,334,1,334,5,334,7028,8,334,10,334,
        12,334,7031,9,334,1,335,1,335,1,335,3,335,7036,8,335,1,335,1,335,
        1,335,1,335,1,335,1,335,1,335,1,335,3,335,7046,8,335,1,335,1,335,
        1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,3,335,7059,
        8,335,1,335,1,335,1,335,1,335,3,335,7065,8,335,1,335,1,335,1,335,
        1,335,3,335,7071,8,335,1,335,1,335,1,335,1,335,1,335,1,335,1,335,
        1,335,1,335,1,335,1,335,1,335,1,335,1,335,3,335,7087,8,335,1,335,
        1,335,1,335,1,335,3,335,7093,8,335,1,335,1,335,1,335,1,335,1,335,
        1,335,1,335,5,335,7102,8,335,10,335,12,335,7105,9,335,1,336,1,336,
        1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
        1,336,5,336,7121,8,336,10,336,12,336,7124,9,336,1,336,1,336,1,336,
        1,336,1,336,1,336,1,336,4,336,7133,8,336,11,336,12,336,7134,1,336,
        1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,
        1,336,1,336,1,336,3,336,7152,8,336,1,336,1,336,1,336,1,336,1,336,
        1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,1,336,5,336,
        7169,8,336,10,336,12,336,7172,9,336,1,337,1,337,1,338,1,338,1,338,
        1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,
        3,338,7190,8,338,1,339,1,339,1,339,1,339,1,339,1,339,1,339,3,339,
        7199,8,339,1,340,1,340,1,340,1,340,1,340,1,340,1,340,3,340,7208,
        8,340,1,341,1,341,1,342,1,342,1,342,1,342,1,342,3,342,7217,8,342,
        1,343,1,343,1,344,1,344,1,345,1,345,1,346,1,346,1,347,1,347,1,348,
        1,348,1,349,1,349,1,349,0,3,668,670,672,350,0,2,4,6,8,10,12,14,16,
        18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,
        62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,
        104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
        136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,
        168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,
        200,202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,
        232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,
        264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,
        296,298,300,302,304,306,308,310,312,314,316,318,320,322,324,326,
        328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,
        360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,
        392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
        424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,
        456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,
        488,490,492,494,496,498,500,502,504,506,508,510,512,514,516,518,
        520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,
        552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,
        584,586,588,590,592,594,596,598,600,602,604,606,608,610,612,614,
        616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,
        648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,
        680,682,684,686,688,690,692,694,696,698,0,140,2,0,39,39,149,149,
        2,0,529,529,535,535,3,0,68,68,157,157,179,179,3,0,42,42,382,382,
        452,452,4,0,42,42,417,417,527,527,609,609,2,0,512,512,1141,1141,
        2,0,77,77,140,140,2,0,15,15,332,332,3,0,44,44,84,84,182,182,2,0,
        432,432,556,556,3,0,504,504,648,648,656,656,2,0,390,390,458,458,
        2,0,350,350,472,472,2,0,42,42,1131,1132,2,0,348,348,441,441,2,0,
        457,457,671,671,3,0,79,79,83,83,124,124,3,0,42,42,400,400,429,429,
        3,0,42,42,396,396,787,787,2,0,635,635,670,670,2,0,80,80,90,90,3,
        0,434,434,546,546,611,611,2,0,68,68,157,157,1,0,354,355,1,0,1131,
        1132,2,0,1141,1141,1149,1149,2,0,80,80,386,386,2,0,543,543,1141,
        1141,2,0,544,544,1141,1141,3,0,428,428,467,467,519,519,7,0,42,42,
        368,368,370,370,400,400,429,429,571,571,1149,1149,2,0,512,512,528,
        528,1,0,1132,1133,2,0,5,5,51,51,4,0,42,42,382,382,452,452,456,456,
        2,0,26,26,30,30,2,0,12,12,173,173,2,0,190,190,675,675,2,0,21,21,
        143,143,3,0,43,43,74,74,105,105,2,0,105,105,372,372,2,0,363,363,
        425,425,2,0,100,100,599,599,2,0,43,43,105,105,2,0,6,6,49,49,2,0,
        186,186,667,667,4,0,428,428,467,467,518,518,560,560,2,0,428,428,
        518,518,2,0,13,13,45,45,3,0,65,65,77,77,184,184,2,0,34,34,82,82,
        2,0,96,96,147,147,2,0,6,6,49,50,1,0,624,625,2,0,170,170,737,737,
        2,0,437,437,607,607,2,0,224,224,475,475,5,0,106,106,480,481,483,
        483,487,495,573,573,4,0,477,478,482,482,484,485,574,574,3,0,107,
        107,476,476,486,486,2,0,460,460,626,626,2,0,620,620,622,622,2,0,
        342,342,627,627,2,0,89,89,589,589,2,0,51,51,388,388,3,0,31,31,60,
        60,177,177,3,0,130,130,170,170,435,435,3,0,12,12,19,19,185,185,2,
        0,42,42,120,120,2,0,102,102,180,180,2,0,358,358,612,612,2,0,40,40,
        669,669,2,0,114,114,472,472,2,0,420,420,566,566,4,0,204,204,206,
        206,212,212,636,636,2,0,1101,1101,1117,1117,2,0,343,343,575,575,
        2,0,67,67,79,79,6,0,130,130,170,170,175,175,413,413,435,435,669,
        669,2,0,511,511,632,632,2,0,410,410,673,673,2,0,130,130,435,435,
        3,0,80,80,91,91,450,450,3,0,437,437,472,472,607,607,2,0,632,632,
        668,668,2,0,374,374,565,565,6,0,224,224,407,407,409,409,436,436,
        572,572,613,613,2,0,45,46,61,61,3,0,420,420,548,548,880,880,2,0,
        464,464,650,650,10,0,357,357,365,365,376,378,385,385,505,505,513,
        513,637,637,644,644,831,831,999,999,2,0,35,35,166,166,2,0,116,116,
        990,990,11,0,357,357,365,365,376,378,385,385,505,505,513,513,590,
        590,637,637,644,644,831,831,999,999,1,0,1153,1154,4,0,373,373,782,
        793,1141,1141,1149,1150,3,0,1131,1133,1142,1142,1144,1144,2,0,62,
        62,176,176,2,0,115,115,1145,1145,5,0,25,25,220,222,229,229,231,234,
        516,516,2,0,25,25,221,221,2,0,25,25,220,220,1,0,194,205,3,0,181,
        181,193,193,610,610,2,0,209,214,429,429,6,0,215,215,226,226,228,
        228,230,230,237,237,346,347,4,0,216,219,224,225,227,227,344,344,
        2,0,152,152,235,235,2,0,464,464,798,806,2,0,224,224,516,516,5,0,
        198,198,204,204,215,216,218,218,464,464,2,0,181,181,610,610,2,0,
        313,314,320,320,4,0,37,37,149,149,311,314,329,329,1,0,323,324,3,
        0,17,17,94,94,174,174,2,0,220,220,224,224,2,0,215,216,218,218,3,
        0,13,13,45,45,988,988,3,0,284,284,296,297,307,307,3,0,285,287,303,
        306,308,310,2,0,293,293,295,295,2,0,291,291,294,294,2,0,289,290,
        300,302,2,0,132,132,599,599,2,0,431,431,557,557,2,0,533,533,549,
        549,2,0,113,113,1120,1120,3,0,62,62,176,176,660,660,2,0,136,136,
        148,148,3,0,6,6,335,335,616,616,3,0,113,113,1113,1114,1120,1121,
        1,0,1110,1116,2,0,224,224,741,781,1,0,794,797,5,0,704,705,720,722,
        728,728,734,735,737,737,1,0,687,694,3,0,215,219,232,232,235,235,
        55,0,14,14,18,18,29,29,35,35,37,37,42,42,48,48,55,55,58,58,72,72,
        78,78,93,93,116,116,120,120,123,123,129,129,166,166,237,237,281,
        288,292,292,296,297,303,310,330,383,385,401,403,403,405,430,432,
        448,450,456,458,519,521,521,525,542,545,556,558,587,589,590,592,
        604,606,634,636,670,672,673,675,680,682,686,695,695,697,703,706,
        707,712,713,715,719,723,727,729,729,731,733,736,736,738,740,787,
        787,831,831,870,870,994,994,999,999,22,0,39,39,96,96,147,147,149,
        149,215,217,219,219,249,280,288,291,293,295,298,302,322,322,457,
        457,671,671,687,694,731,731,798,798,801,830,832,869,871,993,995,
        998,1000,1100,1116,1116,8510,0,701,1,0,0,0,2,720,1,0,0,0,4,741,1,
        0,0,0,6,743,1,0,0,0,8,783,1,0,0,0,10,795,1,0,0,0,12,806,1,0,0,0,
        14,823,1,0,0,0,16,828,1,0,0,0,18,840,1,0,0,0,20,867,1,0,0,0,22,876,
        1,0,0,0,24,878,1,0,0,0,26,890,1,0,0,0,28,920,1,0,0,0,30,956,1,0,
        0,0,32,1007,1,0,0,0,34,1033,1,0,0,0,36,1069,1,0,0,0,38,1082,1,0,
        0,0,40,1179,1,0,0,0,42,1181,1,0,0,0,44,1199,1,0,0,0,46,1260,1,0,
        0,0,48,1279,1,0,0,0,50,1285,1,0,0,0,52,1307,1,0,0,0,54,1309,1,0,
        0,0,56,1311,1,0,0,0,58,1391,1,0,0,0,60,1398,1,0,0,0,62,1400,1,0,
        0,0,64,1444,1,0,0,0,66,1450,1,0,0,0,68,1452,1,0,0,0,70,1473,1,0,
        0,0,72,1480,1,0,0,0,74,1482,1,0,0,0,76,1507,1,0,0,0,78,1510,1,0,
        0,0,80,1515,1,0,0,0,82,1541,1,0,0,0,84,1557,1,0,0,0,86,1559,1,0,
        0,0,88,1575,1,0,0,0,90,1577,1,0,0,0,92,1637,1,0,0,0,94,1708,1,0,
        0,0,96,1710,1,0,0,0,98,1738,1,0,0,0,100,1746,1,0,0,0,102,1776,1,
        0,0,0,104,1963,1,0,0,0,106,1965,1,0,0,0,108,1967,1,0,0,0,110,1970,
        1,0,0,0,112,2044,1,0,0,0,114,2067,1,0,0,0,116,2215,1,0,0,0,118,2220,
        1,0,0,0,120,2222,1,0,0,0,122,2232,1,0,0,0,124,2288,1,0,0,0,126,2308,
        1,0,0,0,128,2310,1,0,0,0,130,2345,1,0,0,0,132,2354,1,0,0,0,134,2361,
        1,0,0,0,136,2384,1,0,0,0,138,2393,1,0,0,0,140,2408,1,0,0,0,142,2433,
        1,0,0,0,144,2453,1,0,0,0,146,2866,1,0,0,0,148,2868,1,0,0,0,150,2875,
        1,0,0,0,152,2882,1,0,0,0,154,2905,1,0,0,0,156,2913,1,0,0,0,158,2920,
        1,0,0,0,160,2927,1,0,0,0,162,2934,1,0,0,0,164,2946,1,0,0,0,166,2956,
        1,0,0,0,168,2963,1,0,0,0,170,2979,1,0,0,0,172,3025,1,0,0,0,174,3027,
        1,0,0,0,176,3037,1,0,0,0,178,3041,1,0,0,0,180,3047,1,0,0,0,182,3059,
        1,0,0,0,184,3061,1,0,0,0,186,3068,1,0,0,0,188,3070,1,0,0,0,190,3121,
        1,0,0,0,192,3195,1,0,0,0,194,3254,1,0,0,0,196,3349,1,0,0,0,198,3353,
        1,0,0,0,200,3373,1,0,0,0,202,3375,1,0,0,0,204,3383,1,0,0,0,206,3391,
        1,0,0,0,208,3393,1,0,0,0,210,3423,1,0,0,0,212,3478,1,0,0,0,214,3487,
        1,0,0,0,216,3507,1,0,0,0,218,3519,1,0,0,0,220,3523,1,0,0,0,222,3556,
        1,0,0,0,224,3577,1,0,0,0,226,3587,1,0,0,0,228,3591,1,0,0,0,230,3617,
        1,0,0,0,232,3659,1,0,0,0,234,3661,1,0,0,0,236,3676,1,0,0,0,238,3728,
        1,0,0,0,240,3738,1,0,0,0,242,3748,1,0,0,0,244,3808,1,0,0,0,246,3810,
        1,0,0,0,248,3836,1,0,0,0,250,3842,1,0,0,0,252,3850,1,0,0,0,254,3867,
        1,0,0,0,256,3883,1,0,0,0,258,3920,1,0,0,0,260,3926,1,0,0,0,262,3935,
        1,0,0,0,264,3948,1,0,0,0,266,3952,1,0,0,0,268,3990,1,0,0,0,270,4028,
        1,0,0,0,272,4042,1,0,0,0,274,4050,1,0,0,0,276,4054,1,0,0,0,278,4060,
        1,0,0,0,280,4074,1,0,0,0,282,4077,1,0,0,0,284,4095,1,0,0,0,286,4099,
        1,0,0,0,288,4115,1,0,0,0,290,4117,1,0,0,0,292,4129,1,0,0,0,294,4133,
        1,0,0,0,296,4150,1,0,0,0,298,4167,1,0,0,0,300,4170,1,0,0,0,302,4180,
        1,0,0,0,304,4184,1,0,0,0,306,4197,1,0,0,0,308,4200,1,0,0,0,310,4205,
        1,0,0,0,312,4225,1,0,0,0,314,4227,1,0,0,0,316,4244,1,0,0,0,318,4253,
        1,0,0,0,320,4262,1,0,0,0,322,4264,1,0,0,0,324,4278,1,0,0,0,326,4289,
        1,0,0,0,328,4298,1,0,0,0,330,4301,1,0,0,0,332,4309,1,0,0,0,334,4334,
        1,0,0,0,336,4346,1,0,0,0,338,4349,1,0,0,0,340,4381,1,0,0,0,342,4383,
        1,0,0,0,344,4385,1,0,0,0,346,4387,1,0,0,0,348,4389,1,0,0,0,350,4442,
        1,0,0,0,352,4444,1,0,0,0,354,4450,1,0,0,0,356,4470,1,0,0,0,358,4484,
        1,0,0,0,360,4495,1,0,0,0,362,4497,1,0,0,0,364,4503,1,0,0,0,366,4513,
        1,0,0,0,368,4517,1,0,0,0,370,4524,1,0,0,0,372,4528,1,0,0,0,374,4534,
        1,0,0,0,376,4541,1,0,0,0,378,4547,1,0,0,0,380,4553,1,0,0,0,382,4558,
        1,0,0,0,384,4605,1,0,0,0,386,4626,1,0,0,0,388,4651,1,0,0,0,390,4654,
        1,0,0,0,392,4660,1,0,0,0,394,4676,1,0,0,0,396,4691,1,0,0,0,398,4697,
        1,0,0,0,400,4727,1,0,0,0,402,4729,1,0,0,0,404,4736,1,0,0,0,406,4748,
        1,0,0,0,408,4754,1,0,0,0,410,4779,1,0,0,0,412,4783,1,0,0,0,414,4787,
        1,0,0,0,416,4798,1,0,0,0,418,4879,1,0,0,0,420,4946,1,0,0,0,422,4948,
        1,0,0,0,424,5054,1,0,0,0,426,5078,1,0,0,0,428,5080,1,0,0,0,430,5098,
        1,0,0,0,432,5178,1,0,0,0,434,5180,1,0,0,0,436,5193,1,0,0,0,438,5204,
        1,0,0,0,440,5228,1,0,0,0,442,5239,1,0,0,0,444,5249,1,0,0,0,446,5259,
        1,0,0,0,448,5299,1,0,0,0,450,5301,1,0,0,0,452,5304,1,0,0,0,454,5399,
        1,0,0,0,456,5417,1,0,0,0,458,5419,1,0,0,0,460,5423,1,0,0,0,462,5461,
        1,0,0,0,464,5470,1,0,0,0,466,5476,1,0,0,0,468,5483,1,0,0,0,470,5505,
        1,0,0,0,472,5507,1,0,0,0,474,5521,1,0,0,0,476,5527,1,0,0,0,478,5583,
        1,0,0,0,480,5738,1,0,0,0,482,5750,1,0,0,0,484,5765,1,0,0,0,486,5771,
        1,0,0,0,488,5790,1,0,0,0,490,5800,1,0,0,0,492,5814,1,0,0,0,494,5816,
        1,0,0,0,496,5819,1,0,0,0,498,5841,1,0,0,0,500,5853,1,0,0,0,502,5859,
        1,0,0,0,504,5871,1,0,0,0,506,5875,1,0,0,0,508,5877,1,0,0,0,510,5919,
        1,0,0,0,512,5926,1,0,0,0,514,5928,1,0,0,0,516,5951,1,0,0,0,518,5957,
        1,0,0,0,520,5965,1,0,0,0,522,5968,1,0,0,0,524,5971,1,0,0,0,526,5992,
        1,0,0,0,528,6013,1,0,0,0,530,6021,1,0,0,0,532,6059,1,0,0,0,534,6071,
        1,0,0,0,536,6073,1,0,0,0,538,6079,1,0,0,0,540,6083,1,0,0,0,542,6099,
        1,0,0,0,544,6112,1,0,0,0,546,6122,1,0,0,0,548,6124,1,0,0,0,550,6130,
        1,0,0,0,552,6134,1,0,0,0,554,6136,1,0,0,0,556,6138,1,0,0,0,558,6156,
        1,0,0,0,560,6172,1,0,0,0,562,6176,1,0,0,0,564,6181,1,0,0,0,566,6192,
        1,0,0,0,568,6197,1,0,0,0,570,6199,1,0,0,0,572,6203,1,0,0,0,574,6228,
        1,0,0,0,576,6230,1,0,0,0,578,6233,1,0,0,0,580,6238,1,0,0,0,582,6254,
        1,0,0,0,584,6378,1,0,0,0,586,6380,1,0,0,0,588,6413,1,0,0,0,590,6418,
        1,0,0,0,592,6422,1,0,0,0,594,6428,1,0,0,0,596,6436,1,0,0,0,598,6444,
        1,0,0,0,600,6452,1,0,0,0,602,6460,1,0,0,0,604,6471,1,0,0,0,606,6479,
        1,0,0,0,608,6487,1,0,0,0,610,6495,1,0,0,0,612,6503,1,0,0,0,614,6537,
        1,0,0,0,616,6553,1,0,0,0,618,6557,1,0,0,0,620,6559,1,0,0,0,622,6562,
        1,0,0,0,624,6566,1,0,0,0,626,6572,1,0,0,0,628,6592,1,0,0,0,630,6772,
        1,0,0,0,632,6774,1,0,0,0,634,6793,1,0,0,0,636,6795,1,0,0,0,638,6858,
        1,0,0,0,640,6898,1,0,0,0,642,6900,1,0,0,0,644,6910,1,0,0,0,646,6921,
        1,0,0,0,648,6923,1,0,0,0,650,6926,1,0,0,0,652,6930,1,0,0,0,654,6932,
        1,0,0,0,656,6944,1,0,0,0,658,6946,1,0,0,0,660,6979,1,0,0,0,662,6981,
        1,0,0,0,664,6990,1,0,0,0,666,7008,1,0,0,0,668,7021,1,0,0,0,670,7032,
        1,0,0,0,672,7151,1,0,0,0,674,7173,1,0,0,0,676,7189,1,0,0,0,678,7198,
        1,0,0,0,680,7207,1,0,0,0,682,7209,1,0,0,0,684,7216,1,0,0,0,686,7218,
        1,0,0,0,688,7220,1,0,0,0,690,7222,1,0,0,0,692,7224,1,0,0,0,694,7226,
        1,0,0,0,696,7228,1,0,0,0,698,7230,1,0,0,0,700,702,3,2,1,0,701,700,
        1,0,0,0,701,702,1,0,0,0,702,705,1,0,0,0,703,704,5,1114,0,0,704,706,
        5,1114,0,0,705,703,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,707,708,
        5,0,0,1,708,1,1,0,0,0,709,712,3,4,2,0,710,711,5,1114,0,0,711,713,
        5,1114,0,0,712,710,1,0,0,0,712,713,1,0,0,0,713,715,1,0,0,0,714,716,
        5,1129,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,719,1,0,0,0,717,719,
        3,6,3,0,718,709,1,0,0,0,718,717,1,0,0,0,719,722,1,0,0,0,720,718,
        1,0,0,0,720,721,1,0,0,0,721,732,1,0,0,0,722,720,1,0,0,0,723,729,
        3,4,2,0,724,725,5,1114,0,0,725,727,5,1114,0,0,726,724,1,0,0,0,726,
        727,1,0,0,0,727,728,1,0,0,0,728,730,5,1129,0,0,729,726,1,0,0,0,729,
        730,1,0,0,0,730,733,1,0,0,0,731,733,3,6,3,0,732,723,1,0,0,0,732,
        731,1,0,0,0,733,3,1,0,0,0,734,742,3,8,4,0,735,742,3,10,5,0,736,742,
        3,12,6,0,737,742,3,14,7,0,738,742,3,16,8,0,739,742,3,20,10,0,740,
        742,3,22,11,0,741,734,1,0,0,0,741,735,1,0,0,0,741,736,1,0,0,0,741,
        737,1,0,0,0,741,738,1,0,0,0,741,739,1,0,0,0,741,740,1,0,0,0,742,
        5,1,0,0,0,743,744,5,1129,0,0,744,7,1,0,0,0,745,784,3,24,12,0,746,
        784,3,26,13,0,747,784,3,28,14,0,748,784,3,30,15,0,749,784,3,32,16,
        0,750,784,3,34,17,0,751,784,3,38,19,0,752,784,3,40,20,0,753,784,
        3,42,21,0,754,784,3,44,22,0,755,784,3,46,23,0,756,784,3,56,28,0,
        757,784,3,36,18,0,758,784,3,126,63,0,759,784,3,128,64,0,760,784,
        3,130,65,0,761,784,3,132,66,0,762,784,3,134,67,0,763,784,3,136,68,
        0,764,784,3,138,69,0,765,784,3,140,70,0,766,784,3,142,71,0,767,784,
        3,144,72,0,768,784,3,148,74,0,769,784,3,150,75,0,770,784,3,152,76,
        0,771,784,3,154,77,0,772,784,3,156,78,0,773,784,3,158,79,0,774,784,
        3,160,80,0,775,784,3,162,81,0,776,784,3,164,82,0,777,784,3,166,83,
        0,778,784,3,168,84,0,779,784,3,170,85,0,780,784,3,172,86,0,781,784,
        3,174,87,0,782,784,3,178,89,0,783,745,1,0,0,0,783,746,1,0,0,0,783,
        747,1,0,0,0,783,748,1,0,0,0,783,749,1,0,0,0,783,750,1,0,0,0,783,
        751,1,0,0,0,783,752,1,0,0,0,783,753,1,0,0,0,783,754,1,0,0,0,783,
        755,1,0,0,0,783,756,1,0,0,0,783,757,1,0,0,0,783,758,1,0,0,0,783,
        759,1,0,0,0,783,760,1,0,0,0,783,761,1,0,0,0,783,762,1,0,0,0,783,
        763,1,0,0,0,783,764,1,0,0,0,783,765,1,0,0,0,783,766,1,0,0,0,783,
        767,1,0,0,0,783,768,1,0,0,0,783,769,1,0,0,0,783,770,1,0,0,0,783,
        771,1,0,0,0,783,772,1,0,0,0,783,773,1,0,0,0,783,774,1,0,0,0,783,
        775,1,0,0,0,783,776,1,0,0,0,783,777,1,0,0,0,783,778,1,0,0,0,783,
        779,1,0,0,0,783,780,1,0,0,0,783,781,1,0,0,0,783,782,1,0,0,0,784,
        9,1,0,0,0,785,796,3,196,98,0,786,796,3,188,94,0,787,796,3,198,99,
        0,788,796,3,182,91,0,789,796,3,194,97,0,790,796,3,180,90,0,791,796,
        3,190,95,0,792,796,3,192,96,0,793,796,3,184,92,0,794,796,3,186,93,
        0,795,785,1,0,0,0,795,786,1,0,0,0,795,787,1,0,0,0,795,788,1,0,0,
        0,795,789,1,0,0,0,795,790,1,0,0,0,795,791,1,0,0,0,795,792,1,0,0,
        0,795,793,1,0,0,0,795,794,1,0,0,0,796,11,1,0,0,0,797,807,3,290,145,
        0,798,807,3,292,146,0,799,807,3,294,147,0,800,807,3,296,148,0,801,
        807,3,298,149,0,802,807,3,300,150,0,803,807,3,302,151,0,804,807,
        3,304,152,0,805,807,3,306,153,0,806,797,1,0,0,0,806,798,1,0,0,0,
        806,799,1,0,0,0,806,800,1,0,0,0,806,801,1,0,0,0,806,802,1,0,0,0,
        806,803,1,0,0,0,806,804,1,0,0,0,806,805,1,0,0,0,807,13,1,0,0,0,808,
        824,3,322,161,0,809,824,3,324,162,0,810,824,3,326,163,0,811,824,
        3,328,164,0,812,824,3,330,165,0,813,824,3,332,166,0,814,824,3,334,
        167,0,815,824,3,336,168,0,816,824,3,338,169,0,817,824,3,362,181,
        0,818,824,3,364,182,0,819,824,3,366,183,0,820,824,3,368,184,0,821,
        824,3,370,185,0,822,824,3,372,186,0,823,808,1,0,0,0,823,809,1,0,
        0,0,823,810,1,0,0,0,823,811,1,0,0,0,823,812,1,0,0,0,823,813,1,0,
        0,0,823,814,1,0,0,0,823,815,1,0,0,0,823,816,1,0,0,0,823,817,1,0,
        0,0,823,818,1,0,0,0,823,819,1,0,0,0,823,820,1,0,0,0,823,821,1,0,
        0,0,823,822,1,0,0,0,824,15,1,0,0,0,825,829,3,374,187,0,826,829,3,
        376,188,0,827,829,3,378,189,0,828,825,1,0,0,0,828,826,1,0,0,0,828,
        827,1,0,0,0,829,17,1,0,0,0,830,841,3,382,191,0,831,841,3,384,192,
        0,832,841,3,386,193,0,833,841,3,390,195,0,834,841,3,392,196,0,835,
        841,3,394,197,0,836,841,3,398,199,0,837,841,3,388,194,0,838,841,
        3,396,198,0,839,841,3,400,200,0,840,830,1,0,0,0,840,831,1,0,0,0,
        840,832,1,0,0,0,840,833,1,0,0,0,840,834,1,0,0,0,840,835,1,0,0,0,
        840,836,1,0,0,0,840,837,1,0,0,0,840,838,1,0,0,0,840,839,1,0,0,0,
        841,19,1,0,0,0,842,868,3,418,209,0,843,868,3,420,210,0,844,868,3,
        422,211,0,845,868,3,424,212,0,846,868,3,428,214,0,847,868,3,430,
        215,0,848,868,3,432,216,0,849,868,3,434,217,0,850,868,3,460,230,
        0,851,868,3,462,231,0,852,868,3,464,232,0,853,868,3,466,233,0,854,
        868,3,468,234,0,855,868,3,472,236,0,856,868,3,474,237,0,857,868,
        3,476,238,0,858,868,3,478,239,0,859,868,3,480,240,0,860,868,3,494,
        247,0,861,868,3,496,248,0,862,868,3,498,249,0,863,868,3,500,250,
        0,864,868,3,502,251,0,865,868,3,504,252,0,866,868,3,506,253,0,867,
        842,1,0,0,0,867,843,1,0,0,0,867,844,1,0,0,0,867,845,1,0,0,0,867,
        846,1,0,0,0,867,847,1,0,0,0,867,848,1,0,0,0,867,849,1,0,0,0,867,
        850,1,0,0,0,867,851,1,0,0,0,867,852,1,0,0,0,867,853,1,0,0,0,867,
        854,1,0,0,0,867,855,1,0,0,0,867,856,1,0,0,0,867,857,1,0,0,0,867,
        858,1,0,0,0,867,859,1,0,0,0,867,860,1,0,0,0,867,861,1,0,0,0,867,
        862,1,0,0,0,867,863,1,0,0,0,867,864,1,0,0,0,867,865,1,0,0,0,867,
        866,1,0,0,0,868,21,1,0,0,0,869,877,3,516,258,0,870,877,3,518,259,
        0,871,877,3,520,260,0,872,877,3,522,261,0,873,877,3,524,262,0,874,
        877,3,526,263,0,875,877,3,530,265,0,876,869,1,0,0,0,876,870,1,0,
        0,0,876,871,1,0,0,0,876,872,1,0,0,0,876,873,1,0,0,0,876,874,1,0,
        0,0,876,875,1,0,0,0,877,23,1,0,0,0,878,879,5,33,0,0,879,881,7,0,
        0,0,880,882,3,622,311,0,881,880,1,0,0,0,881,882,1,0,0,0,882,883,
        1,0,0,0,883,887,3,564,282,0,884,886,3,58,29,0,885,884,1,0,0,0,886,
        889,1,0,0,0,887,885,1,0,0,0,887,888,1,0,0,0,888,25,1,0,0,0,889,887,
        1,0,0,0,890,892,5,33,0,0,891,893,3,62,31,0,892,891,1,0,0,0,892,893,
        1,0,0,0,893,894,1,0,0,0,894,896,5,413,0,0,895,897,3,622,311,0,896,
        895,1,0,0,0,896,897,1,0,0,0,897,898,1,0,0,0,898,899,3,536,268,0,
        899,900,5,117,0,0,900,901,5,603,0,0,901,908,3,64,32,0,902,903,5,
        117,0,0,903,905,5,369,0,0,904,906,5,113,0,0,905,904,1,0,0,0,905,
        906,1,0,0,0,906,907,1,0,0,0,907,909,5,559,0,0,908,902,1,0,0,0,908,
        909,1,0,0,0,909,911,1,0,0,0,910,912,3,72,36,0,911,910,1,0,0,0,911,
        912,1,0,0,0,912,915,1,0,0,0,913,914,5,366,0,0,914,916,5,1141,0,0,
        915,913,1,0,0,0,915,916,1,0,0,0,916,917,1,0,0,0,917,918,5,397,0,
        0,918,919,3,380,190,0,919,27,1,0,0,0,920,922,5,33,0,0,921,923,7,
        1,0,0,922,921,1,0,0,0,922,923,1,0,0,0,923,925,1,0,0,0,924,926,7,
        2,0,0,925,924,1,0,0,0,925,926,1,0,0,0,926,927,1,0,0,0,927,928,5,
        80,0,0,928,930,3,564,282,0,929,931,3,74,37,0,930,929,1,0,0,0,930,
        931,1,0,0,0,931,932,1,0,0,0,932,933,5,117,0,0,933,934,3,538,269,
        0,934,938,3,602,301,0,935,937,3,76,38,0,936,935,1,0,0,0,937,940,
        1,0,0,0,938,936,1,0,0,0,938,939,1,0,0,0,939,953,1,0,0,0,940,938,
        1,0,0,0,941,943,5,334,0,0,942,944,5,1117,0,0,943,942,1,0,0,0,943,
        944,1,0,0,0,944,945,1,0,0,0,945,952,7,3,0,0,946,948,5,102,0,0,947,
        949,5,1117,0,0,948,947,1,0,0,0,948,949,1,0,0,0,949,950,1,0,0,0,950,
        952,7,4,0,0,951,941,1,0,0,0,951,946,1,0,0,0,952,955,1,0,0,0,953,
        951,1,0,0,0,953,954,1,0,0,0,954,29,1,0,0,0,955,953,1,0,0,0,956,957,
        5,33,0,0,957,958,5,473,0,0,958,959,5,72,0,0,959,960,3,564,282,0,
        960,961,5,5,0,0,961,962,5,657,0,0,962,968,5,1141,0,0,963,965,5,451,
        0,0,964,966,5,1117,0,0,965,964,1,0,0,0,965,966,1,0,0,0,966,967,1,
        0,0,0,967,969,3,572,286,0,968,963,1,0,0,0,968,969,1,0,0,0,969,975,
        1,0,0,0,970,972,5,658,0,0,971,973,5,1117,0,0,972,971,1,0,0,0,972,
        973,1,0,0,0,973,974,1,0,0,0,974,976,3,572,286,0,975,970,1,0,0,0,
        975,976,1,0,0,0,976,982,1,0,0,0,977,979,5,570,0,0,978,980,5,1117,
        0,0,979,978,1,0,0,0,979,980,1,0,0,0,980,981,1,0,0,0,981,983,3,572,
        286,0,982,977,1,0,0,0,982,983,1,0,0,0,983,989,1,0,0,0,984,986,5,
        526,0,0,985,987,5,1117,0,0,986,985,1,0,0,0,986,987,1,0,0,0,987,988,
        1,0,0,0,988,990,3,564,282,0,989,984,1,0,0,0,989,990,1,0,0,0,990,
        992,1,0,0,0,991,993,5,672,0,0,992,991,1,0,0,0,992,993,1,0,0,0,993,
        999,1,0,0,0,994,996,5,366,0,0,995,997,5,1117,0,0,996,995,1,0,0,0,
        996,997,1,0,0,0,997,998,1,0,0,0,998,1000,5,1141,0,0,999,994,1,0,
        0,0,999,1000,1,0,0,0,1000,1001,1,0,0,0,1001,1003,5,407,0,0,1002,
        1004,5,1117,0,0,1003,1002,1,0,0,0,1003,1004,1,0,0,0,1004,1005,1,
        0,0,0,1005,1006,3,554,277,0,1006,31,1,0,0,0,1007,1009,5,33,0,0,1008,
        1010,3,62,31,0,1009,1008,1,0,0,0,1009,1010,1,0,0,0,1010,1011,1,0,
        0,0,1011,1012,5,130,0,0,1012,1013,3,536,268,0,1013,1015,5,1126,0,
        0,1014,1016,3,78,39,0,1015,1014,1,0,0,0,1015,1016,1,0,0,0,1016,1021,
        1,0,0,0,1017,1018,5,1128,0,0,1018,1020,3,78,39,0,1019,1017,1,0,0,
        0,1020,1023,1,0,0,0,1021,1019,1,0,0,0,1021,1022,1,0,0,0,1022,1024,
        1,0,0,0,1023,1021,1,0,0,0,1024,1028,5,1127,0,0,1025,1027,3,82,41,
        0,1026,1025,1,0,0,0,1027,1030,1,0,0,0,1028,1026,1,0,0,0,1028,1029,
        1,0,0,0,1029,1031,1,0,0,0,1030,1028,1,0,0,0,1031,1032,3,380,190,
        0,1032,33,1,0,0,0,1033,1035,5,33,0,0,1034,1036,3,62,31,0,1035,1034,
        1,0,0,0,1035,1036,1,0,0,0,1036,1038,1,0,0,0,1037,1039,5,333,0,0,
        1038,1037,1,0,0,0,1038,1039,1,0,0,0,1039,1040,1,0,0,0,1040,1042,
        5,435,0,0,1041,1043,3,622,311,0,1042,1041,1,0,0,0,1042,1043,1,0,
        0,0,1043,1044,1,0,0,0,1044,1045,3,536,268,0,1045,1047,5,1126,0,0,
        1046,1048,3,80,40,0,1047,1046,1,0,0,0,1047,1048,1,0,0,0,1048,1053,
        1,0,0,0,1049,1050,5,1128,0,0,1050,1052,3,80,40,0,1051,1049,1,0,0,
        0,1052,1055,1,0,0,0,1053,1051,1,0,0,0,1053,1054,1,0,0,0,1054,1056,
        1,0,0,0,1055,1053,1,0,0,0,1056,1057,5,1127,0,0,1057,1058,5,592,0,
        0,1058,1062,3,584,292,0,1059,1061,3,82,41,0,1060,1059,1,0,0,0,1061,
        1064,1,0,0,0,1062,1060,1,0,0,0,1062,1063,1,0,0,0,1063,1067,1,0,0,
        0,1064,1062,1,0,0,0,1065,1068,3,380,190,0,1066,1068,3,396,198,0,
        1067,1065,1,0,0,0,1067,1066,1,0,0,0,1068,35,1,0,0,0,1069,1070,5,
        33,0,0,1070,1072,5,594,0,0,1071,1073,3,622,311,0,1072,1071,1,0,0,
        0,1072,1073,1,0,0,0,1073,1074,1,0,0,0,1074,1079,3,540,270,0,1075,
        1076,5,1128,0,0,1076,1078,3,540,270,0,1077,1075,1,0,0,0,1078,1081,
        1,0,0,0,1079,1077,1,0,0,0,1079,1080,1,0,0,0,1080,37,1,0,0,0,1081,
        1079,1,0,0,0,1082,1083,5,33,0,0,1083,1084,5,606,0,0,1084,1085,3,
        564,282,0,1085,1086,5,66,0,0,1086,1087,5,386,0,0,1087,1088,5,677,
        0,0,1088,1089,7,5,0,0,1089,1090,5,539,0,0,1090,1091,5,1126,0,0,1091,
        1096,3,84,42,0,1092,1093,5,1128,0,0,1093,1095,3,84,42,0,1094,1092,
        1,0,0,0,1095,1098,1,0,0,0,1096,1094,1,0,0,0,1096,1097,1,0,0,0,1097,
        1099,1,0,0,0,1098,1096,1,0,0,0,1099,1100,5,1127,0,0,1100,39,1,0,
        0,0,1101,1103,5,33,0,0,1102,1104,5,647,0,0,1103,1102,1,0,0,0,1103,
        1104,1,0,0,0,1104,1105,1,0,0,0,1105,1107,5,170,0,0,1106,1108,3,622,
        311,0,1107,1106,1,0,0,0,1107,1108,1,0,0,0,1108,1109,1,0,0,0,1109,
        1117,3,538,269,0,1110,1111,5,97,0,0,1111,1118,3,538,269,0,1112,1113,
        5,1126,0,0,1113,1114,5,97,0,0,1114,1115,3,538,269,0,1115,1116,5,
        1127,0,0,1116,1118,1,0,0,0,1117,1110,1,0,0,0,1117,1112,1,0,0,0,1118,
        1180,1,0,0,0,1119,1121,5,33,0,0,1120,1122,5,647,0,0,1121,1120,1,
        0,0,0,1121,1122,1,0,0,0,1122,1123,1,0,0,0,1123,1125,5,170,0,0,1124,
        1126,3,622,311,0,1125,1124,1,0,0,0,1125,1126,1,0,0,0,1126,1127,1,
        0,0,0,1127,1129,3,538,269,0,1128,1130,3,86,43,0,1129,1128,1,0,0,
        0,1129,1130,1,0,0,0,1130,1141,1,0,0,0,1131,1138,3,104,52,0,1132,
        1134,5,1128,0,0,1133,1132,1,0,0,0,1133,1134,1,0,0,0,1134,1135,1,
        0,0,0,1135,1137,3,104,52,0,1136,1133,1,0,0,0,1137,1140,1,0,0,0,1138,
        1136,1,0,0,0,1138,1139,1,0,0,0,1139,1142,1,0,0,0,1140,1138,1,0,0,
        0,1141,1131,1,0,0,0,1141,1142,1,0,0,0,1142,1144,1,0,0,0,1143,1145,
        3,110,55,0,1144,1143,1,0,0,0,1144,1145,1,0,0,0,1145,1147,1,0,0,0,
        1146,1148,7,6,0,0,1147,1146,1,0,0,0,1147,1148,1,0,0,0,1148,1150,
        1,0,0,0,1149,1151,5,12,0,0,1150,1149,1,0,0,0,1150,1151,1,0,0,0,1151,
        1152,1,0,0,0,1152,1153,3,196,98,0,1153,1180,1,0,0,0,1154,1156,5,
        33,0,0,1155,1157,5,647,0,0,1156,1155,1,0,0,0,1156,1157,1,0,0,0,1157,
        1158,1,0,0,0,1158,1160,5,170,0,0,1159,1161,3,622,311,0,1160,1159,
        1,0,0,0,1160,1161,1,0,0,0,1161,1162,1,0,0,0,1162,1163,3,538,269,
        0,1163,1174,3,86,43,0,1164,1171,3,104,52,0,1165,1167,5,1128,0,0,
        1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,1168,1,0,0,0,1168,1170,
        3,104,52,0,1169,1166,1,0,0,0,1170,1173,1,0,0,0,1171,1169,1,0,0,0,
        1171,1172,1,0,0,0,1172,1175,1,0,0,0,1173,1171,1,0,0,0,1174,1164,
        1,0,0,0,1174,1175,1,0,0,0,1175,1177,1,0,0,0,1176,1178,3,110,55,0,
        1177,1176,1,0,0,0,1177,1178,1,0,0,0,1178,1180,1,0,0,0,1179,1101,
        1,0,0,0,1179,1119,1,0,0,0,1179,1154,1,0,0,0,1180,41,1,0,0,0,1181,
        1182,5,33,0,0,1182,1183,5,645,0,0,1183,1184,3,564,282,0,1184,1185,
        5,5,0,0,1185,1186,5,387,0,0,1186,1190,5,1141,0,0,1187,1188,5,426,
        0,0,1188,1189,5,1117,0,0,1189,1191,3,572,286,0,1190,1187,1,0,0,0,
        1190,1191,1,0,0,0,1191,1197,1,0,0,0,1192,1194,5,407,0,0,1193,1195,
        5,1117,0,0,1194,1193,1,0,0,0,1194,1195,1,0,0,0,1195,1196,1,0,0,0,
        1196,1198,3,554,277,0,1197,1192,1,0,0,0,1197,1198,1,0,0,0,1198,43,
        1,0,0,0,1199,1200,5,33,0,0,1200,1201,5,645,0,0,1201,1202,3,564,282,
        0,1202,1203,5,5,0,0,1203,1204,5,387,0,0,1204,1205,5,1141,0,0,1205,
        1206,5,184,0,0,1206,1207,5,473,0,0,1207,1208,5,72,0,0,1208,1214,
        3,564,282,0,1209,1211,5,421,0,0,1210,1212,5,1117,0,0,1211,1210,1,
        0,0,0,1211,1212,1,0,0,0,1212,1213,1,0,0,0,1213,1215,3,572,286,0,
        1214,1209,1,0,0,0,1214,1215,1,0,0,0,1215,1221,1,0,0,0,1216,1218,
        5,451,0,0,1217,1219,5,1117,0,0,1218,1217,1,0,0,0,1218,1219,1,0,0,
        0,1219,1220,1,0,0,0,1220,1222,3,572,286,0,1221,1216,1,0,0,0,1221,
        1222,1,0,0,0,1222,1228,1,0,0,0,1223,1225,5,339,0,0,1224,1226,5,1117,
        0,0,1225,1224,1,0,0,0,1225,1226,1,0,0,0,1226,1227,1,0,0,0,1227,1229,
        3,572,286,0,1228,1223,1,0,0,0,1228,1229,1,0,0,0,1229,1235,1,0,0,
        0,1230,1232,5,499,0,0,1231,1233,5,1117,0,0,1232,1231,1,0,0,0,1232,
        1233,1,0,0,0,1233,1234,1,0,0,0,1234,1236,3,572,286,0,1235,1230,1,
        0,0,0,1235,1236,1,0,0,0,1236,1242,1,0,0,0,1237,1239,5,526,0,0,1238,
        1240,5,1117,0,0,1239,1238,1,0,0,0,1239,1240,1,0,0,0,1240,1241,1,
        0,0,0,1241,1243,3,564,282,0,1242,1237,1,0,0,0,1242,1243,1,0,0,0,
        1243,1245,1,0,0,0,1244,1246,5,672,0,0,1245,1244,1,0,0,0,1245,1246,
        1,0,0,0,1246,1252,1,0,0,0,1247,1249,5,366,0,0,1248,1250,5,1117,0,
        0,1249,1248,1,0,0,0,1249,1250,1,0,0,0,1250,1251,1,0,0,0,1251,1253,
        5,1141,0,0,1252,1247,1,0,0,0,1252,1253,1,0,0,0,1253,1254,1,0,0,0,
        1254,1256,5,407,0,0,1255,1257,5,1117,0,0,1256,1255,1,0,0,0,1256,
        1257,1,0,0,0,1257,1258,1,0,0,0,1258,1259,3,554,277,0,1259,45,1,0,
        0,0,1260,1262,5,33,0,0,1261,1263,3,62,31,0,1262,1261,1,0,0,0,1262,
        1263,1,0,0,0,1263,1264,1,0,0,0,1264,1265,5,175,0,0,1265,1266,3,536,
        268,0,1266,1267,7,7,0,0,1267,1268,7,8,0,0,1268,1269,5,117,0,0,1269,
        1270,3,538,269,0,1270,1271,5,64,0,0,1271,1272,5,52,0,0,1272,1275,
        5,598,0,0,1273,1274,7,9,0,0,1274,1276,3,536,268,0,1275,1273,1,0,
        0,0,1275,1276,1,0,0,0,1276,1277,1,0,0,0,1277,1278,3,380,190,0,1278,
        47,1,0,0,0,1279,1281,5,190,0,0,1280,1282,5,569,0,0,1281,1280,1,0,
        0,0,1281,1282,1,0,0,0,1282,1283,1,0,0,0,1283,1284,3,50,25,0,1284,
        49,1,0,0,0,1285,1297,3,52,26,0,1286,1287,5,1126,0,0,1287,1292,3,
        54,27,0,1288,1289,5,1128,0,0,1289,1291,3,54,27,0,1290,1288,1,0,0,
        0,1291,1294,1,0,0,0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1295,
        1,0,0,0,1294,1292,1,0,0,0,1295,1296,5,1127,0,0,1296,1298,1,0,0,0,
        1297,1286,1,0,0,0,1297,1298,1,0,0,0,1298,1299,1,0,0,0,1299,1300,
        5,12,0,0,1300,1301,5,1126,0,0,1301,1302,3,10,5,0,1302,1305,5,1127,
        0,0,1303,1304,5,1128,0,0,1304,1306,3,50,25,0,1305,1303,1,0,0,0,1305,
        1306,1,0,0,0,1306,51,1,0,0,0,1307,1308,3,564,282,0,1308,53,1,0,0,
        0,1309,1310,3,564,282,0,1310,55,1,0,0,0,1311,1313,5,33,0,0,1312,
        1314,3,624,312,0,1313,1312,1,0,0,0,1313,1314,1,0,0,0,1314,1318,1,
        0,0,0,1315,1316,5,334,0,0,1316,1317,5,1117,0,0,1317,1319,7,10,0,
        0,1318,1315,1,0,0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1322,
        3,62,31,0,1321,1320,1,0,0,0,1321,1322,1,0,0,0,1322,1326,1,0,0,0,
        1323,1324,5,158,0,0,1324,1325,5,604,0,0,1325,1327,7,11,0,0,1326,
        1323,1,0,0,0,1326,1327,1,0,0,0,1327,1328,1,0,0,0,1328,1329,5,669,
        0,0,1329,1334,3,536,268,0,1330,1331,5,1126,0,0,1331,1332,3,596,298,
        0,1332,1333,5,1127,0,0,1333,1335,1,0,0,0,1334,1330,1,0,0,0,1334,
        1335,1,0,0,0,1335,1336,1,0,0,0,1336,1356,5,12,0,0,1337,1339,5,1126,
        0,0,1338,1340,3,48,24,0,1339,1338,1,0,0,0,1339,1340,1,0,0,0,1340,
        1341,1,0,0,0,1341,1342,3,196,98,0,1342,1343,5,1127,0,0,1343,1357,
        1,0,0,0,1344,1346,3,48,24,0,1345,1344,1,0,0,0,1345,1346,1,0,0,0,
        1346,1347,1,0,0,0,1347,1354,3,196,98,0,1348,1350,5,190,0,0,1349,
        1351,7,12,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,
        0,0,1352,1353,5,26,0,0,1353,1355,5,119,0,0,1354,1348,1,0,0,0,1354,
        1355,1,0,0,0,1355,1357,1,0,0,0,1356,1337,1,0,0,0,1356,1345,1,0,0,
        0,1357,57,1,0,0,0,1358,1360,5,42,0,0,1359,1358,1,0,0,0,1359,1360,
        1,0,0,0,1360,1361,1,0,0,0,1361,1363,3,60,30,0,1362,1364,5,1117,0,
        0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1367,1,0,0,0,1365,1368,
        3,550,275,0,1366,1368,5,42,0,0,1367,1365,1,0,0,0,1367,1366,1,0,0,
        0,1368,1392,1,0,0,0,1369,1371,5,42,0,0,1370,1369,1,0,0,0,1370,1371,
        1,0,0,0,1371,1372,1,0,0,0,1372,1374,5,27,0,0,1373,1375,5,1117,0,
        0,1374,1373,1,0,0,0,1374,1375,1,0,0,0,1375,1376,1,0,0,0,1376,1392,
        3,552,276,0,1377,1379,5,42,0,0,1378,1377,1,0,0,0,1378,1379,1,0,0,
        0,1379,1380,1,0,0,0,1380,1382,5,403,0,0,1381,1383,5,1117,0,0,1382,
        1381,1,0,0,0,1382,1383,1,0,0,0,1383,1384,1,0,0,0,1384,1392,5,1141,
        0,0,1385,1386,5,133,0,0,1386,1388,5,536,0,0,1387,1389,5,1117,0,0,
        1388,1387,1,0,0,0,1388,1389,1,0,0,0,1389,1390,1,0,0,0,1390,1392,
        7,13,0,0,1391,1359,1,0,0,0,1391,1370,1,0,0,0,1391,1378,1,0,0,0,1391,
        1385,1,0,0,0,1392,59,1,0,0,0,1393,1394,5,25,0,0,1394,1399,5,152,
        0,0,1395,1399,5,836,0,0,1396,1397,5,220,0,0,1397,1399,5,152,0,0,
        1398,1393,1,0,0,0,1398,1395,1,0,0,0,1398,1396,1,0,0,0,1399,61,1,
        0,0,0,1400,1401,5,390,0,0,1401,1408,5,1117,0,0,1402,1409,3,546,273,
        0,1403,1406,5,37,0,0,1404,1405,5,1126,0,0,1405,1407,5,1127,0,0,1406,
        1404,1,0,0,0,1406,1407,1,0,0,0,1407,1409,1,0,0,0,1408,1402,1,0,0,
        0,1408,1403,1,0,0,0,1409,63,1,0,0,0,1410,1411,5,336,0,0,1411,1415,
        3,66,33,0,1412,1414,3,68,34,0,1413,1412,1,0,0,0,1414,1417,1,0,0,
        0,1415,1413,1,0,0,0,1415,1416,1,0,0,0,1416,1445,1,0,0,0,1417,1415,
        1,0,0,0,1418,1421,5,415,0,0,1419,1422,3,570,285,0,1420,1422,3,668,
        334,0,1421,1419,1,0,0,0,1421,1420,1,0,0,0,1422,1423,1,0,0,0,1423,
        1432,3,70,35,0,1424,1425,5,628,0,0,1425,1429,3,66,33,0,1426,1428,
        3,68,34,0,1427,1426,1,0,0,0,1428,1431,1,0,0,0,1429,1427,1,0,0,0,
        1429,1430,1,0,0,0,1430,1433,1,0,0,0,1431,1429,1,0,0,0,1432,1424,
        1,0,0,0,1432,1433,1,0,0,0,1433,1442,1,0,0,0,1434,1435,5,406,0,0,
        1435,1439,3,66,33,0,1436,1438,3,68,34,0,1437,1436,1,0,0,0,1438,1441,
        1,0,0,0,1439,1437,1,0,0,0,1439,1440,1,0,0,0,1440,1443,1,0,0,0,1441,
        1439,1,0,0,0,1442,1434,1,0,0,0,1442,1443,1,0,0,0,1443,1445,1,0,0,
        0,1444,1410,1,0,0,0,1444,1418,1,0,0,0,1445,65,1,0,0,0,1446,1451,
        5,313,0,0,1447,1451,3,574,287,0,1448,1451,3,570,285,0,1449,1451,
        3,668,334,0,1450,1446,1,0,0,0,1450,1447,1,0,0,0,1450,1448,1,0,0,
        0,1450,1449,1,0,0,0,1451,67,1,0,0,0,1452,1453,5,1113,0,0,1453,1456,
        5,85,0,0,1454,1457,3,570,285,0,1455,1457,3,668,334,0,1456,1454,1,
        0,0,0,1456,1455,1,0,0,0,1457,1458,1,0,0,0,1458,1459,3,70,35,0,1459,
        69,1,0,0,0,1460,1474,3,692,346,0,1461,1474,5,219,0,0,1462,1474,5,
        238,0,0,1463,1474,5,239,0,0,1464,1474,5,240,0,0,1465,1474,5,241,
        0,0,1466,1474,5,242,0,0,1467,1474,5,243,0,0,1468,1474,5,244,0,0,
        1469,1474,5,245,0,0,1470,1474,5,246,0,0,1471,1474,5,247,0,0,1472,
        1474,5,248,0,0,1473,1460,1,0,0,0,1473,1461,1,0,0,0,1473,1462,1,0,
        0,0,1473,1463,1,0,0,0,1473,1464,1,0,0,0,1473,1465,1,0,0,0,1473,1466,
        1,0,0,0,1473,1467,1,0,0,0,1473,1468,1,0,0,0,1473,1469,1,0,0,0,1473,
        1470,1,0,0,0,1473,1471,1,0,0,0,1473,1472,1,0,0,0,1474,71,1,0,0,0,
        1475,1481,5,401,0,0,1476,1481,5,394,0,0,1477,1478,5,394,0,0,1478,
        1479,5,117,0,0,1479,1481,5,612,0,0,1480,1475,1,0,0,0,1480,1476,1,
        0,0,0,1480,1477,1,0,0,0,1481,73,1,0,0,0,1482,1483,5,185,0,0,1483,
        1484,7,14,0,0,1484,75,1,0,0,0,1485,1487,5,465,0,0,1486,1488,5,1117,
        0,0,1487,1486,1,0,0,0,1487,1488,1,0,0,0,1488,1489,1,0,0,0,1489,1508,
        3,572,286,0,1490,1508,3,74,37,0,1491,1492,5,190,0,0,1492,1493,5,
        545,0,0,1493,1508,3,564,282,0,1494,1495,5,366,0,0,1495,1508,5,1141,
        0,0,1496,1508,7,15,0,0,1497,1499,5,870,0,0,1498,1500,5,1117,0,0,
        1499,1498,1,0,0,0,1499,1500,1,0,0,0,1500,1501,1,0,0,0,1501,1508,
        5,1141,0,0,1502,1504,5,994,0,0,1503,1505,5,1117,0,0,1504,1503,1,
        0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1508,5,1141,0,0,1507,
        1485,1,0,0,0,1507,1490,1,0,0,0,1507,1491,1,0,0,0,1507,1494,1,0,0,
        0,1507,1496,1,0,0,0,1507,1497,1,0,0,0,1507,1502,1,0,0,0,1508,77,
        1,0,0,0,1509,1511,7,16,0,0,1510,1509,1,0,0,0,1510,1511,1,0,0,0,1511,
        1512,1,0,0,0,1512,1513,3,564,282,0,1513,1514,3,584,292,0,1514,79,
        1,0,0,0,1515,1516,3,564,282,0,1516,1517,3,584,292,0,1517,81,1,0,
        0,0,1518,1519,5,366,0,0,1519,1542,5,1141,0,0,1520,1521,5,466,0,0,
        1521,1542,5,158,0,0,1522,1524,5,113,0,0,1523,1522,1,0,0,0,1523,1524,
        1,0,0,0,1524,1525,1,0,0,0,1525,1542,5,47,0,0,1526,1527,5,379,0,0,
        1527,1537,5,158,0,0,1528,1529,5,519,0,0,1529,1537,5,158,0,0,1530,
        1531,5,134,0,0,1531,1532,5,158,0,0,1532,1537,5,386,0,0,1533,1534,
        5,111,0,0,1534,1535,5,158,0,0,1535,1537,5,386,0,0,1536,1526,1,0,
        0,0,1536,1528,1,0,0,0,1536,1530,1,0,0,0,1536,1533,1,0,0,0,1537,1542,
        1,0,0,0,1538,1539,5,158,0,0,1539,1540,5,604,0,0,1540,1542,7,11,0,
        0,1541,1518,1,0,0,0,1541,1520,1,0,0,0,1541,1523,1,0,0,0,1541,1536,
        1,0,0,0,1541,1538,1,0,0,0,1542,83,1,0,0,0,1543,1544,5,444,0,0,1544,
        1558,5,1141,0,0,1545,1546,5,39,0,0,1546,1558,5,1141,0,0,1547,1548,
        5,663,0,0,1548,1558,5,1141,0,0,1549,1550,5,549,0,0,1550,1558,5,1141,
        0,0,1551,1552,5,615,0,0,1552,1558,5,1141,0,0,1553,1554,5,540,0,0,
        1554,1558,5,1141,0,0,1555,1556,5,555,0,0,1556,1558,3,570,285,0,1557,
        1543,1,0,0,0,1557,1545,1,0,0,0,1557,1547,1,0,0,0,1557,1549,1,0,0,
        0,1557,1551,1,0,0,0,1557,1553,1,0,0,0,1557,1555,1,0,0,0,1558,85,
        1,0,0,0,1559,1560,5,1126,0,0,1560,1565,3,88,44,0,1561,1562,5,1128,
        0,0,1562,1564,3,88,44,0,1563,1561,1,0,0,0,1564,1567,1,0,0,0,1565,
        1563,1,0,0,0,1565,1566,1,0,0,0,1566,1568,1,0,0,0,1567,1565,1,0,0,
        0,1568,1569,5,1127,0,0,1569,87,1,0,0,0,1570,1571,3,542,271,0,1571,
        1572,3,90,45,0,1572,1576,1,0,0,0,1573,1576,3,94,47,0,1574,1576,3,
        102,51,0,1575,1570,1,0,0,0,1575,1573,1,0,0,0,1575,1574,1,0,0,0,1576,
        89,1,0,0,0,1577,1581,3,584,292,0,1578,1580,3,92,46,0,1579,1578,1,
        0,0,0,1580,1583,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,
        91,1,0,0,0,1583,1581,1,0,0,0,1584,1638,3,580,290,0,1585,1586,5,42,
        0,0,1586,1638,3,614,307,0,1587,1638,5,671,0,0,1588,1638,5,457,0,
        0,1589,1594,5,340,0,0,1590,1591,5,117,0,0,1591,1592,5,182,0,0,1592,
        1594,3,616,308,0,1593,1589,1,0,0,0,1593,1590,1,0,0,0,1594,1638,1,
        0,0,0,1595,1597,5,129,0,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
        1598,1,0,0,0,1598,1638,5,90,0,0,1599,1601,5,179,0,0,1600,1602,5,
        90,0,0,1601,1600,1,0,0,0,1601,1602,1,0,0,0,1602,1638,1,0,0,0,1603,
        1604,5,366,0,0,1604,1638,5,1141,0,0,1605,1606,5,364,0,0,1606,1638,
        7,17,0,0,1607,1608,5,634,0,0,1608,1638,7,18,0,0,1609,1638,3,96,48,
        0,1610,1611,5,27,0,0,1611,1638,3,552,276,0,1612,1613,5,69,0,0,1613,
        1615,5,8,0,0,1614,1612,1,0,0,0,1614,1615,1,0,0,0,1615,1616,1,0,0,
        0,1616,1617,5,12,0,0,1617,1618,5,1126,0,0,1618,1619,3,668,334,0,
        1619,1621,5,1127,0,0,1620,1622,7,19,0,0,1621,1620,1,0,0,0,1621,1622,
        1,0,0,0,1622,1638,1,0,0,0,1623,1624,5,237,0,0,1624,1625,5,42,0,0,
        1625,1638,5,667,0,0,1626,1628,5,30,0,0,1627,1629,3,564,282,0,1628,
        1627,1,0,0,0,1628,1629,1,0,0,0,1629,1631,1,0,0,0,1630,1626,1,0,0,
        0,1630,1631,1,0,0,0,1631,1632,1,0,0,0,1632,1633,5,26,0,0,1633,1634,
        5,1126,0,0,1634,1635,3,668,334,0,1635,1636,5,1127,0,0,1636,1638,
        1,0,0,0,1637,1584,1,0,0,0,1637,1585,1,0,0,0,1637,1587,1,0,0,0,1637,
        1588,1,0,0,0,1637,1593,1,0,0,0,1637,1596,1,0,0,0,1637,1599,1,0,0,
        0,1637,1603,1,0,0,0,1637,1605,1,0,0,0,1637,1607,1,0,0,0,1637,1609,
        1,0,0,0,1637,1610,1,0,0,0,1637,1614,1,0,0,0,1637,1623,1,0,0,0,1637,
        1630,1,0,0,0,1638,93,1,0,0,0,1639,1641,5,30,0,0,1640,1642,3,564,
        282,0,1641,1640,1,0,0,0,1641,1642,1,0,0,0,1642,1644,1,0,0,0,1643,
        1639,1,0,0,0,1643,1644,1,0,0,0,1644,1645,1,0,0,0,1645,1646,5,129,
        0,0,1646,1648,5,90,0,0,1647,1649,3,564,282,0,1648,1647,1,0,0,0,1648,
        1649,1,0,0,0,1649,1651,1,0,0,0,1650,1652,3,74,37,0,1651,1650,1,0,
        0,0,1651,1652,1,0,0,0,1652,1653,1,0,0,0,1653,1657,3,602,301,0,1654,
        1656,3,76,38,0,1655,1654,1,0,0,0,1656,1659,1,0,0,0,1657,1655,1,0,
        0,0,1657,1658,1,0,0,0,1658,1709,1,0,0,0,1659,1657,1,0,0,0,1660,1662,
        5,30,0,0,1661,1663,3,564,282,0,1662,1661,1,0,0,0,1662,1663,1,0,0,
        0,1663,1665,1,0,0,0,1664,1660,1,0,0,0,1664,1665,1,0,0,0,1665,1666,
        1,0,0,0,1666,1668,5,179,0,0,1667,1669,7,20,0,0,1668,1667,1,0,0,0,
        1668,1669,1,0,0,0,1669,1671,1,0,0,0,1670,1672,3,564,282,0,1671,1670,
        1,0,0,0,1671,1672,1,0,0,0,1672,1674,1,0,0,0,1673,1675,3,74,37,0,
        1674,1673,1,0,0,0,1674,1675,1,0,0,0,1675,1676,1,0,0,0,1676,1680,
        3,602,301,0,1677,1679,3,76,38,0,1678,1677,1,0,0,0,1679,1682,1,0,
        0,0,1680,1678,1,0,0,0,1680,1681,1,0,0,0,1681,1709,1,0,0,0,1682,1680,
        1,0,0,0,1683,1685,5,30,0,0,1684,1686,3,564,282,0,1685,1684,1,0,0,
        0,1685,1686,1,0,0,0,1686,1688,1,0,0,0,1687,1683,1,0,0,0,1687,1688,
        1,0,0,0,1688,1689,1,0,0,0,1689,1690,5,66,0,0,1690,1692,5,90,0,0,
        1691,1693,3,564,282,0,1692,1691,1,0,0,0,1692,1693,1,0,0,0,1693,1694,
        1,0,0,0,1694,1695,3,602,301,0,1695,1696,3,96,48,0,1696,1709,1,0,
        0,0,1697,1699,5,30,0,0,1698,1700,3,564,282,0,1699,1698,1,0,0,0,1699,
        1700,1,0,0,0,1700,1702,1,0,0,0,1701,1697,1,0,0,0,1701,1702,1,0,0,
        0,1702,1703,1,0,0,0,1703,1704,5,26,0,0,1704,1705,5,1126,0,0,1705,
        1706,3,668,334,0,1706,1707,5,1127,0,0,1707,1709,1,0,0,0,1708,1643,
        1,0,0,0,1708,1664,1,0,0,0,1708,1687,1,0,0,0,1708,1701,1,0,0,0,1709,
        95,1,0,0,0,1710,1711,5,135,0,0,1711,1713,3,538,269,0,1712,1714,3,
        602,301,0,1713,1712,1,0,0,0,1713,1714,1,0,0,0,1714,1717,1,0,0,0,
        1715,1716,5,108,0,0,1716,1718,7,21,0,0,1717,1715,1,0,0,0,1717,1718,
        1,0,0,0,1718,1720,1,0,0,0,1719,1721,3,98,49,0,1720,1719,1,0,0,0,
        1720,1721,1,0,0,0,1721,97,1,0,0,0,1722,1723,5,117,0,0,1723,1724,
        5,44,0,0,1724,1728,3,100,50,0,1725,1726,5,117,0,0,1726,1727,5,182,
        0,0,1727,1729,3,100,50,0,1728,1725,1,0,0,0,1728,1729,1,0,0,0,1729,
        1739,1,0,0,0,1730,1731,5,117,0,0,1731,1732,5,182,0,0,1732,1736,3,
        100,50,0,1733,1734,5,117,0,0,1734,1735,5,44,0,0,1735,1737,3,100,
        50,0,1736,1733,1,0,0,0,1736,1737,1,0,0,0,1737,1739,1,0,0,0,1738,
        1722,1,0,0,0,1738,1730,1,0,0,0,1739,99,1,0,0,0,1740,1747,5,143,0,
        0,1741,1747,5,21,0,0,1742,1743,5,152,0,0,1743,1747,5,115,0,0,1744,
        1745,5,519,0,0,1745,1747,5,331,0,0,1746,1740,1,0,0,0,1746,1741,1,
        0,0,0,1746,1742,1,0,0,0,1746,1744,1,0,0,0,1747,101,1,0,0,0,1748,
        1750,7,20,0,0,1749,1751,3,564,282,0,1750,1749,1,0,0,0,1750,1751,
        1,0,0,0,1751,1753,1,0,0,0,1752,1754,3,74,37,0,1753,1752,1,0,0,0,
        1753,1754,1,0,0,0,1754,1755,1,0,0,0,1755,1759,3,602,301,0,1756,1758,
        3,76,38,0,1757,1756,1,0,0,0,1758,1761,1,0,0,0,1759,1757,1,0,0,0,
        1759,1760,1,0,0,0,1760,1777,1,0,0,0,1761,1759,1,0,0,0,1762,1764,
        7,22,0,0,1763,1765,7,20,0,0,1764,1763,1,0,0,0,1764,1765,1,0,0,0,
        1765,1767,1,0,0,0,1766,1768,3,564,282,0,1767,1766,1,0,0,0,1767,1768,
        1,0,0,0,1768,1769,1,0,0,0,1769,1773,3,602,301,0,1770,1772,3,76,38,
        0,1771,1770,1,0,0,0,1772,1775,1,0,0,0,1773,1771,1,0,0,0,1773,1774,
        1,0,0,0,1774,1777,1,0,0,0,1775,1773,1,0,0,0,1776,1748,1,0,0,0,1776,
        1762,1,0,0,0,1777,103,1,0,0,0,1778,1780,5,407,0,0,1779,1781,5,1117,
        0,0,1780,1779,1,0,0,0,1780,1781,1,0,0,0,1781,1783,1,0,0,0,1782,1784,
        3,554,277,0,1783,1782,1,0,0,0,1783,1784,1,0,0,0,1784,1964,1,0,0,
        0,1785,1787,5,870,0,0,1786,1788,5,1117,0,0,1787,1786,1,0,0,0,1787,
        1788,1,0,0,0,1788,1789,1,0,0,0,1789,1964,5,1141,0,0,1790,1792,5,
        339,0,0,1791,1793,5,1117,0,0,1792,1791,1,0,0,0,1792,1793,1,0,0,0,
        1793,1794,1,0,0,0,1794,1964,3,570,285,0,1795,1797,5,340,0,0,1796,
        1798,5,1117,0,0,1797,1796,1,0,0,0,1797,1798,1,0,0,0,1798,1799,1,
        0,0,0,1799,1964,3,570,285,0,1800,1802,5,341,0,0,1801,1803,5,1117,
        0,0,1802,1801,1,0,0,0,1802,1803,1,0,0,0,1803,1804,1,0,0,0,1804,1964,
        3,570,285,0,1805,1807,5,42,0,0,1806,1805,1,0,0,0,1806,1807,1,0,0,
        0,1807,1808,1,0,0,0,1808,1810,3,60,30,0,1809,1811,5,1117,0,0,1810,
        1809,1,0,0,0,1810,1811,1,0,0,0,1811,1814,1,0,0,0,1812,1815,3,550,
        275,0,1813,1815,5,42,0,0,1814,1812,1,0,0,0,1814,1813,1,0,0,0,1815,
        1964,1,0,0,0,1816,1818,7,23,0,0,1817,1819,5,1117,0,0,1818,1817,1,
        0,0,0,1818,1819,1,0,0,0,1819,1820,1,0,0,0,1820,1964,7,24,0,0,1821,
        1823,5,42,0,0,1822,1821,1,0,0,0,1822,1823,1,0,0,0,1823,1824,1,0,
        0,0,1824,1826,5,27,0,0,1825,1827,5,1117,0,0,1826,1825,1,0,0,0,1826,
        1827,1,0,0,0,1827,1828,1,0,0,0,1828,1964,3,552,276,0,1829,1831,5,
        366,0,0,1830,1832,5,1117,0,0,1831,1830,1,0,0,0,1831,1832,1,0,0,0,
        1832,1833,1,0,0,0,1833,1964,5,1141,0,0,1834,1836,5,371,0,0,1835,
        1837,5,1117,0,0,1836,1835,1,0,0,0,1836,1837,1,0,0,0,1837,1838,1,
        0,0,0,1838,1964,7,25,0,0,1839,1841,5,374,0,0,1840,1842,5,1117,0,
        0,1841,1840,1,0,0,0,1841,1842,1,0,0,0,1842,1843,1,0,0,0,1843,1964,
        5,1141,0,0,1844,1845,7,26,0,0,1845,1847,5,393,0,0,1846,1848,5,1117,
        0,0,1847,1846,1,0,0,0,1847,1848,1,0,0,0,1848,1849,1,0,0,0,1849,1964,
        5,1141,0,0,1850,1852,5,391,0,0,1851,1853,5,1117,0,0,1852,1851,1,
        0,0,0,1852,1853,1,0,0,0,1853,1854,1,0,0,0,1854,1964,7,24,0,0,1855,
        1857,5,403,0,0,1856,1858,5,1117,0,0,1857,1856,1,0,0,0,1857,1858,
        1,0,0,0,1858,1859,1,0,0,0,1859,1964,5,1141,0,0,1860,1862,7,27,0,
        0,1861,1863,5,1117,0,0,1862,1861,1,0,0,0,1862,1863,1,0,0,0,1863,
        1864,1,0,0,0,1864,1964,7,24,0,0,1865,1867,7,28,0,0,1866,1868,5,1117,
        0,0,1867,1866,1,0,0,0,1867,1868,1,0,0,0,1868,1869,1,0,0,0,1869,1964,
        3,570,285,0,1870,1872,5,404,0,0,1871,1873,5,1117,0,0,1872,1871,1,
        0,0,0,1872,1873,1,0,0,0,1873,1874,1,0,0,0,1874,1964,3,570,285,0,
        1875,1876,5,80,0,0,1876,1878,5,393,0,0,1877,1879,5,1117,0,0,1878,
        1877,1,0,0,0,1878,1879,1,0,0,0,1879,1880,1,0,0,0,1880,1964,5,1141,
        0,0,1881,1883,5,453,0,0,1882,1884,5,1117,0,0,1883,1882,1,0,0,0,1883,
        1884,1,0,0,0,1884,1885,1,0,0,0,1885,1964,7,29,0,0,1886,1888,5,465,
        0,0,1887,1889,5,1117,0,0,1888,1887,1,0,0,0,1888,1889,1,0,0,0,1889,
        1890,1,0,0,0,1890,1964,3,572,286,0,1891,1893,5,498,0,0,1892,1894,
        5,1117,0,0,1893,1892,1,0,0,0,1893,1894,1,0,0,0,1894,1895,1,0,0,0,
        1895,1964,3,570,285,0,1896,1898,5,508,0,0,1897,1899,5,1117,0,0,1898,
        1897,1,0,0,0,1898,1899,1,0,0,0,1899,1900,1,0,0,0,1900,1964,3,570,
        285,0,1901,1903,5,541,0,0,1902,1904,5,1117,0,0,1903,1902,1,0,0,0,
        1903,1904,1,0,0,0,1904,1905,1,0,0,0,1905,1964,7,13,0,0,1906,1908,
        5,549,0,0,1907,1909,5,1117,0,0,1908,1907,1,0,0,0,1908,1909,1,0,0,
        0,1909,1910,1,0,0,0,1910,1964,5,1141,0,0,1911,1913,5,600,0,0,1912,
        1914,5,1117,0,0,1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,
        0,0,0,1915,1964,7,30,0,0,1916,1917,5,627,0,0,1917,1964,5,651,0,0,
        1918,1920,5,994,0,0,1919,1921,5,1117,0,0,1920,1919,1,0,0,0,1920,
        1921,1,0,0,0,1921,1922,1,0,0,0,1922,1964,5,1141,0,0,1923,1925,5,
        629,0,0,1924,1926,5,1117,0,0,1925,1924,1,0,0,0,1925,1926,1,0,0,0,
        1926,1927,1,0,0,0,1927,1964,7,13,0,0,1928,1930,5,630,0,0,1929,1931,
        5,1117,0,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,1932,1,0,0,0,
        1932,1964,7,13,0,0,1933,1935,5,631,0,0,1934,1936,5,1117,0,0,1935,
        1934,1,0,0,0,1935,1936,1,0,0,0,1936,1939,1,0,0,0,1937,1940,5,42,
        0,0,1938,1940,3,570,285,0,1939,1937,1,0,0,0,1939,1938,1,0,0,0,1940,
        1964,1,0,0,0,1941,1942,5,645,0,0,1942,1944,3,564,282,0,1943,1945,
        3,108,54,0,1944,1943,1,0,0,0,1944,1945,1,0,0,0,1945,1964,1,0,0,0,
        1946,1947,5,646,0,0,1947,1948,5,1117,0,0,1948,1964,3,106,53,0,1949,
        1964,3,108,54,0,1950,1952,5,652,0,0,1951,1953,5,1117,0,0,1952,1951,
        1,0,0,0,1952,1953,1,0,0,0,1953,1954,1,0,0,0,1954,1964,7,24,0,0,1955,
        1957,5,178,0,0,1956,1958,5,1117,0,0,1957,1956,1,0,0,0,1957,1958,
        1,0,0,0,1958,1959,1,0,0,0,1959,1960,5,1126,0,0,1960,1961,3,600,300,
        0,1961,1962,5,1127,0,0,1962,1964,1,0,0,0,1963,1778,1,0,0,0,1963,
        1785,1,0,0,0,1963,1790,1,0,0,0,1963,1795,1,0,0,0,1963,1800,1,0,0,
        0,1963,1806,1,0,0,0,1963,1816,1,0,0,0,1963,1822,1,0,0,0,1963,1829,
        1,0,0,0,1963,1834,1,0,0,0,1963,1839,1,0,0,0,1963,1844,1,0,0,0,1963,
        1850,1,0,0,0,1963,1855,1,0,0,0,1963,1860,1,0,0,0,1963,1865,1,0,0,
        0,1963,1870,1,0,0,0,1963,1875,1,0,0,0,1963,1881,1,0,0,0,1963,1886,
        1,0,0,0,1963,1891,1,0,0,0,1963,1896,1,0,0,0,1963,1901,1,0,0,0,1963,
        1906,1,0,0,0,1963,1911,1,0,0,0,1963,1916,1,0,0,0,1963,1918,1,0,0,
        0,1963,1923,1,0,0,0,1963,1928,1,0,0,0,1963,1933,1,0,0,0,1963,1941,
        1,0,0,0,1963,1946,1,0,0,0,1963,1949,1,0,0,0,1963,1950,1,0,0,0,1963,
        1955,1,0,0,0,1964,105,1,0,0,0,1965,1966,7,31,0,0,1966,107,1,0,0,
        0,1967,1968,5,634,0,0,1968,1969,7,18,0,0,1969,109,1,0,0,0,1970,1971,
        5,128,0,0,1971,1972,5,19,0,0,1972,1975,3,112,56,0,1973,1974,5,548,
        0,0,1974,1976,3,570,285,0,1975,1973,1,0,0,0,1975,1976,1,0,0,0,1976,
        1984,1,0,0,0,1977,1978,5,639,0,0,1978,1979,5,19,0,0,1979,1982,3,
        114,57,0,1980,1981,5,640,0,0,1981,1983,3,570,285,0,1982,1980,1,0,
        0,0,1982,1983,1,0,0,0,1983,1985,1,0,0,0,1984,1977,1,0,0,0,1984,1985,
        1,0,0,0,1985,1997,1,0,0,0,1986,1987,5,1126,0,0,1987,1992,3,116,58,
        0,1988,1989,5,1128,0,0,1989,1991,3,116,58,0,1990,1988,1,0,0,0,1991,
        1994,1,0,0,0,1992,1990,1,0,0,0,1992,1993,1,0,0,0,1993,1995,1,0,0,
        0,1994,1992,1,0,0,0,1995,1996,5,1127,0,0,1996,1998,1,0,0,0,1997,
        1986,1,0,0,0,1997,1998,1,0,0,0,1998,111,1,0,0,0,1999,2001,5,99,0,
        0,2000,1999,1,0,0,0,2000,2001,1,0,0,0,2001,2002,1,0,0,0,2002,2003,
        5,441,0,0,2003,2004,5,1126,0,0,2004,2005,3,668,334,0,2005,2006,5,
        1127,0,0,2006,2045,1,0,0,0,2007,2009,5,99,0,0,2008,2007,1,0,0,0,
        2008,2009,1,0,0,0,2009,2010,1,0,0,0,2010,2014,5,90,0,0,2011,2012,
        5,334,0,0,2012,2013,5,1117,0,0,2013,2015,7,32,0,0,2014,2011,1,0,
        0,0,2014,2015,1,0,0,0,2015,2016,1,0,0,0,2016,2017,5,1126,0,0,2017,
        2018,3,596,298,0,2018,2019,5,1127,0,0,2019,2045,1,0,0,0,2020,2030,
        5,132,0,0,2021,2022,5,1126,0,0,2022,2023,3,668,334,0,2023,2024,5,
        1127,0,0,2024,2031,1,0,0,0,2025,2026,5,363,0,0,2026,2027,5,1126,
        0,0,2027,2028,3,596,298,0,2028,2029,5,1127,0,0,2029,2031,1,0,0,0,
        2030,2021,1,0,0,0,2030,2025,1,0,0,0,2031,2045,1,0,0,0,2032,2042,
        5,471,0,0,2033,2034,5,1126,0,0,2034,2035,3,668,334,0,2035,2036,5,
        1127,0,0,2036,2043,1,0,0,0,2037,2038,5,363,0,0,2038,2039,5,1126,
        0,0,2039,2040,3,596,298,0,2040,2041,5,1127,0,0,2041,2043,1,0,0,0,
        2042,2033,1,0,0,0,2042,2037,1,0,0,0,2043,2045,1,0,0,0,2044,2000,
        1,0,0,0,2044,2008,1,0,0,0,2044,2020,1,0,0,0,2044,2032,1,0,0,0,2045,
        113,1,0,0,0,2046,2048,5,99,0,0,2047,2046,1,0,0,0,2047,2048,1,0,0,
        0,2048,2049,1,0,0,0,2049,2050,5,441,0,0,2050,2051,5,1126,0,0,2051,
        2052,3,668,334,0,2052,2053,5,1127,0,0,2053,2068,1,0,0,0,2054,2056,
        5,99,0,0,2055,2054,1,0,0,0,2055,2056,1,0,0,0,2056,2057,1,0,0,0,2057,
        2061,5,90,0,0,2058,2059,5,334,0,0,2059,2060,5,1117,0,0,2060,2062,
        7,32,0,0,2061,2058,1,0,0,0,2061,2062,1,0,0,0,2062,2063,1,0,0,0,2063,
        2064,5,1126,0,0,2064,2065,3,596,298,0,2065,2066,5,1127,0,0,2066,
        2068,1,0,0,0,2067,2047,1,0,0,0,2067,2055,1,0,0,0,2068,115,1,0,0,
        0,2069,2070,5,128,0,0,2070,2071,3,564,282,0,2071,2072,5,186,0,0,
        2072,2073,5,469,0,0,2073,2074,5,649,0,0,2074,2075,5,1126,0,0,2075,
        2080,3,118,59,0,2076,2077,5,1128,0,0,2077,2079,3,118,59,0,2078,2076,
        1,0,0,0,2079,2082,1,0,0,0,2080,2078,1,0,0,0,2080,2081,1,0,0,0,2081,
        2083,1,0,0,0,2082,2080,1,0,0,0,2083,2087,5,1127,0,0,2084,2086,3,
        124,62,0,2085,2084,1,0,0,0,2086,2089,1,0,0,0,2087,2085,1,0,0,0,2087,
        2088,1,0,0,0,2088,2101,1,0,0,0,2089,2087,1,0,0,0,2090,2091,5,1126,
        0,0,2091,2096,3,122,61,0,2092,2093,5,1128,0,0,2093,2095,3,122,61,
        0,2094,2092,1,0,0,0,2095,2098,1,0,0,0,2096,2094,1,0,0,0,2096,2097,
        1,0,0,0,2097,2099,1,0,0,0,2098,2096,1,0,0,0,2099,2100,5,1127,0,0,
        2100,2102,1,0,0,0,2101,2090,1,0,0,0,2101,2102,1,0,0,0,2102,2216,
        1,0,0,0,2103,2104,5,128,0,0,2104,2105,3,564,282,0,2105,2106,5,186,
        0,0,2106,2107,5,469,0,0,2107,2108,5,649,0,0,2108,2112,3,118,59,0,
        2109,2111,3,124,62,0,2110,2109,1,0,0,0,2111,2114,1,0,0,0,2112,2110,
        1,0,0,0,2112,2113,1,0,0,0,2113,2126,1,0,0,0,2114,2112,1,0,0,0,2115,
        2116,5,1126,0,0,2116,2121,3,122,61,0,2117,2118,5,1128,0,0,2118,2120,
        3,122,61,0,2119,2117,1,0,0,0,2120,2123,1,0,0,0,2121,2119,1,0,0,0,
        2121,2122,1,0,0,0,2122,2124,1,0,0,0,2123,2121,1,0,0,0,2124,2125,
        5,1127,0,0,2125,2127,1,0,0,0,2126,2115,1,0,0,0,2126,2127,1,0,0,0,
        2127,2216,1,0,0,0,2128,2129,5,128,0,0,2129,2130,3,564,282,0,2130,
        2131,5,186,0,0,2131,2132,5,79,0,0,2132,2133,5,1126,0,0,2133,2138,
        3,118,59,0,2134,2135,5,1128,0,0,2135,2137,3,118,59,0,2136,2134,1,
        0,0,0,2137,2140,1,0,0,0,2138,2136,1,0,0,0,2138,2139,1,0,0,0,2139,
        2141,1,0,0,0,2140,2138,1,0,0,0,2141,2145,5,1127,0,0,2142,2144,3,
        124,62,0,2143,2142,1,0,0,0,2144,2147,1,0,0,0,2145,2143,1,0,0,0,2145,
        2146,1,0,0,0,2146,2159,1,0,0,0,2147,2145,1,0,0,0,2148,2149,5,1126,
        0,0,2149,2154,3,122,61,0,2150,2151,5,1128,0,0,2151,2153,3,122,61,
        0,2152,2150,1,0,0,0,2153,2156,1,0,0,0,2154,2152,1,0,0,0,2154,2155,
        1,0,0,0,2155,2157,1,0,0,0,2156,2154,1,0,0,0,2157,2158,5,1127,0,0,
        2158,2160,1,0,0,0,2159,2148,1,0,0,0,2159,2160,1,0,0,0,2160,2216,
        1,0,0,0,2161,2162,5,128,0,0,2162,2163,3,564,282,0,2163,2164,5,186,
        0,0,2164,2165,5,79,0,0,2165,2166,5,1126,0,0,2166,2171,3,120,60,0,
        2167,2168,5,1128,0,0,2168,2170,3,120,60,0,2169,2167,1,0,0,0,2170,
        2173,1,0,0,0,2171,2169,1,0,0,0,2171,2172,1,0,0,0,2172,2174,1,0,0,
        0,2173,2171,1,0,0,0,2174,2178,5,1127,0,0,2175,2177,3,124,62,0,2176,
        2175,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,
        0,2179,2192,1,0,0,0,2180,2178,1,0,0,0,2181,2182,5,1126,0,0,2182,
        2187,3,122,61,0,2183,2184,5,1128,0,0,2184,2186,3,122,61,0,2185,2183,
        1,0,0,0,2186,2189,1,0,0,0,2187,2185,1,0,0,0,2187,2188,1,0,0,0,2188,
        2190,1,0,0,0,2189,2187,1,0,0,0,2190,2191,5,1127,0,0,2191,2193,1,
        0,0,0,2192,2181,1,0,0,0,2192,2193,1,0,0,0,2193,2216,1,0,0,0,2194,
        2195,5,128,0,0,2195,2199,3,564,282,0,2196,2198,3,124,62,0,2197,2196,
        1,0,0,0,2198,2201,1,0,0,0,2199,2197,1,0,0,0,2199,2200,1,0,0,0,2200,
        2213,1,0,0,0,2201,2199,1,0,0,0,2202,2203,5,1126,0,0,2203,2208,3,
        122,61,0,2204,2205,5,1128,0,0,2205,2207,3,122,61,0,2206,2204,1,0,
        0,0,2207,2210,1,0,0,0,2208,2206,1,0,0,0,2208,2209,1,0,0,0,2209,2211,
        1,0,0,0,2210,2208,1,0,0,0,2211,2212,5,1127,0,0,2212,2214,1,0,0,0,
        2213,2202,1,0,0,0,2213,2214,1,0,0,0,2214,2216,1,0,0,0,2215,2069,
        1,0,0,0,2215,2103,1,0,0,0,2215,2128,1,0,0,0,2215,2161,1,0,0,0,2215,
        2194,1,0,0,0,2216,117,1,0,0,0,2217,2221,3,582,291,0,2218,2221,3,
        668,334,0,2219,2221,5,109,0,0,2220,2217,1,0,0,0,2220,2218,1,0,0,
        0,2220,2219,1,0,0,0,2221,119,1,0,0,0,2222,2223,5,1126,0,0,2223,2226,
        3,118,59,0,2224,2225,5,1128,0,0,2225,2227,3,118,59,0,2226,2224,1,
        0,0,0,2227,2228,1,0,0,0,2228,2226,1,0,0,0,2228,2229,1,0,0,0,2229,
        2230,1,0,0,0,2230,2231,5,1127,0,0,2231,121,1,0,0,0,2232,2233,5,639,
        0,0,2233,2237,3,564,282,0,2234,2236,3,124,62,0,2235,2234,1,0,0,0,
        2236,2239,1,0,0,0,2237,2235,1,0,0,0,2237,2238,1,0,0,0,2238,123,1,
        0,0,0,2239,2237,1,0,0,0,2240,2242,5,42,0,0,2241,2240,1,0,0,0,2241,
        2242,1,0,0,0,2242,2244,1,0,0,0,2243,2245,5,634,0,0,2244,2243,1,0,
        0,0,2244,2245,1,0,0,0,2245,2246,1,0,0,0,2246,2248,5,407,0,0,2247,
        2249,5,1117,0,0,2248,2247,1,0,0,0,2248,2249,1,0,0,0,2249,2250,1,
        0,0,0,2250,2289,3,554,277,0,2251,2253,5,366,0,0,2252,2254,5,1117,
        0,0,2253,2252,1,0,0,0,2253,2254,1,0,0,0,2254,2255,1,0,0,0,2255,2289,
        5,1141,0,0,2256,2257,5,386,0,0,2257,2259,5,393,0,0,2258,2260,5,1117,
        0,0,2259,2258,1,0,0,0,2259,2260,1,0,0,0,2260,2261,1,0,0,0,2261,2289,
        5,1141,0,0,2262,2263,5,80,0,0,2263,2265,5,393,0,0,2264,2266,5,1117,
        0,0,2265,2264,1,0,0,0,2265,2266,1,0,0,0,2266,2267,1,0,0,0,2267,2289,
        5,1141,0,0,2268,2270,5,498,0,0,2269,2271,5,1117,0,0,2270,2269,1,
        0,0,0,2270,2271,1,0,0,0,2271,2272,1,0,0,0,2272,2289,3,570,285,0,
        2273,2275,5,508,0,0,2274,2276,5,1117,0,0,2275,2274,1,0,0,0,2275,
        2276,1,0,0,0,2276,2277,1,0,0,0,2277,2289,3,570,285,0,2278,2280,5,
        645,0,0,2279,2281,5,1117,0,0,2280,2279,1,0,0,0,2280,2281,1,0,0,0,
        2281,2282,1,0,0,0,2282,2289,3,564,282,0,2283,2285,5,526,0,0,2284,
        2286,5,1117,0,0,2285,2284,1,0,0,0,2285,2286,1,0,0,0,2286,2287,1,
        0,0,0,2287,2289,3,564,282,0,2288,2241,1,0,0,0,2288,2251,1,0,0,0,
        2288,2256,1,0,0,0,2288,2262,1,0,0,0,2288,2268,1,0,0,0,2288,2273,
        1,0,0,0,2288,2278,1,0,0,0,2288,2283,1,0,0,0,2289,125,1,0,0,0,2290,
        2291,5,7,0,0,2291,2293,7,0,0,0,2292,2294,3,564,282,0,2293,2292,1,
        0,0,0,2293,2294,1,0,0,0,2294,2296,1,0,0,0,2295,2297,3,58,29,0,2296,
        2295,1,0,0,0,2297,2298,1,0,0,0,2298,2296,1,0,0,0,2298,2299,1,0,0,
        0,2299,2309,1,0,0,0,2300,2301,5,7,0,0,2301,2302,7,0,0,0,2302,2303,
        3,564,282,0,2303,2304,5,662,0,0,2304,2305,5,386,0,0,2305,2306,5,
        393,0,0,2306,2307,5,514,0,0,2307,2309,1,0,0,0,2308,2290,1,0,0,0,
        2308,2300,1,0,0,0,2309,127,1,0,0,0,2310,2312,5,7,0,0,2311,2313,3,
        62,31,0,2312,2311,1,0,0,0,2312,2313,1,0,0,0,2313,2314,1,0,0,0,2314,
        2315,5,413,0,0,2315,2319,3,536,268,0,2316,2317,5,117,0,0,2317,2318,
        5,603,0,0,2318,2320,3,64,32,0,2319,2316,1,0,0,0,2319,2320,1,0,0,
        0,2320,2327,1,0,0,0,2321,2322,5,117,0,0,2322,2324,5,369,0,0,2323,
        2325,5,113,0,0,2324,2323,1,0,0,0,2324,2325,1,0,0,0,2325,2326,1,0,
        0,0,2326,2328,5,559,0,0,2327,2321,1,0,0,0,2327,2328,1,0,0,0,2328,
        2332,1,0,0,0,2329,2330,5,138,0,0,2330,2331,5,173,0,0,2331,2333,3,
        536,268,0,2332,2329,1,0,0,0,2332,2333,1,0,0,0,2333,2335,1,0,0,0,
        2334,2336,3,72,36,0,2335,2334,1,0,0,0,2335,2336,1,0,0,0,2336,2339,
        1,0,0,0,2337,2338,5,366,0,0,2338,2340,5,1141,0,0,2339,2337,1,0,0,
        0,2339,2340,1,0,0,0,2340,2343,1,0,0,0,2341,2342,5,397,0,0,2342,2344,
        3,380,190,0,2343,2341,1,0,0,0,2343,2344,1,0,0,0,2344,129,1,0,0,0,
        2345,2346,5,7,0,0,2346,2347,5,435,0,0,2347,2351,3,536,268,0,2348,
        2350,3,82,41,0,2349,2348,1,0,0,0,2350,2353,1,0,0,0,2351,2349,1,0,
        0,0,2351,2352,1,0,0,0,2352,131,1,0,0,0,2353,2351,1,0,0,0,2354,2355,
        5,7,0,0,2355,2356,5,455,0,0,2356,2357,5,597,0,0,2357,2358,5,786,
        0,0,2358,2359,5,475,0,0,2359,2360,5,90,0,0,2360,133,1,0,0,0,2361,
        2362,5,7,0,0,2362,2363,5,473,0,0,2363,2364,5,72,0,0,2364,2365,3,
        564,282,0,2365,2366,5,5,0,0,2366,2367,5,657,0,0,2367,2373,5,1141,
        0,0,2368,2370,5,451,0,0,2369,2371,5,1117,0,0,2370,2369,1,0,0,0,2370,
        2371,1,0,0,0,2371,2372,1,0,0,0,2372,2374,3,572,286,0,2373,2368,1,
        0,0,0,2373,2374,1,0,0,0,2374,2376,1,0,0,0,2375,2377,5,672,0,0,2376,
        2375,1,0,0,0,2376,2377,1,0,0,0,2377,2378,1,0,0,0,2378,2380,5,407,
        0,0,2379,2381,5,1117,0,0,2380,2379,1,0,0,0,2380,2381,1,0,0,0,2381,
        2382,1,0,0,0,2382,2383,3,554,277,0,2383,135,1,0,0,0,2384,2385,5,
        7,0,0,2385,2386,5,130,0,0,2386,2390,3,536,268,0,2387,2389,3,82,41,
        0,2388,2387,1,0,0,0,2389,2392,1,0,0,0,2390,2388,1,0,0,0,2390,2391,
        1,0,0,0,2391,137,1,0,0,0,2392,2390,1,0,0,0,2393,2394,5,7,0,0,2394,
        2395,5,606,0,0,2395,2396,3,564,282,0,2396,2397,5,539,0,0,2397,2398,
        5,1126,0,0,2398,2403,3,84,42,0,2399,2400,5,1128,0,0,2400,2402,3,
        84,42,0,2401,2399,1,0,0,0,2402,2405,1,0,0,0,2403,2401,1,0,0,0,2403,
        2404,1,0,0,0,2404,2406,1,0,0,0,2405,2403,1,0,0,0,2406,2407,5,1127,
        0,0,2407,139,1,0,0,0,2408,2410,5,7,0,0,2409,2411,7,1,0,0,2410,2409,
        1,0,0,0,2410,2411,1,0,0,0,2411,2413,1,0,0,0,2412,2414,5,77,0,0,2413,
        2412,1,0,0,0,2413,2414,1,0,0,0,2414,2415,1,0,0,0,2415,2416,5,170,
        0,0,2416,2418,3,538,269,0,2417,2419,3,626,313,0,2418,2417,1,0,0,
        0,2418,2419,1,0,0,0,2419,2428,1,0,0,0,2420,2425,3,146,73,0,2421,
        2422,5,1128,0,0,2422,2424,3,146,73,0,2423,2421,1,0,0,0,2424,2427,
        1,0,0,0,2425,2423,1,0,0,0,2425,2426,1,0,0,0,2426,2429,1,0,0,0,2427,
        2425,1,0,0,0,2428,2420,1,0,0,0,2428,2429,1,0,0,0,2429,2431,1,0,0,
        0,2430,2432,3,110,55,0,2431,2430,1,0,0,0,2431,2432,1,0,0,0,2432,
        141,1,0,0,0,2433,2434,5,7,0,0,2434,2435,5,645,0,0,2435,2436,3,564,
        282,0,2436,2437,7,33,0,0,2437,2438,5,387,0,0,2438,2442,5,1141,0,
        0,2439,2440,5,451,0,0,2440,2441,5,1117,0,0,2441,2443,3,572,286,0,
        2442,2439,1,0,0,0,2442,2443,1,0,0,0,2443,2445,1,0,0,0,2444,2446,
        5,672,0,0,2445,2444,1,0,0,0,2445,2446,1,0,0,0,2446,2447,1,0,0,0,
        2447,2449,5,407,0,0,2448,2450,5,1117,0,0,2449,2448,1,0,0,0,2449,
        2450,1,0,0,0,2450,2451,1,0,0,0,2451,2452,3,554,277,0,2452,143,1,
        0,0,0,2453,2457,5,7,0,0,2454,2455,5,334,0,0,2455,2456,5,1117,0,0,
        2456,2458,7,10,0,0,2457,2454,1,0,0,0,2457,2458,1,0,0,0,2458,2460,
        1,0,0,0,2459,2461,3,62,31,0,2460,2459,1,0,0,0,2460,2461,1,0,0,0,
        2461,2465,1,0,0,0,2462,2463,5,158,0,0,2463,2464,5,604,0,0,2464,2466,
        7,11,0,0,2465,2462,1,0,0,0,2465,2466,1,0,0,0,2466,2467,1,0,0,0,2467,
        2468,5,669,0,0,2468,2473,3,536,268,0,2469,2470,5,1126,0,0,2470,2471,
        3,596,298,0,2471,2472,5,1127,0,0,2472,2474,1,0,0,0,2473,2469,1,0,
        0,0,2473,2474,1,0,0,0,2474,2475,1,0,0,0,2475,2476,5,12,0,0,2476,
        2483,3,196,98,0,2477,2479,5,190,0,0,2478,2480,7,12,0,0,2479,2478,
        1,0,0,0,2479,2480,1,0,0,0,2480,2481,1,0,0,0,2481,2482,5,26,0,0,2482,
        2484,5,119,0,0,2483,2477,1,0,0,0,2483,2484,1,0,0,0,2484,145,1,0,
        0,0,2485,2492,3,104,52,0,2486,2488,5,1128,0,0,2487,2486,1,0,0,0,
        2487,2488,1,0,0,0,2488,2489,1,0,0,0,2489,2491,3,104,52,0,2490,2487,
        1,0,0,0,2491,2494,1,0,0,0,2492,2490,1,0,0,0,2492,2493,1,0,0,0,2493,
        2867,1,0,0,0,2494,2492,1,0,0,0,2495,2497,5,5,0,0,2496,2498,5,28,
        0,0,2497,2496,1,0,0,0,2497,2498,1,0,0,0,2498,2499,1,0,0,0,2499,2500,
        3,564,282,0,2500,2504,3,90,45,0,2501,2505,5,428,0,0,2502,2503,5,
        332,0,0,2503,2505,3,564,282,0,2504,2501,1,0,0,0,2504,2502,1,0,0,
        0,2504,2505,1,0,0,0,2505,2867,1,0,0,0,2506,2508,5,5,0,0,2507,2509,
        5,28,0,0,2508,2507,1,0,0,0,2508,2509,1,0,0,0,2509,2510,1,0,0,0,2510,
        2511,5,1126,0,0,2511,2512,3,564,282,0,2512,2519,3,90,45,0,2513,2514,
        5,1128,0,0,2514,2515,3,564,282,0,2515,2516,3,90,45,0,2516,2518,1,
        0,0,0,2517,2513,1,0,0,0,2518,2521,1,0,0,0,2519,2517,1,0,0,0,2519,
        2520,1,0,0,0,2520,2522,1,0,0,0,2521,2519,1,0,0,0,2522,2523,5,1127,
        0,0,2523,2867,1,0,0,0,2524,2525,5,5,0,0,2525,2527,7,20,0,0,2526,
        2528,3,564,282,0,2527,2526,1,0,0,0,2527,2528,1,0,0,0,2528,2530,1,
        0,0,0,2529,2531,3,74,37,0,2530,2529,1,0,0,0,2530,2531,1,0,0,0,2531,
        2532,1,0,0,0,2532,2536,3,602,301,0,2533,2535,3,76,38,0,2534,2533,
        1,0,0,0,2535,2538,1,0,0,0,2536,2534,1,0,0,0,2536,2537,1,0,0,0,2537,
        2867,1,0,0,0,2538,2536,1,0,0,0,2539,2544,5,5,0,0,2540,2542,5,30,
        0,0,2541,2543,3,564,282,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,
        2545,1,0,0,0,2544,2540,1,0,0,0,2544,2545,1,0,0,0,2545,2546,1,0,0,
        0,2546,2547,5,129,0,0,2547,2549,5,90,0,0,2548,2550,3,564,282,0,2549,
        2548,1,0,0,0,2549,2550,1,0,0,0,2550,2552,1,0,0,0,2551,2553,3,74,
        37,0,2552,2551,1,0,0,0,2552,2553,1,0,0,0,2553,2554,1,0,0,0,2554,
        2558,3,602,301,0,2555,2557,3,76,38,0,2556,2555,1,0,0,0,2557,2560,
        1,0,0,0,2558,2556,1,0,0,0,2558,2559,1,0,0,0,2559,2867,1,0,0,0,2560,
        2558,1,0,0,0,2561,2566,5,5,0,0,2562,2564,5,30,0,0,2563,2565,3,564,
        282,0,2564,2563,1,0,0,0,2564,2565,1,0,0,0,2565,2567,1,0,0,0,2566,
        2562,1,0,0,0,2566,2567,1,0,0,0,2567,2568,1,0,0,0,2568,2570,5,179,
        0,0,2569,2571,7,20,0,0,2570,2569,1,0,0,0,2570,2571,1,0,0,0,2571,
        2573,1,0,0,0,2572,2574,3,564,282,0,2573,2572,1,0,0,0,2573,2574,1,
        0,0,0,2574,2576,1,0,0,0,2575,2577,3,74,37,0,2576,2575,1,0,0,0,2576,
        2577,1,0,0,0,2577,2578,1,0,0,0,2578,2582,3,602,301,0,2579,2581,3,
        76,38,0,2580,2579,1,0,0,0,2581,2584,1,0,0,0,2582,2580,1,0,0,0,2582,
        2583,1,0,0,0,2583,2867,1,0,0,0,2584,2582,1,0,0,0,2585,2586,5,5,0,
        0,2586,2588,7,22,0,0,2587,2589,7,20,0,0,2588,2587,1,0,0,0,2588,2589,
        1,0,0,0,2589,2591,1,0,0,0,2590,2592,3,564,282,0,2591,2590,1,0,0,
        0,2591,2592,1,0,0,0,2592,2593,1,0,0,0,2593,2597,3,602,301,0,2594,
        2596,3,76,38,0,2595,2594,1,0,0,0,2596,2599,1,0,0,0,2597,2595,1,0,
        0,0,2597,2598,1,0,0,0,2598,2867,1,0,0,0,2599,2597,1,0,0,0,2600,2605,
        5,5,0,0,2601,2603,5,30,0,0,2602,2604,3,564,282,0,2603,2602,1,0,0,
        0,2603,2604,1,0,0,0,2604,2606,1,0,0,0,2605,2601,1,0,0,0,2605,2606,
        1,0,0,0,2606,2607,1,0,0,0,2607,2608,5,66,0,0,2608,2610,5,90,0,0,
        2609,2611,3,564,282,0,2610,2609,1,0,0,0,2610,2611,1,0,0,0,2611,2612,
        1,0,0,0,2612,2613,3,602,301,0,2613,2614,3,96,48,0,2614,2867,1,0,
        0,0,2615,2620,5,5,0,0,2616,2618,5,30,0,0,2617,2619,3,564,282,0,2618,
        2617,1,0,0,0,2618,2619,1,0,0,0,2619,2621,1,0,0,0,2620,2616,1,0,0,
        0,2620,2621,1,0,0,0,2621,2622,1,0,0,0,2622,2623,5,26,0,0,2623,2624,
        5,1126,0,0,2624,2625,3,668,334,0,2625,2626,5,1127,0,0,2626,2867,
        1,0,0,0,2627,2629,5,334,0,0,2628,2630,5,1117,0,0,2629,2628,1,0,0,
        0,2629,2630,1,0,0,0,2630,2631,1,0,0,0,2631,2867,7,34,0,0,2632,2634,
        5,7,0,0,2633,2635,5,28,0,0,2634,2633,1,0,0,0,2634,2635,1,0,0,0,2635,
        2636,1,0,0,0,2636,2642,3,564,282,0,2637,2638,5,152,0,0,2638,2639,
        5,42,0,0,2639,2643,3,614,307,0,2640,2641,5,51,0,0,2641,2643,5,42,
        0,0,2642,2637,1,0,0,0,2642,2640,1,0,0,0,2643,2867,1,0,0,0,2644,2646,
        5,24,0,0,2645,2647,5,28,0,0,2646,2645,1,0,0,0,2646,2647,1,0,0,0,
        2647,2648,1,0,0,0,2648,2649,3,564,282,0,2649,2650,3,564,282,0,2650,
        2654,3,90,45,0,2651,2655,5,428,0,0,2652,2653,5,332,0,0,2653,2655,
        3,564,282,0,2654,2651,1,0,0,0,2654,2652,1,0,0,0,2654,2655,1,0,0,
        0,2655,2867,1,0,0,0,2656,2657,5,138,0,0,2657,2658,5,28,0,0,2658,
        2659,3,564,282,0,2659,2660,5,173,0,0,2660,2661,3,564,282,0,2661,
        2867,1,0,0,0,2662,2664,5,102,0,0,2663,2665,5,1117,0,0,2664,2663,
        1,0,0,0,2664,2665,1,0,0,0,2665,2666,1,0,0,0,2666,2867,7,4,0,0,2667,
        2669,5,510,0,0,2668,2670,5,28,0,0,2669,2668,1,0,0,0,2669,2670,1,
        0,0,0,2670,2671,1,0,0,0,2671,2672,3,564,282,0,2672,2676,3,90,45,
        0,2673,2677,5,428,0,0,2674,2675,5,332,0,0,2675,2677,3,564,282,0,
        2676,2673,1,0,0,0,2676,2674,1,0,0,0,2676,2677,1,0,0,0,2677,2867,
        1,0,0,0,2678,2680,5,51,0,0,2679,2681,5,28,0,0,2680,2679,1,0,0,0,
        2680,2681,1,0,0,0,2681,2682,1,0,0,0,2682,2684,3,564,282,0,2683,2685,
        5,143,0,0,2684,2683,1,0,0,0,2684,2685,1,0,0,0,2685,2867,1,0,0,0,
        2686,2687,5,51,0,0,2687,2688,7,35,0,0,2688,2867,3,564,282,0,2689,
        2690,5,51,0,0,2690,2691,5,129,0,0,2691,2867,5,90,0,0,2692,2693,5,
        51,0,0,2693,2694,7,20,0,0,2694,2867,3,564,282,0,2695,2696,5,138,
        0,0,2696,2697,7,20,0,0,2697,2698,3,564,282,0,2698,2699,5,173,0,0,
        2699,2700,3,564,282,0,2700,2867,1,0,0,0,2701,2702,5,7,0,0,2702,2703,
        5,80,0,0,2703,2704,3,564,282,0,2704,2705,7,15,0,0,2705,2867,1,0,
        0,0,2706,2707,5,51,0,0,2707,2708,5,66,0,0,2708,2709,5,90,0,0,2709,
        2867,3,564,282,0,2710,2711,5,394,0,0,2711,2867,5,91,0,0,2712,2713,
        5,401,0,0,2713,2867,5,91,0,0,2714,2716,5,138,0,0,2715,2717,7,36,
        0,0,2716,2715,1,0,0,0,2716,2717,1,0,0,0,2717,2720,1,0,0,0,2718,2721,
        3,564,282,0,2719,2721,3,536,268,0,2720,2718,1,0,0,0,2720,2719,1,
        0,0,0,2721,2867,1,0,0,0,2722,2723,5,123,0,0,2723,2724,5,19,0,0,2724,
        2867,3,596,298,0,2725,2726,5,32,0,0,2726,2727,5,173,0,0,2727,2728,
        5,25,0,0,2728,2729,5,152,0,0,2729,2732,3,550,275,0,2730,2731,5,27,
        0,0,2731,2733,3,552,276,0,2732,2730,1,0,0,0,2732,2733,1,0,0,0,2733,
        2867,1,0,0,0,2734,2736,5,42,0,0,2735,2734,1,0,0,0,2735,2736,1,0,
        0,0,2736,2737,1,0,0,0,2737,2738,5,25,0,0,2738,2739,5,152,0,0,2739,
        2740,5,1117,0,0,2740,2744,3,550,275,0,2741,2742,5,27,0,0,2742,2743,
        5,1117,0,0,2743,2745,3,552,276,0,2744,2741,1,0,0,0,2744,2745,1,0,
        0,0,2745,2867,1,0,0,0,2746,2747,5,395,0,0,2747,2867,5,645,0,0,2748,
        2749,5,448,0,0,2749,2867,5,645,0,0,2750,2867,5,65,0,0,2751,2752,
        7,37,0,0,2752,2867,5,666,0,0,2753,2754,5,5,0,0,2754,2755,5,128,0,
        0,2755,2756,5,1126,0,0,2756,2761,3,116,58,0,2757,2758,5,1128,0,0,
        2758,2760,3,116,58,0,2759,2757,1,0,0,0,2760,2763,1,0,0,0,2761,2759,
        1,0,0,0,2761,2762,1,0,0,0,2762,2764,1,0,0,0,2763,2761,1,0,0,0,2764,
        2765,5,1127,0,0,2765,2867,1,0,0,0,2766,2767,5,51,0,0,2767,2768,5,
        128,0,0,2768,2867,3,596,298,0,2769,2770,5,395,0,0,2770,2773,5,128,
        0,0,2771,2774,3,596,298,0,2772,2774,5,6,0,0,2773,2771,1,0,0,0,2773,
        2772,1,0,0,0,2774,2775,1,0,0,0,2775,2867,5,645,0,0,2776,2777,5,448,
        0,0,2777,2780,5,128,0,0,2778,2781,3,596,298,0,2779,2781,5,6,0,0,
        2780,2778,1,0,0,0,2780,2779,1,0,0,0,2781,2782,1,0,0,0,2782,2867,
        5,645,0,0,2783,2784,5,654,0,0,2784,2787,5,128,0,0,2785,2788,3,596,
        298,0,2786,2788,5,6,0,0,2787,2785,1,0,0,0,2787,2786,1,0,0,0,2788,
        2867,1,0,0,0,2789,2790,5,361,0,0,2790,2791,5,128,0,0,2791,2867,3,
        570,285,0,2792,2793,5,577,0,0,2793,2794,5,128,0,0,2794,2795,3,596,
        298,0,2795,2796,5,86,0,0,2796,2797,5,1126,0,0,2797,2802,3,116,58,
        0,2798,2799,5,1128,0,0,2799,2801,3,116,58,0,2800,2798,1,0,0,0,2801,
        2804,1,0,0,0,2802,2800,1,0,0,0,2802,2803,1,0,0,0,2803,2805,1,0,0,
        0,2804,2802,1,0,0,0,2805,2806,5,1127,0,0,2806,2867,1,0,0,0,2807,
        2808,5,416,0,0,2808,2809,5,128,0,0,2809,2810,3,564,282,0,2810,2811,
        5,190,0,0,2811,2812,5,170,0,0,2812,2815,3,538,269,0,2813,2814,7,
        37,0,0,2814,2816,5,666,0,0,2815,2813,1,0,0,0,2815,2816,1,0,0,0,2816,
        2867,1,0,0,0,2817,2818,5,9,0,0,2818,2821,5,128,0,0,2819,2822,3,596,
        298,0,2820,2822,5,6,0,0,2821,2819,1,0,0,0,2821,2820,1,0,0,0,2822,
        2867,1,0,0,0,2823,2824,5,26,0,0,2824,2827,5,128,0,0,2825,2828,3,
        596,298,0,2826,2828,5,6,0,0,2827,2825,1,0,0,0,2827,2826,1,0,0,0,
        2828,2867,1,0,0,0,2829,2830,5,118,0,0,2830,2833,5,128,0,0,2831,2834,
        3,596,298,0,2832,2834,5,6,0,0,2833,2831,1,0,0,0,2833,2832,1,0,0,
        0,2834,2867,1,0,0,0,2835,2836,5,567,0,0,2836,2839,5,128,0,0,2837,
        2840,3,596,298,0,2838,2840,5,6,0,0,2839,2837,1,0,0,0,2839,2838,1,
        0,0,0,2840,2867,1,0,0,0,2841,2842,5,578,0,0,2842,2845,5,128,0,0,
        2843,2846,3,596,298,0,2844,2846,5,6,0,0,2845,2843,1,0,0,0,2845,2844,
        1,0,0,0,2846,2867,1,0,0,0,2847,2848,5,576,0,0,2848,2867,5,547,0,
        0,2849,2850,5,662,0,0,2850,2867,5,547,0,0,2851,2853,5,5,0,0,2852,
        2854,5,28,0,0,2853,2852,1,0,0,0,2853,2854,1,0,0,0,2854,2855,1,0,
        0,0,2855,2856,5,1126,0,0,2856,2861,3,88,44,0,2857,2858,5,1128,0,
        0,2858,2860,3,88,44,0,2859,2857,1,0,0,0,2860,2863,1,0,0,0,2861,2859,
        1,0,0,0,2861,2862,1,0,0,0,2862,2864,1,0,0,0,2863,2861,1,0,0,0,2864,
        2865,5,1127,0,0,2865,2867,1,0,0,0,2866,2485,1,0,0,0,2866,2495,1,
        0,0,0,2866,2506,1,0,0,0,2866,2524,1,0,0,0,2866,2539,1,0,0,0,2866,
        2561,1,0,0,0,2866,2585,1,0,0,0,2866,2600,1,0,0,0,2866,2615,1,0,0,
        0,2866,2627,1,0,0,0,2866,2632,1,0,0,0,2866,2644,1,0,0,0,2866,2656,
        1,0,0,0,2866,2662,1,0,0,0,2866,2667,1,0,0,0,2866,2678,1,0,0,0,2866,
        2686,1,0,0,0,2866,2689,1,0,0,0,2866,2692,1,0,0,0,2866,2695,1,0,0,
        0,2866,2701,1,0,0,0,2866,2706,1,0,0,0,2866,2710,1,0,0,0,2866,2712,
        1,0,0,0,2866,2714,1,0,0,0,2866,2722,1,0,0,0,2866,2725,1,0,0,0,2866,
        2735,1,0,0,0,2866,2746,1,0,0,0,2866,2748,1,0,0,0,2866,2750,1,0,0,
        0,2866,2751,1,0,0,0,2866,2753,1,0,0,0,2866,2766,1,0,0,0,2866,2769,
        1,0,0,0,2866,2776,1,0,0,0,2866,2783,1,0,0,0,2866,2789,1,0,0,0,2866,
        2792,1,0,0,0,2866,2807,1,0,0,0,2866,2817,1,0,0,0,2866,2823,1,0,0,
        0,2866,2829,1,0,0,0,2866,2835,1,0,0,0,2866,2841,1,0,0,0,2866,2847,
        1,0,0,0,2866,2849,1,0,0,0,2866,2851,1,0,0,0,2867,147,1,0,0,0,2868,
        2869,5,51,0,0,2869,2871,7,0,0,0,2870,2872,3,620,310,0,2871,2870,
        1,0,0,0,2871,2872,1,0,0,0,2872,2873,1,0,0,0,2873,2874,3,564,282,
        0,2874,149,1,0,0,0,2875,2876,5,51,0,0,2876,2878,5,413,0,0,2877,2879,
        3,620,310,0,2878,2877,1,0,0,0,2878,2879,1,0,0,0,2879,2880,1,0,0,
        0,2880,2881,3,536,268,0,2881,151,1,0,0,0,2882,2883,5,51,0,0,2883,
        2885,5,80,0,0,2884,2886,7,1,0,0,2885,2884,1,0,0,0,2885,2886,1,0,
        0,0,2886,2887,1,0,0,0,2887,2888,3,564,282,0,2888,2889,5,117,0,0,
        2889,2902,3,538,269,0,2890,2892,5,334,0,0,2891,2893,5,1117,0,0,2892,
        2891,1,0,0,0,2892,2893,1,0,0,0,2893,2894,1,0,0,0,2894,2901,7,3,0,
        0,2895,2897,5,102,0,0,2896,2898,5,1117,0,0,2897,2896,1,0,0,0,2897,
        2898,1,0,0,0,2898,2899,1,0,0,0,2899,2901,7,4,0,0,2900,2890,1,0,0,
        0,2900,2895,1,0,0,0,2901,2904,1,0,0,0,2902,2900,1,0,0,0,2902,2903,
        1,0,0,0,2903,153,1,0,0,0,2904,2902,1,0,0,0,2905,2906,5,51,0,0,2906,
        2907,5,473,0,0,2907,2908,5,72,0,0,2908,2909,3,564,282,0,2909,2910,
        5,407,0,0,2910,2911,5,1117,0,0,2911,2912,3,554,277,0,2912,155,1,
        0,0,0,2913,2914,5,51,0,0,2914,2916,5,130,0,0,2915,2917,3,620,310,
        0,2916,2915,1,0,0,0,2916,2917,1,0,0,0,2917,2918,1,0,0,0,2918,2919,
        3,536,268,0,2919,157,1,0,0,0,2920,2921,5,51,0,0,2921,2923,5,435,
        0,0,2922,2924,3,620,310,0,2923,2922,1,0,0,0,2923,2924,1,0,0,0,2924,
        2925,1,0,0,0,2925,2926,3,536,268,0,2926,159,1,0,0,0,2927,2928,5,
        51,0,0,2928,2930,5,606,0,0,2929,2931,3,620,310,0,2930,2929,1,0,0,
        0,2930,2931,1,0,0,0,2931,2932,1,0,0,0,2932,2933,3,564,282,0,2933,
        161,1,0,0,0,2934,2936,5,51,0,0,2935,2937,5,647,0,0,2936,2935,1,0,
        0,0,2936,2937,1,0,0,0,2937,2938,1,0,0,0,2938,2940,5,170,0,0,2939,
        2941,3,620,310,0,2940,2939,1,0,0,0,2940,2941,1,0,0,0,2941,2942,1,
        0,0,0,2942,2944,3,600,300,0,2943,2945,7,38,0,0,2944,2943,1,0,0,0,
        2944,2945,1,0,0,0,2945,163,1,0,0,0,2946,2947,5,51,0,0,2947,2948,
        5,645,0,0,2948,2954,3,564,282,0,2949,2951,5,407,0,0,2950,2952,5,
        1117,0,0,2951,2950,1,0,0,0,2951,2952,1,0,0,0,2952,2953,1,0,0,0,2953,
        2955,3,554,277,0,2954,2949,1,0,0,0,2954,2955,1,0,0,0,2955,165,1,
        0,0,0,2956,2957,5,51,0,0,2957,2959,5,175,0,0,2958,2960,3,620,310,
        0,2959,2958,1,0,0,0,2959,2960,1,0,0,0,2960,2961,1,0,0,0,2961,2962,
        3,536,268,0,2962,167,1,0,0,0,2963,2964,5,51,0,0,2964,2966,5,669,
        0,0,2965,2967,3,620,310,0,2966,2965,1,0,0,0,2966,2967,1,0,0,0,2967,
        2968,1,0,0,0,2968,2973,3,536,268,0,2969,2970,5,1128,0,0,2970,2972,
        3,536,268,0,2971,2969,1,0,0,0,2972,2975,1,0,0,0,2973,2971,1,0,0,
        0,2973,2974,1,0,0,0,2974,2977,1,0,0,0,2975,2973,1,0,0,0,2976,2978,
        7,38,0,0,2977,2976,1,0,0,0,2977,2978,1,0,0,0,2978,169,1,0,0,0,2979,
        2980,5,51,0,0,2980,2982,5,594,0,0,2981,2983,3,620,310,0,2982,2981,
        1,0,0,0,2982,2983,1,0,0,0,2983,2984,1,0,0,0,2984,2989,3,540,270,
        0,2985,2986,5,1128,0,0,2986,2988,3,540,270,0,2987,2985,1,0,0,0,2988,
        2991,1,0,0,0,2989,2987,1,0,0,0,2989,2990,1,0,0,0,2990,171,1,0,0,
        0,2991,2989,1,0,0,0,2992,2993,5,152,0,0,2993,2994,5,42,0,0,2994,
        3005,5,594,0,0,2995,3006,5,527,0,0,2996,3006,5,6,0,0,2997,3002,3,
        540,270,0,2998,2999,5,1128,0,0,2999,3001,3,540,270,0,3000,2998,1,
        0,0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,1,0,0,0,3003,
        3006,1,0,0,0,3004,3002,1,0,0,0,3005,2995,1,0,0,0,3005,2996,1,0,0,
        0,3005,2997,1,0,0,0,3006,3007,1,0,0,0,3007,3010,5,173,0,0,3008,3011,
        3,546,273,0,3009,3011,3,564,282,0,3010,3008,1,0,0,0,3010,3009,1,
        0,0,0,3011,3019,1,0,0,0,3012,3015,5,1128,0,0,3013,3016,3,546,273,
        0,3014,3016,3,564,282,0,3015,3013,1,0,0,0,3015,3014,1,0,0,0,3016,
        3018,1,0,0,0,3017,3012,1,0,0,0,3018,3021,1,0,0,0,3019,3017,1,0,0,
        0,3019,3020,1,0,0,0,3020,3026,1,0,0,0,3021,3019,1,0,0,0,3022,3023,
        5,152,0,0,3023,3024,5,594,0,0,3024,3026,3,426,213,0,3025,2992,1,
        0,0,0,3025,3022,1,0,0,0,3026,173,1,0,0,0,3027,3028,5,138,0,0,3028,
        3029,5,170,0,0,3029,3034,3,176,88,0,3030,3031,5,1128,0,0,3031,3033,
        3,176,88,0,3032,3030,1,0,0,0,3033,3036,1,0,0,0,3034,3032,1,0,0,0,
        3034,3035,1,0,0,0,3035,175,1,0,0,0,3036,3034,1,0,0,0,3037,3038,3,
        538,269,0,3038,3039,5,173,0,0,3039,3040,3,538,269,0,3040,177,1,0,
        0,0,3041,3043,5,654,0,0,3042,3044,5,170,0,0,3043,3042,1,0,0,0,3043,
        3044,1,0,0,0,3044,3045,1,0,0,0,3045,3046,3,538,269,0,3046,179,1,
        0,0,0,3047,3048,5,20,0,0,3048,3055,3,536,268,0,3049,3052,5,1126,
        0,0,3050,3053,3,608,304,0,3051,3053,3,604,302,0,3052,3050,1,0,0,
        0,3052,3051,1,0,0,0,3052,3053,1,0,0,0,3053,3054,1,0,0,0,3054,3056,
        5,1127,0,0,3055,3049,1,0,0,0,3055,3056,1,0,0,0,3056,181,1,0,0,0,
        3057,3060,3,208,104,0,3058,3060,3,210,105,0,3059,3057,1,0,0,0,3059,
        3058,1,0,0,0,3060,183,1,0,0,0,3061,3062,5,397,0,0,3062,3063,3,604,
        302,0,3063,185,1,0,0,0,3064,3069,3,212,106,0,3065,3069,3,214,107,
        0,3066,3069,3,216,108,0,3067,3069,3,218,109,0,3068,3064,1,0,0,0,
        3068,3065,1,0,0,0,3068,3066,1,0,0,0,3068,3067,1,0,0,0,3069,187,1,
        0,0,0,3070,3072,5,84,0,0,3071,3073,7,39,0,0,3072,3071,1,0,0,0,3072,
        3073,1,0,0,0,3073,3075,1,0,0,0,3074,3076,5,77,0,0,3075,3074,1,0,
        0,0,3075,3076,1,0,0,0,3076,3078,1,0,0,0,3077,3079,5,86,0,0,3078,
        3077,1,0,0,0,3078,3079,1,0,0,0,3079,3080,1,0,0,0,3080,3087,3,538,
        269,0,3081,3082,5,128,0,0,3082,3084,5,1126,0,0,3083,3085,3,596,298,
        0,3084,3083,1,0,0,0,3084,3085,1,0,0,0,3085,3086,1,0,0,0,3086,3088,
        5,1127,0,0,3087,3081,1,0,0,0,3087,3088,1,0,0,0,3088,3105,1,0,0,0,
        3089,3090,5,1126,0,0,3090,3091,3,598,299,0,3091,3092,5,1127,0,0,
        3092,3094,1,0,0,0,3093,3089,1,0,0,0,3093,3094,1,0,0,0,3094,3095,
        1,0,0,0,3095,3106,3,200,100,0,3096,3097,5,152,0,0,3097,3102,3,202,
        101,0,3098,3099,5,1128,0,0,3099,3101,3,202,101,0,3100,3098,1,0,0,
        0,3101,3104,1,0,0,0,3102,3100,1,0,0,0,3102,3103,1,0,0,0,3103,3106,
        1,0,0,0,3104,3102,1,0,0,0,3105,3093,1,0,0,0,3105,3096,1,0,0,0,3106,
        3119,1,0,0,0,3107,3108,5,117,0,0,3108,3109,5,399,0,0,3109,3110,5,
        90,0,0,3110,3111,5,182,0,0,3111,3116,3,202,101,0,3112,3113,5,1128,
        0,0,3113,3115,3,202,101,0,3114,3112,1,0,0,0,3115,3118,1,0,0,0,3116,
        3114,1,0,0,0,3116,3117,1,0,0,0,3117,3120,1,0,0,0,3118,3116,1,0,0,
        0,3119,3107,1,0,0,0,3119,3120,1,0,0,0,3120,189,1,0,0,0,3121,3122,
        5,101,0,0,3122,3124,5,386,0,0,3123,3125,7,40,0,0,3124,3123,1,0,0,
        0,3124,3125,1,0,0,0,3125,3127,1,0,0,0,3126,3128,5,472,0,0,3127,3126,
        1,0,0,0,3127,3128,1,0,0,0,3128,3129,1,0,0,0,3129,3130,5,81,0,0,3130,
        3132,5,1141,0,0,3131,3133,7,6,0,0,3132,3131,1,0,0,0,3132,3133,1,
        0,0,0,3133,3134,1,0,0,0,3134,3135,5,86,0,0,3135,3136,5,170,0,0,3136,
        3142,3,538,269,0,3137,3138,5,128,0,0,3138,3139,5,1126,0,0,3139,3140,
        3,596,298,0,3140,3141,5,1127,0,0,3141,3143,1,0,0,0,3142,3137,1,0,
        0,0,3142,3143,1,0,0,0,3143,3147,1,0,0,0,3144,3145,5,25,0,0,3145,
        3146,5,152,0,0,3146,3148,3,550,275,0,3147,3144,1,0,0,0,3147,3148,
        1,0,0,0,3148,3155,1,0,0,0,3149,3151,7,41,0,0,3150,3152,3,272,136,
        0,3151,3150,1,0,0,0,3152,3153,1,0,0,0,3153,3151,1,0,0,0,3153,3154,
        1,0,0,0,3154,3156,1,0,0,0,3155,3149,1,0,0,0,3155,3156,1,0,0,0,3156,
        3163,1,0,0,0,3157,3159,5,100,0,0,3158,3160,3,274,137,0,3159,3158,
        1,0,0,0,3160,3161,1,0,0,0,3161,3159,1,0,0,0,3161,3162,1,0,0,0,3162,
        3164,1,0,0,0,3163,3157,1,0,0,0,3163,3164,1,0,0,0,3164,3169,1,0,0,
        0,3165,3166,5,77,0,0,3166,3167,3,570,285,0,3167,3168,7,42,0,0,3168,
        3170,1,0,0,0,3169,3165,1,0,0,0,3169,3170,1,0,0,0,3170,3182,1,0,0,
        0,3171,3172,5,1126,0,0,3172,3177,3,204,102,0,3173,3174,5,1128,0,
        0,3174,3176,3,204,102,0,3175,3173,1,0,0,0,3176,3179,1,0,0,0,3177,
        3175,1,0,0,0,3177,3178,1,0,0,0,3178,3180,1,0,0,0,3179,3177,1,0,0,
        0,3180,3181,5,1127,0,0,3181,3183,1,0,0,0,3182,3171,1,0,0,0,3182,
        3183,1,0,0,0,3183,3193,1,0,0,0,3184,3185,5,152,0,0,3185,3190,3,202,
        101,0,3186,3187,5,1128,0,0,3187,3189,3,202,101,0,3188,3186,1,0,0,
        0,3189,3192,1,0,0,0,3190,3188,1,0,0,0,3190,3191,1,0,0,0,3191,3194,
        1,0,0,0,3192,3190,1,0,0,0,3193,3184,1,0,0,0,3193,3194,1,0,0,0,3194,
        191,1,0,0,0,3195,3196,5,101,0,0,3196,3198,5,680,0,0,3197,3199,7,
        40,0,0,3198,3197,1,0,0,0,3198,3199,1,0,0,0,3199,3201,1,0,0,0,3200,
        3202,5,472,0,0,3201,3200,1,0,0,0,3201,3202,1,0,0,0,3202,3203,1,0,
        0,0,3203,3204,5,81,0,0,3204,3206,5,1141,0,0,3205,3207,7,6,0,0,3206,
        3205,1,0,0,0,3206,3207,1,0,0,0,3207,3208,1,0,0,0,3208,3209,5,86,
        0,0,3209,3210,5,170,0,0,3210,3214,3,538,269,0,3211,3212,5,25,0,0,
        3212,3213,5,152,0,0,3213,3215,3,550,275,0,3214,3211,1,0,0,0,3214,
        3215,1,0,0,0,3215,3222,1,0,0,0,3216,3217,5,599,0,0,3217,3218,5,446,
        0,0,3218,3219,5,19,0,0,3219,3220,5,1119,0,0,3220,3221,5,1141,0,0,
        3221,3223,5,1118,0,0,3222,3216,1,0,0,0,3222,3223,1,0,0,0,3223,3228,
        1,0,0,0,3224,3225,5,77,0,0,3225,3226,3,570,285,0,3226,3227,7,42,
        0,0,3227,3229,1,0,0,0,3228,3224,1,0,0,0,3228,3229,1,0,0,0,3229,3241,
        1,0,0,0,3230,3231,5,1126,0,0,3231,3236,3,204,102,0,3232,3233,5,1128,
        0,0,3233,3235,3,204,102,0,3234,3232,1,0,0,0,3235,3238,1,0,0,0,3236,
        3234,1,0,0,0,3236,3237,1,0,0,0,3237,3239,1,0,0,0,3238,3236,1,0,0,
        0,3239,3240,5,1127,0,0,3240,3242,1,0,0,0,3241,3230,1,0,0,0,3241,
        3242,1,0,0,0,3242,3252,1,0,0,0,3243,3244,5,152,0,0,3244,3249,3,202,
        101,0,3245,3246,5,1128,0,0,3246,3248,3,202,101,0,3247,3245,1,0,0,
        0,3248,3251,1,0,0,0,3249,3247,1,0,0,0,3249,3250,1,0,0,0,3250,3253,
        1,0,0,0,3251,3249,1,0,0,0,3252,3243,1,0,0,0,3252,3253,1,0,0,0,3253,
        193,1,0,0,0,3254,3256,5,140,0,0,3255,3257,7,43,0,0,3256,3255,1,0,
        0,0,3256,3257,1,0,0,0,3257,3259,1,0,0,0,3258,3260,5,86,0,0,3259,
        3258,1,0,0,0,3259,3260,1,0,0,0,3260,3261,1,0,0,0,3261,3267,3,538,
        269,0,3262,3263,5,128,0,0,3263,3264,5,1126,0,0,3264,3265,3,596,298,
        0,3265,3266,5,1127,0,0,3266,3268,1,0,0,0,3267,3262,1,0,0,0,3267,
        3268,1,0,0,0,3268,3285,1,0,0,0,3269,3270,5,1126,0,0,3270,3271,3,
        596,298,0,3271,3272,5,1127,0,0,3272,3274,1,0,0,0,3273,3269,1,0,0,
        0,3273,3274,1,0,0,0,3274,3275,1,0,0,0,3275,3286,3,200,100,0,3276,
        3277,5,152,0,0,3277,3282,3,202,101,0,3278,3279,5,1128,0,0,3279,3281,
        3,202,101,0,3280,3278,1,0,0,0,3281,3284,1,0,0,0,3282,3280,1,0,0,
        0,3282,3283,1,0,0,0,3283,3286,1,0,0,0,3284,3282,1,0,0,0,3285,3273,
        1,0,0,0,3285,3276,1,0,0,0,3286,195,1,0,0,0,3287,3289,3,244,122,0,
        3288,3290,3,206,103,0,3289,3288,1,0,0,0,3289,3290,1,0,0,0,3290,3350,
        1,0,0,0,3291,3293,3,240,120,0,3292,3294,3,206,103,0,3293,3292,1,
        0,0,0,3293,3294,1,0,0,0,3294,3350,1,0,0,0,3295,3297,3,246,123,0,
        3296,3298,3,250,125,0,3297,3296,1,0,0,0,3298,3299,1,0,0,0,3299,3297,
        1,0,0,0,3299,3300,1,0,0,0,3300,3309,1,0,0,0,3301,3303,5,178,0,0,
        3302,3304,7,44,0,0,3303,3302,1,0,0,0,3303,3304,1,0,0,0,3304,3307,
        1,0,0,0,3305,3308,3,244,122,0,3306,3308,3,240,120,0,3307,3305,1,
        0,0,0,3307,3306,1,0,0,0,3308,3310,1,0,0,0,3309,3301,1,0,0,0,3309,
        3310,1,0,0,0,3310,3312,1,0,0,0,3311,3313,3,224,112,0,3312,3311,1,
        0,0,0,3312,3313,1,0,0,0,3313,3315,1,0,0,0,3314,3316,3,286,143,0,
        3315,3314,1,0,0,0,3315,3316,1,0,0,0,3316,3318,1,0,0,0,3317,3319,
        3,206,103,0,3318,3317,1,0,0,0,3318,3319,1,0,0,0,3319,3350,1,0,0,
        0,3320,3322,3,242,121,0,3321,3323,3,248,124,0,3322,3321,1,0,0,0,
        3323,3324,1,0,0,0,3324,3322,1,0,0,0,3324,3325,1,0,0,0,3325,3331,
        1,0,0,0,3326,3328,5,178,0,0,3327,3329,7,44,0,0,3328,3327,1,0,0,0,
        3328,3329,1,0,0,0,3329,3330,1,0,0,0,3330,3332,3,240,120,0,3331,3326,
        1,0,0,0,3331,3332,1,0,0,0,3332,3334,1,0,0,0,3333,3335,3,224,112,
        0,3334,3333,1,0,0,0,3334,3335,1,0,0,0,3335,3337,1,0,0,0,3336,3338,
        3,286,143,0,3337,3336,1,0,0,0,3337,3338,1,0,0,0,3338,3340,1,0,0,
        0,3339,3341,3,206,103,0,3340,3339,1,0,0,0,3340,3341,1,0,0,0,3341,
        3350,1,0,0,0,3342,3345,3,246,123,0,3343,3344,5,1128,0,0,3344,3346,
        3,252,126,0,3345,3343,1,0,0,0,3346,3347,1,0,0,0,3347,3345,1,0,0,
        0,3347,3348,1,0,0,0,3348,3350,1,0,0,0,3349,3287,1,0,0,0,3349,3291,
        1,0,0,0,3349,3295,1,0,0,0,3349,3320,1,0,0,0,3349,3342,1,0,0,0,3350,
        197,1,0,0,0,3351,3354,3,220,110,0,3352,3354,3,222,111,0,3353,3351,
        1,0,0,0,3353,3352,1,0,0,0,3354,199,1,0,0,0,3355,3374,3,196,98,0,
        3356,3357,7,45,0,0,3357,3359,5,1126,0,0,3358,3360,3,606,303,0,3359,
        3358,1,0,0,0,3359,3360,1,0,0,0,3360,3361,1,0,0,0,3361,3370,5,1127,
        0,0,3362,3363,5,1128,0,0,3363,3365,5,1126,0,0,3364,3366,3,606,303,
        0,3365,3364,1,0,0,0,3365,3366,1,0,0,0,3366,3367,1,0,0,0,3367,3369,
        5,1127,0,0,3368,3362,1,0,0,0,3369,3372,1,0,0,0,3370,3368,1,0,0,0,
        3370,3371,1,0,0,0,3371,3374,1,0,0,0,3372,3370,1,0,0,0,3373,3355,
        1,0,0,0,3373,3356,1,0,0,0,3374,201,1,0,0,0,3375,3376,3,542,271,0,
        3376,3379,5,1117,0,0,3377,3380,3,668,334,0,3378,3380,5,42,0,0,3379,
        3377,1,0,0,0,3379,3378,1,0,0,0,3380,203,1,0,0,0,3381,3384,3,564,
        282,0,3382,3384,5,1153,0,0,3383,3381,1,0,0,0,3383,3382,1,0,0,0,3384,
        205,1,0,0,0,3385,3386,5,64,0,0,3386,3392,5,182,0,0,3387,3388,5,102,
        0,0,3388,3389,5,79,0,0,3389,3390,5,608,0,0,3390,3392,5,509,0,0,3391,
        3385,1,0,0,0,3391,3387,1,0,0,0,3392,207,1,0,0,0,3393,3395,5,44,0,
        0,3394,3396,5,105,0,0,3395,3394,1,0,0,0,3395,3396,1,0,0,0,3396,3398,
        1,0,0,0,3397,3399,5,566,0,0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,
        3399,3401,1,0,0,0,3400,3402,5,77,0,0,3401,3400,1,0,0,0,3401,3402,
        1,0,0,0,3402,3403,1,0,0,0,3403,3404,5,67,0,0,3404,3410,3,538,269,
        0,3405,3406,5,128,0,0,3406,3407,5,1126,0,0,3407,3408,3,596,298,0,
        3408,3409,5,1127,0,0,3409,3411,1,0,0,0,3410,3405,1,0,0,0,3410,3411,
        1,0,0,0,3411,3414,1,0,0,0,3412,3413,5,188,0,0,3413,3415,3,668,334,
        0,3414,3412,1,0,0,0,3414,3415,1,0,0,0,3415,3417,1,0,0,0,3416,3418,
        3,224,112,0,3417,3416,1,0,0,0,3417,3418,1,0,0,0,3418,3421,1,0,0,
        0,3419,3420,5,98,0,0,3420,3422,3,288,144,0,3421,3419,1,0,0,0,3421,
        3422,1,0,0,0,3422,209,1,0,0,0,3423,3425,5,44,0,0,3424,3426,5,105,
        0,0,3425,3424,1,0,0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3429,
        5,566,0,0,3428,3427,1,0,0,0,3428,3429,1,0,0,0,3429,3431,1,0,0,0,
        3430,3432,5,77,0,0,3431,3430,1,0,0,0,3431,3432,1,0,0,0,3432,3472,
        1,0,0,0,3433,3436,3,538,269,0,3434,3435,5,1125,0,0,3435,3437,5,1110,
        0,0,3436,3434,1,0,0,0,3436,3437,1,0,0,0,3437,3446,1,0,0,0,3438,3439,
        5,1128,0,0,3439,3442,3,538,269,0,3440,3441,5,1125,0,0,3441,3443,
        5,1110,0,0,3442,3440,1,0,0,0,3442,3443,1,0,0,0,3443,3445,1,0,0,0,
        3444,3438,1,0,0,0,3445,3448,1,0,0,0,3446,3444,1,0,0,0,3446,3447,
        1,0,0,0,3447,3449,1,0,0,0,3448,3446,1,0,0,0,3449,3450,5,67,0,0,3450,
        3451,3,228,114,0,3451,3473,1,0,0,0,3452,3453,5,67,0,0,3453,3456,
        3,538,269,0,3454,3455,5,1125,0,0,3455,3457,5,1110,0,0,3456,3454,
        1,0,0,0,3456,3457,1,0,0,0,3457,3466,1,0,0,0,3458,3459,5,1128,0,0,
        3459,3462,3,538,269,0,3460,3461,5,1125,0,0,3461,3463,5,1110,0,0,
        3462,3460,1,0,0,0,3462,3463,1,0,0,0,3463,3465,1,0,0,0,3464,3458,
        1,0,0,0,3465,3468,1,0,0,0,3466,3464,1,0,0,0,3466,3467,1,0,0,0,3467,
        3469,1,0,0,0,3468,3466,1,0,0,0,3469,3470,5,185,0,0,3470,3471,3,228,
        114,0,3471,3473,1,0,0,0,3472,3433,1,0,0,0,3472,3452,1,0,0,0,3473,
        3476,1,0,0,0,3474,3475,5,188,0,0,3475,3477,3,668,334,0,3476,3474,
        1,0,0,0,3476,3477,1,0,0,0,3477,211,1,0,0,0,3478,3479,5,440,0,0,3479,
        3480,3,538,269,0,3480,3485,5,537,0,0,3481,3483,5,12,0,0,3482,3481,
        1,0,0,0,3482,3483,1,0,0,0,3483,3484,1,0,0,0,3484,3486,3,564,282,
        0,3485,3482,1,0,0,0,3485,3486,1,0,0,0,3486,213,1,0,0,0,3487,3488,
        5,440,0,0,3488,3489,3,538,269,0,3489,3490,5,133,0,0,3490,3497,3,
        564,282,0,3491,3492,3,676,338,0,3492,3493,5,1126,0,0,3493,3494,3,
        608,304,0,3494,3495,5,1127,0,0,3495,3498,1,0,0,0,3496,3498,7,46,
        0,0,3497,3491,1,0,0,0,3497,3496,1,0,0,0,3498,3501,1,0,0,0,3499,3500,
        5,188,0,0,3500,3502,3,668,334,0,3501,3499,1,0,0,0,3501,3502,1,0,
        0,0,3502,3505,1,0,0,0,3503,3504,5,98,0,0,3504,3506,3,288,144,0,3505,
        3503,1,0,0,0,3505,3506,1,0,0,0,3506,215,1,0,0,0,3507,3508,5,440,
        0,0,3508,3509,3,538,269,0,3509,3510,5,133,0,0,3510,3513,7,47,0,0,
        3511,3512,5,188,0,0,3512,3514,3,668,334,0,3513,3511,1,0,0,0,3513,
        3514,1,0,0,0,3514,3517,1,0,0,0,3515,3516,5,98,0,0,3516,3518,3,288,
        144,0,3517,3515,1,0,0,0,3517,3518,1,0,0,0,3518,217,1,0,0,0,3519,
        3520,5,440,0,0,3520,3521,3,538,269,0,3521,3522,5,359,0,0,3522,219,
        1,0,0,0,3523,3525,5,182,0,0,3524,3526,5,105,0,0,3525,3524,1,0,0,
        0,3525,3526,1,0,0,0,3526,3528,1,0,0,0,3527,3529,5,77,0,0,3528,3527,
        1,0,0,0,3528,3529,1,0,0,0,3529,3530,1,0,0,0,3530,3535,3,538,269,
        0,3531,3533,5,12,0,0,3532,3531,1,0,0,0,3532,3533,1,0,0,0,3533,3534,
        1,0,0,0,3534,3536,3,564,282,0,3535,3532,1,0,0,0,3535,3536,1,0,0,
        0,3536,3537,1,0,0,0,3537,3538,5,152,0,0,3538,3543,3,202,101,0,3539,
        3540,5,1128,0,0,3540,3542,3,202,101,0,3541,3539,1,0,0,0,3542,3545,
        1,0,0,0,3543,3541,1,0,0,0,3543,3544,1,0,0,0,3544,3548,1,0,0,0,3545,
        3543,1,0,0,0,3546,3547,5,188,0,0,3547,3549,3,668,334,0,3548,3546,
        1,0,0,0,3548,3549,1,0,0,0,3549,3551,1,0,0,0,3550,3552,3,224,112,
        0,3551,3550,1,0,0,0,3551,3552,1,0,0,0,3552,3554,1,0,0,0,3553,3555,
        3,286,143,0,3554,3553,1,0,0,0,3554,3555,1,0,0,0,3555,221,1,0,0,0,
        3556,3558,5,182,0,0,3557,3559,5,105,0,0,3558,3557,1,0,0,0,3558,3559,
        1,0,0,0,3559,3561,1,0,0,0,3560,3562,5,77,0,0,3561,3560,1,0,0,0,3561,
        3562,1,0,0,0,3562,3563,1,0,0,0,3563,3564,3,228,114,0,3564,3565,5,
        152,0,0,3565,3570,3,202,101,0,3566,3567,5,1128,0,0,3567,3569,3,202,
        101,0,3568,3566,1,0,0,0,3569,3572,1,0,0,0,3570,3568,1,0,0,0,3570,
        3571,1,0,0,0,3571,3575,1,0,0,0,3572,3570,1,0,0,0,3573,3574,5,188,
        0,0,3574,3576,3,668,334,0,3575,3573,1,0,0,0,3575,3576,1,0,0,0,3576,
        223,1,0,0,0,3577,3578,5,123,0,0,3578,3579,5,19,0,0,3579,3584,3,226,
        113,0,3580,3581,5,1128,0,0,3581,3583,3,226,113,0,3582,3580,1,0,0,
        0,3583,3586,1,0,0,0,3584,3582,1,0,0,0,3584,3585,1,0,0,0,3585,225,
        1,0,0,0,3586,3584,1,0,0,0,3587,3589,3,668,334,0,3588,3590,7,48,0,
        0,3589,3588,1,0,0,0,3589,3590,1,0,0,0,3590,227,1,0,0,0,3591,3596,
        3,230,115,0,3592,3593,5,1128,0,0,3593,3595,3,230,115,0,3594,3592,
        1,0,0,0,3595,3598,1,0,0,0,3596,3594,1,0,0,0,3596,3597,1,0,0,0,3597,
        229,1,0,0,0,3598,3596,1,0,0,0,3599,3603,3,232,116,0,3600,3602,3,
        238,119,0,3601,3600,1,0,0,0,3602,3605,1,0,0,0,3603,3601,1,0,0,0,
        3603,3604,1,0,0,0,3604,3618,1,0,0,0,3605,3603,1,0,0,0,3606,3607,
        5,1126,0,0,3607,3611,3,232,116,0,3608,3610,3,238,119,0,3609,3608,
        1,0,0,0,3610,3613,1,0,0,0,3611,3609,1,0,0,0,3611,3612,1,0,0,0,3612,
        3614,1,0,0,0,3613,3611,1,0,0,0,3614,3615,5,1127,0,0,3615,3618,1,
        0,0,0,3616,3618,3,254,127,0,3617,3599,1,0,0,0,3617,3606,1,0,0,0,
        3617,3616,1,0,0,0,3618,231,1,0,0,0,3619,3625,3,538,269,0,3620,3621,
        5,128,0,0,3621,3622,5,1126,0,0,3622,3623,3,596,298,0,3623,3624,5,
        1127,0,0,3624,3626,1,0,0,0,3625,3620,1,0,0,0,3625,3626,1,0,0,0,3626,
        3631,1,0,0,0,3627,3629,5,12,0,0,3628,3627,1,0,0,0,3628,3629,1,0,
        0,0,3629,3630,1,0,0,0,3630,3632,3,564,282,0,3631,3628,1,0,0,0,3631,
        3632,1,0,0,0,3632,3641,1,0,0,0,3633,3638,3,234,117,0,3634,3635,5,
        1128,0,0,3635,3637,3,234,117,0,3636,3634,1,0,0,0,3637,3640,1,0,0,
        0,3638,3636,1,0,0,0,3638,3639,1,0,0,0,3639,3642,1,0,0,0,3640,3638,
        1,0,0,0,3641,3633,1,0,0,0,3641,3642,1,0,0,0,3642,3660,1,0,0,0,3643,
        3649,3,196,98,0,3644,3645,5,1126,0,0,3645,3646,3,196,98,0,3646,3647,
        5,1127,0,0,3647,3649,1,0,0,0,3648,3643,1,0,0,0,3648,3644,1,0,0,0,
        3649,3651,1,0,0,0,3650,3652,5,12,0,0,3651,3650,1,0,0,0,3651,3652,
        1,0,0,0,3652,3653,1,0,0,0,3653,3654,3,564,282,0,3654,3660,1,0,0,
        0,3655,3656,5,1126,0,0,3656,3657,3,228,114,0,3657,3658,5,1127,0,
        0,3658,3660,1,0,0,0,3659,3619,1,0,0,0,3659,3648,1,0,0,0,3659,3655,
        1,0,0,0,3660,233,1,0,0,0,3661,3662,7,49,0,0,3662,3665,7,20,0,0,3663,
        3664,5,64,0,0,3664,3666,3,236,118,0,3665,3663,1,0,0,0,3665,3666,
        1,0,0,0,3666,3667,1,0,0,0,3667,3668,5,1126,0,0,3668,3669,3,596,298,
        0,3669,3670,5,1127,0,0,3670,235,1,0,0,0,3671,3677,5,89,0,0,3672,
        3673,5,123,0,0,3673,3677,5,19,0,0,3674,3675,5,72,0,0,3675,3677,5,
        19,0,0,3676,3671,1,0,0,0,3676,3672,1,0,0,0,3676,3674,1,0,0,0,3677,
        237,1,0,0,0,3678,3680,7,50,0,0,3679,3678,1,0,0,0,3679,3680,1,0,0,
        0,3680,3681,1,0,0,0,3681,3683,5,89,0,0,3682,3684,5,93,0,0,3683,3682,
        1,0,0,0,3683,3684,1,0,0,0,3684,3685,1,0,0,0,3685,3693,3,232,116,
        0,3686,3687,5,117,0,0,3687,3694,3,668,334,0,3688,3689,5,185,0,0,
        3689,3690,5,1126,0,0,3690,3691,3,596,298,0,3691,3692,5,1127,0,0,
        3692,3694,1,0,0,0,3693,3686,1,0,0,0,3693,3688,1,0,0,0,3693,3694,
        1,0,0,0,3694,3729,1,0,0,0,3695,3696,5,169,0,0,3696,3699,3,232,116,
        0,3697,3698,5,117,0,0,3698,3700,3,668,334,0,3699,3697,1,0,0,0,3699,
        3700,1,0,0,0,3700,3729,1,0,0,0,3701,3703,7,51,0,0,3702,3704,5,125,
        0,0,3703,3702,1,0,0,0,3703,3704,1,0,0,0,3704,3705,1,0,0,0,3705,3707,
        5,89,0,0,3706,3708,5,93,0,0,3707,3706,1,0,0,0,3707,3708,1,0,0,0,
        3708,3709,1,0,0,0,3709,3717,3,232,116,0,3710,3711,5,117,0,0,3711,
        3718,3,668,334,0,3712,3713,5,185,0,0,3713,3714,5,1126,0,0,3714,3715,
        3,596,298,0,3715,3716,5,1127,0,0,3716,3718,1,0,0,0,3717,3710,1,0,
        0,0,3717,3712,1,0,0,0,3718,3729,1,0,0,0,3719,3724,5,112,0,0,3720,
        3722,7,51,0,0,3721,3723,5,125,0,0,3722,3721,1,0,0,0,3722,3723,1,
        0,0,0,3723,3725,1,0,0,0,3724,3720,1,0,0,0,3724,3725,1,0,0,0,3725,
        3726,1,0,0,0,3726,3727,5,89,0,0,3727,3729,3,232,116,0,3728,3679,
        1,0,0,0,3728,3695,1,0,0,0,3728,3701,1,0,0,0,3728,3719,1,0,0,0,3729,
        239,1,0,0,0,3730,3731,5,1126,0,0,3731,3732,3,244,122,0,3732,3733,
        5,1127,0,0,3733,3739,1,0,0,0,3734,3735,5,1126,0,0,3735,3736,3,240,
        120,0,3736,3737,5,1127,0,0,3737,3739,1,0,0,0,3738,3730,1,0,0,0,3738,
        3734,1,0,0,0,3739,241,1,0,0,0,3740,3741,5,1126,0,0,3741,3742,3,246,
        123,0,3742,3743,5,1127,0,0,3743,3749,1,0,0,0,3744,3745,5,1126,0,
        0,3745,3746,3,242,121,0,3746,3747,5,1127,0,0,3747,3749,1,0,0,0,3748,
        3740,1,0,0,0,3748,3744,1,0,0,0,3749,243,1,0,0,0,3750,3754,5,151,
        0,0,3751,3753,3,264,132,0,3752,3751,1,0,0,0,3753,3756,1,0,0,0,3754,
        3752,1,0,0,0,3754,3755,1,0,0,0,3755,3757,1,0,0,0,3756,3754,1,0,0,
        0,3757,3759,3,266,133,0,3758,3760,3,270,135,0,3759,3758,1,0,0,0,
        3759,3760,1,0,0,0,3760,3762,1,0,0,0,3761,3763,3,276,138,0,3762,3761,
        1,0,0,0,3762,3763,1,0,0,0,3763,3765,1,0,0,0,3764,3766,3,278,139,
        0,3765,3764,1,0,0,0,3765,3766,1,0,0,0,3766,3768,1,0,0,0,3767,3769,
        3,280,140,0,3768,3767,1,0,0,0,3768,3769,1,0,0,0,3769,3771,1,0,0,
        0,3770,3772,3,282,141,0,3771,3770,1,0,0,0,3771,3772,1,0,0,0,3772,
        3774,1,0,0,0,3773,3775,3,224,112,0,3774,3773,1,0,0,0,3774,3775,1,
        0,0,0,3775,3777,1,0,0,0,3776,3778,3,286,143,0,3777,3776,1,0,0,0,
        3777,3778,1,0,0,0,3778,3809,1,0,0,0,3779,3783,5,151,0,0,3780,3782,
        3,264,132,0,3781,3780,1,0,0,0,3782,3785,1,0,0,0,3783,3781,1,0,0,
        0,3783,3784,1,0,0,0,3784,3786,1,0,0,0,3785,3783,1,0,0,0,3786,3788,
        3,266,133,0,3787,3789,3,276,138,0,3788,3787,1,0,0,0,3788,3789,1,
        0,0,0,3789,3791,1,0,0,0,3790,3792,3,278,139,0,3791,3790,1,0,0,0,
        3791,3792,1,0,0,0,3792,3794,1,0,0,0,3793,3795,3,280,140,0,3794,3793,
        1,0,0,0,3794,3795,1,0,0,0,3795,3797,1,0,0,0,3796,3798,3,282,141,
        0,3797,3796,1,0,0,0,3797,3798,1,0,0,0,3798,3800,1,0,0,0,3799,3801,
        3,224,112,0,3800,3799,1,0,0,0,3800,3801,1,0,0,0,3801,3803,1,0,0,
        0,3802,3804,3,286,143,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,
        3806,1,0,0,0,3805,3807,3,270,135,0,3806,3805,1,0,0,0,3806,3807,1,
        0,0,0,3807,3809,1,0,0,0,3808,3750,1,0,0,0,3808,3779,1,0,0,0,3809,
        245,1,0,0,0,3810,3814,5,151,0,0,3811,3813,3,264,132,0,3812,3811,
        1,0,0,0,3813,3816,1,0,0,0,3814,3812,1,0,0,0,3814,3815,1,0,0,0,3815,
        3817,1,0,0,0,3816,3814,1,0,0,0,3817,3819,3,266,133,0,3818,3820,3,
        276,138,0,3819,3818,1,0,0,0,3819,3820,1,0,0,0,3820,3822,1,0,0,0,
        3821,3823,3,278,139,0,3822,3821,1,0,0,0,3822,3823,1,0,0,0,3823,3825,
        1,0,0,0,3824,3826,3,280,140,0,3825,3824,1,0,0,0,3825,3826,1,0,0,
        0,3826,3828,1,0,0,0,3827,3829,3,282,141,0,3828,3827,1,0,0,0,3828,
        3829,1,0,0,0,3829,3831,1,0,0,0,3830,3832,3,224,112,0,3831,3830,1,
        0,0,0,3831,3832,1,0,0,0,3832,3834,1,0,0,0,3833,3835,3,286,143,0,
        3834,3833,1,0,0,0,3834,3835,1,0,0,0,3835,247,1,0,0,0,3836,3838,5,
        178,0,0,3837,3839,7,44,0,0,3838,3837,1,0,0,0,3838,3839,1,0,0,0,3839,
        3840,1,0,0,0,3840,3841,3,242,121,0,3841,249,1,0,0,0,3842,3844,5,
        178,0,0,3843,3845,7,44,0,0,3844,3843,1,0,0,0,3844,3845,1,0,0,0,3845,
        3848,1,0,0,0,3846,3849,3,246,123,0,3847,3849,3,242,121,0,3848,3846,
        1,0,0,0,3848,3847,1,0,0,0,3849,251,1,0,0,0,3850,3865,5,93,0,0,3851,
        3866,3,246,123,0,3852,3866,3,242,121,0,3853,3856,5,1126,0,0,3854,
        3857,3,246,123,0,3855,3857,3,242,121,0,3856,3854,1,0,0,0,3856,3855,
        1,0,0,0,3857,3858,1,0,0,0,3858,3863,5,1127,0,0,3859,3861,5,12,0,
        0,3860,3859,1,0,0,0,3860,3861,1,0,0,0,3861,3862,1,0,0,0,3862,3864,
        3,564,282,0,3863,3860,1,0,0,0,3863,3864,1,0,0,0,3864,3866,1,0,0,
        0,3865,3851,1,0,0,0,3865,3852,1,0,0,0,3865,3853,1,0,0,0,3866,253,
        1,0,0,0,3867,3868,5,276,0,0,3868,3869,5,1126,0,0,3869,3870,5,1141,
        0,0,3870,3871,5,1128,0,0,3871,3872,5,1141,0,0,3872,3873,5,363,0,
        0,3873,3874,5,1126,0,0,3874,3875,3,256,128,0,3875,3876,5,1127,0,
        0,3876,3881,5,1127,0,0,3877,3879,5,12,0,0,3878,3877,1,0,0,0,3878,
        3879,1,0,0,0,3879,3880,1,0,0,0,3880,3882,3,564,282,0,3881,3878,1,
        0,0,0,3881,3882,1,0,0,0,3882,255,1,0,0,0,3883,3888,3,258,129,0,3884,
        3885,5,1128,0,0,3885,3887,3,258,129,0,3886,3884,1,0,0,0,3887,3890,
        1,0,0,0,3888,3886,1,0,0,0,3888,3889,1,0,0,0,3889,257,1,0,0,0,3890,
        3888,1,0,0,0,3891,3908,3,542,271,0,3892,3893,5,64,0,0,3893,3909,
        5,282,0,0,3894,3906,3,584,292,0,3895,3896,5,283,0,0,3896,3898,5,
        1141,0,0,3897,3899,3,260,130,0,3898,3897,1,0,0,0,3898,3899,1,0,0,
        0,3899,3901,1,0,0,0,3900,3902,3,262,131,0,3901,3900,1,0,0,0,3901,
        3902,1,0,0,0,3902,3907,1,0,0,0,3903,3904,5,59,0,0,3904,3905,5,283,
        0,0,3905,3907,5,1141,0,0,3906,3895,1,0,0,0,3906,3903,1,0,0,0,3907,
        3909,1,0,0,0,3908,3892,1,0,0,0,3908,3894,1,0,0,0,3909,3921,1,0,0,
        0,3910,3912,5,281,0,0,3911,3913,5,283,0,0,3912,3911,1,0,0,0,3912,
        3913,1,0,0,0,3913,3914,1,0,0,0,3914,3915,5,1141,0,0,3915,3916,5,
        363,0,0,3916,3917,5,1126,0,0,3917,3918,3,256,128,0,3918,3919,5,1127,
        0,0,3919,3921,1,0,0,0,3920,3891,1,0,0,0,3920,3910,1,0,0,0,3921,259,
        1,0,0,0,3922,3927,5,115,0,0,3923,3927,5,409,0,0,3924,3925,5,42,0,
        0,3925,3927,3,614,307,0,3926,3922,1,0,0,0,3926,3923,1,0,0,0,3926,
        3924,1,0,0,0,3927,3928,1,0,0,0,3928,3929,5,117,0,0,3929,3930,5,55,
        0,0,3930,261,1,0,0,0,3931,3936,5,115,0,0,3932,3936,5,409,0,0,3933,
        3934,5,42,0,0,3934,3936,3,614,307,0,3935,3931,1,0,0,0,3935,3932,
        1,0,0,0,3935,3933,1,0,0,0,3936,3937,1,0,0,0,3937,3938,5,117,0,0,
        3938,3939,5,409,0,0,3939,263,1,0,0,0,3940,3949,7,52,0,0,3941,3949,
        5,74,0,0,3942,3949,5,169,0,0,3943,3949,5,164,0,0,3944,3949,5,162,
        0,0,3945,3949,5,623,0,0,3946,3949,7,53,0,0,3947,3949,5,163,0,0,3948,
        3940,1,0,0,0,3948,3941,1,0,0,0,3948,3942,1,0,0,0,3948,3943,1,0,0,
        0,3948,3944,1,0,0,0,3948,3945,1,0,0,0,3948,3946,1,0,0,0,3948,3947,
        1,0,0,0,3949,265,1,0,0,0,3950,3953,5,1110,0,0,3951,3953,3,268,134,
        0,3952,3950,1,0,0,0,3952,3951,1,0,0,0,3953,3958,1,0,0,0,3954,3955,
        5,1128,0,0,3955,3957,3,268,134,0,3956,3954,1,0,0,0,3957,3960,1,0,
        0,0,3958,3956,1,0,0,0,3958,3959,1,0,0,0,3959,267,1,0,0,0,3960,3958,
        1,0,0,0,3961,3962,3,536,268,0,3962,3963,5,1125,0,0,3963,3964,5,1110,
        0,0,3964,3991,1,0,0,0,3965,3970,3,542,271,0,3966,3968,5,12,0,0,3967,
        3966,1,0,0,0,3967,3968,1,0,0,0,3968,3969,1,0,0,0,3969,3971,3,564,
        282,0,3970,3967,1,0,0,0,3970,3971,1,0,0,0,3971,3991,1,0,0,0,3972,
        3977,3,628,314,0,3973,3975,5,12,0,0,3974,3973,1,0,0,0,3974,3975,
        1,0,0,0,3975,3976,1,0,0,0,3976,3978,3,564,282,0,3977,3974,1,0,0,
        0,3977,3978,1,0,0,0,3978,3991,1,0,0,0,3979,3980,5,1153,0,0,3980,
        3982,5,1101,0,0,3981,3979,1,0,0,0,3981,3982,1,0,0,0,3982,3983,1,
        0,0,0,3983,3988,3,668,334,0,3984,3986,5,12,0,0,3985,3984,1,0,0,0,
        3985,3986,1,0,0,0,3986,3987,1,0,0,0,3987,3989,3,564,282,0,3988,3985,
        1,0,0,0,3988,3989,1,0,0,0,3989,3991,1,0,0,0,3990,3961,1,0,0,0,3990,
        3965,1,0,0,0,3990,3972,1,0,0,0,3990,3981,1,0,0,0,3991,269,1,0,0,
        0,3992,3993,5,86,0,0,3993,3998,3,204,102,0,3994,3995,5,1128,0,0,
        3995,3997,3,204,102,0,3996,3994,1,0,0,0,3997,4000,1,0,0,0,3998,3996,
        1,0,0,0,3998,3999,1,0,0,0,3999,4029,1,0,0,0,4000,3998,1,0,0,0,4001,
        4002,5,86,0,0,4002,4003,5,398,0,0,4003,4029,5,1141,0,0,4004,4005,
        5,86,0,0,4005,4006,5,126,0,0,4006,4010,5,1141,0,0,4007,4008,5,25,
        0,0,4008,4009,5,152,0,0,4009,4011,3,550,275,0,4010,4007,1,0,0,0,
        4010,4011,1,0,0,0,4011,4018,1,0,0,0,4012,4014,7,41,0,0,4013,4015,
        3,272,136,0,4014,4013,1,0,0,0,4015,4016,1,0,0,0,4016,4014,1,0,0,
        0,4016,4017,1,0,0,0,4017,4019,1,0,0,0,4018,4012,1,0,0,0,4018,4019,
        1,0,0,0,4019,4026,1,0,0,0,4020,4022,5,100,0,0,4021,4023,3,274,137,
        0,4022,4021,1,0,0,0,4023,4024,1,0,0,0,4024,4022,1,0,0,0,4024,4025,
        1,0,0,0,4025,4027,1,0,0,0,4026,4020,1,0,0,0,4026,4027,1,0,0,0,4027,
        4029,1,0,0,0,4028,3992,1,0,0,0,4028,4001,1,0,0,0,4028,4004,1,0,0,
        0,4029,271,1,0,0,0,4030,4031,5,171,0,0,4031,4032,5,19,0,0,4032,4043,
        5,1141,0,0,4033,4035,5,121,0,0,4034,4033,1,0,0,0,4034,4035,1,0,0,
        0,4035,4036,1,0,0,0,4036,4037,5,56,0,0,4037,4038,5,19,0,0,4038,4043,
        5,1141,0,0,4039,4040,5,57,0,0,4040,4041,5,19,0,0,4041,4043,5,1141,
        0,0,4042,4030,1,0,0,0,4042,4034,1,0,0,0,4042,4039,1,0,0,0,4043,273,
        1,0,0,0,4044,4045,5,167,0,0,4045,4046,5,19,0,0,4046,4051,5,1141,
        0,0,4047,4048,5,171,0,0,4048,4049,5,19,0,0,4049,4051,5,1141,0,0,
        4050,4044,1,0,0,0,4050,4047,1,0,0,0,4051,275,1,0,0,0,4052,4053,5,
        67,0,0,4053,4055,3,228,114,0,4054,4052,1,0,0,0,4054,4055,1,0,0,0,
        4055,4058,1,0,0,0,4056,4057,5,188,0,0,4057,4059,3,668,334,0,4058,
        4056,1,0,0,0,4058,4059,1,0,0,0,4059,277,1,0,0,0,4060,4061,5,72,0,
        0,4061,4062,5,19,0,0,4062,4067,3,284,142,0,4063,4064,5,1128,0,0,
        4064,4066,3,284,142,0,4065,4063,1,0,0,0,4066,4069,1,0,0,0,4067,4065,
        1,0,0,0,4067,4068,1,0,0,0,4068,4072,1,0,0,0,4069,4067,1,0,0,0,4070,
        4071,5,190,0,0,4071,4073,5,596,0,0,4072,4070,1,0,0,0,4072,4073,1,
        0,0,0,4073,279,1,0,0,0,4074,4075,5,73,0,0,4075,4076,3,668,334,0,
        4076,281,1,0,0,0,4077,4078,5,674,0,0,4078,4079,3,646,323,0,4079,
        4080,5,12,0,0,4080,4081,5,1126,0,0,4081,4082,3,644,322,0,4082,4092,
        5,1127,0,0,4083,4084,5,1128,0,0,4084,4085,3,646,323,0,4085,4086,
        5,12,0,0,4086,4087,5,1126,0,0,4087,4088,3,644,322,0,4088,4089,5,
        1127,0,0,4089,4091,1,0,0,0,4090,4083,1,0,0,0,4091,4094,1,0,0,0,4092,
        4090,1,0,0,0,4092,4093,1,0,0,0,4093,283,1,0,0,0,4094,4092,1,0,0,
        0,4095,4097,3,668,334,0,4096,4098,7,48,0,0,4097,4096,1,0,0,0,4097,
        4098,1,0,0,0,4098,285,1,0,0,0,4099,4110,5,98,0,0,4100,4101,3,288,
        144,0,4101,4102,5,1128,0,0,4102,4104,1,0,0,0,4103,4100,1,0,0,0,4103,
        4104,1,0,0,0,4104,4105,1,0,0,0,4105,4111,3,288,144,0,4106,4107,3,
        288,144,0,4107,4108,5,530,0,0,4108,4109,3,288,144,0,4109,4111,1,
        0,0,0,4110,4103,1,0,0,0,4110,4106,1,0,0,0,4111,287,1,0,0,0,4112,
        4116,3,570,285,0,4113,4116,3,548,274,0,4114,4116,3,566,283,0,4115,
        4112,1,0,0,0,4115,4113,1,0,0,0,4115,4114,1,0,0,0,4116,289,1,0,0,
        0,4117,4118,5,627,0,0,4118,4127,5,651,0,0,4119,4124,3,312,156,0,
        4120,4121,5,1128,0,0,4121,4123,3,312,156,0,4122,4120,1,0,0,0,4123,
        4126,1,0,0,0,4124,4122,1,0,0,0,4124,4125,1,0,0,0,4125,4128,1,0,0,
        0,4126,4124,1,0,0,0,4127,4119,1,0,0,0,4127,4128,1,0,0,0,4128,291,
        1,0,0,0,4129,4131,5,342,0,0,4130,4132,5,676,0,0,4131,4130,1,0,0,
        0,4131,4132,1,0,0,0,4132,293,1,0,0,0,4133,4135,5,367,0,0,4134,4136,
        5,676,0,0,4135,4134,1,0,0,0,4135,4136,1,0,0,0,4136,4142,1,0,0,0,
        4137,4139,5,10,0,0,4138,4140,5,519,0,0,4139,4138,1,0,0,0,4139,4140,
        1,0,0,0,4140,4141,1,0,0,0,4141,4143,5,351,0,0,4142,4137,1,0,0,0,
        4142,4143,1,0,0,0,4143,4148,1,0,0,0,4144,4146,5,519,0,0,4145,4144,
        1,0,0,0,4145,4146,1,0,0,0,4146,4147,1,0,0,0,4147,4149,5,137,0,0,
        4148,4145,1,0,0,0,4148,4149,1,0,0,0,4149,295,1,0,0,0,4150,4152,5,
        595,0,0,4151,4153,5,676,0,0,4152,4151,1,0,0,0,4152,4153,1,0,0,0,
        4153,4159,1,0,0,0,4154,4156,5,10,0,0,4155,4157,5,519,0,0,4156,4155,
        1,0,0,0,4156,4157,1,0,0,0,4157,4158,1,0,0,0,4158,4160,5,351,0,0,
        4159,4154,1,0,0,0,4159,4160,1,0,0,0,4160,4165,1,0,0,0,4161,4163,
        5,519,0,0,4162,4161,1,0,0,0,4162,4163,1,0,0,0,4163,4164,1,0,0,0,
        4164,4166,5,137,0,0,4165,4162,1,0,0,0,4165,4166,1,0,0,0,4166,297,
        1,0,0,0,4167,4168,5,602,0,0,4168,4169,3,564,282,0,4169,299,1,0,0,
        0,4170,4172,5,595,0,0,4171,4173,5,676,0,0,4172,4171,1,0,0,0,4172,
        4173,1,0,0,0,4173,4174,1,0,0,0,4174,4176,5,173,0,0,4175,4177,5,602,
        0,0,4176,4175,1,0,0,0,4176,4177,1,0,0,0,4177,4178,1,0,0,0,4178,4179,
        3,564,282,0,4179,301,1,0,0,0,4180,4181,5,137,0,0,4181,4182,5,602,
        0,0,4182,4183,3,564,282,0,4183,303,1,0,0,0,4184,4185,5,102,0,0,4185,
        4186,7,54,0,0,4186,4191,3,314,157,0,4187,4188,5,1128,0,0,4188,4190,
        3,314,157,0,4189,4187,1,0,0,0,4190,4193,1,0,0,0,4191,4189,1,0,0,
        0,4191,4192,1,0,0,0,4192,4195,1,0,0,0,4193,4191,1,0,0,0,4194,4196,
        3,626,313,0,4195,4194,1,0,0,0,4195,4196,1,0,0,0,4196,305,1,0,0,0,
        4197,4198,5,180,0,0,4198,4199,5,737,0,0,4199,307,1,0,0,0,4200,4201,
        5,152,0,0,4201,4202,5,338,0,0,4202,4203,5,1117,0,0,4203,4204,7,24,
        0,0,4204,309,1,0,0,0,4205,4207,5,152,0,0,4206,4208,7,55,0,0,4207,
        4206,1,0,0,0,4207,4208,1,0,0,0,4208,4209,1,0,0,0,4209,4210,5,651,
        0,0,4210,4215,3,318,159,0,4211,4212,5,1128,0,0,4212,4214,3,318,159,
        0,4213,4211,1,0,0,0,4214,4217,1,0,0,0,4215,4213,1,0,0,0,4215,4216,
        1,0,0,0,4216,311,1,0,0,0,4217,4215,1,0,0,0,4218,4219,5,190,0,0,4219,
        4220,5,375,0,0,4220,4226,5,614,0,0,4221,4222,5,133,0,0,4222,4226,
        5,191,0,0,4223,4224,5,133,0,0,4224,4226,5,536,0,0,4225,4218,1,0,
        0,0,4225,4221,1,0,0,0,4225,4223,1,0,0,0,4226,313,1,0,0,0,4227,4232,
        3,538,269,0,4228,4230,5,12,0,0,4229,4228,1,0,0,0,4229,4230,1,0,0,
        0,4230,4231,1,0,0,0,4231,4233,3,564,282,0,4232,4229,1,0,0,0,4232,
        4233,1,0,0,0,4233,4234,1,0,0,0,4234,4235,3,316,158,0,4235,315,1,
        0,0,0,4236,4238,5,133,0,0,4237,4239,5,472,0,0,4238,4237,1,0,0,0,
        4238,4239,1,0,0,0,4239,4245,1,0,0,0,4240,4242,5,105,0,0,4241,4240,
        1,0,0,0,4241,4242,1,0,0,0,4242,4243,1,0,0,0,4243,4245,5,191,0,0,
        4244,4236,1,0,0,0,4244,4241,1,0,0,0,4245,317,1,0,0,0,4246,4247,5,
        462,0,0,4247,4248,5,470,0,0,4248,4254,3,320,160,0,4249,4250,5,133,
        0,0,4250,4254,5,191,0,0,4251,4252,5,133,0,0,4252,4254,5,536,0,0,
        4253,4246,1,0,0,0,4253,4249,1,0,0,0,4253,4251,1,0,0,0,4254,319,1,
        0,0,0,4255,4256,5,794,0,0,4256,4263,5,133,0,0,4257,4258,5,133,0,
        0,4258,4263,5,795,0,0,4259,4260,5,133,0,0,4260,4263,5,796,0,0,4261,
        4263,5,797,0,0,4262,4255,1,0,0,0,4262,4257,1,0,0,0,4262,4259,1,0,
        0,0,4262,4261,1,0,0,0,4263,321,1,0,0,0,4264,4265,5,24,0,0,4265,4266,
        5,475,0,0,4266,4267,5,173,0,0,4267,4272,3,340,170,0,4268,4269,5,
        1128,0,0,4269,4271,3,340,170,0,4270,4268,1,0,0,0,4271,4274,1,0,0,
        0,4272,4270,1,0,0,0,4272,4273,1,0,0,0,4273,4276,1,0,0,0,4274,4272,
        1,0,0,0,4275,4277,3,348,174,0,4276,4275,1,0,0,0,4276,4277,1,0,0,
        0,4277,323,1,0,0,0,4278,4279,5,24,0,0,4279,4280,5,586,0,0,4280,4281,
        5,427,0,0,4281,4286,3,350,175,0,4282,4283,5,1128,0,0,4283,4285,3,
        350,175,0,4284,4282,1,0,0,0,4285,4288,1,0,0,0,4286,4284,1,0,0,0,
        4286,4287,1,0,0,0,4287,325,1,0,0,0,4288,4286,1,0,0,0,4289,4290,5,
        131,0,0,4290,4291,7,56,0,0,4291,4296,5,474,0,0,4292,4293,5,173,0,
        0,4293,4297,5,1141,0,0,4294,4295,5,15,0,0,4295,4297,5,1141,0,0,4296,
        4292,1,0,0,0,4296,4294,1,0,0,0,4297,327,1,0,0,0,4298,4299,5,587,
        0,0,4299,4300,5,475,0,0,4300,329,1,0,0,0,4301,4302,5,587,0,0,4302,
        4304,5,612,0,0,4303,4305,5,6,0,0,4304,4303,1,0,0,0,4304,4305,1,0,
        0,0,4305,4307,1,0,0,0,4306,4308,3,348,174,0,4307,4306,1,0,0,0,4307,
        4308,1,0,0,0,4308,331,1,0,0,0,4309,4310,5,627,0,0,4310,4319,5,612,
        0,0,4311,4316,3,354,177,0,4312,4313,5,1128,0,0,4313,4315,3,354,177,
        0,4314,4312,1,0,0,0,4315,4318,1,0,0,0,4316,4314,1,0,0,0,4316,4317,
        1,0,0,0,4317,4320,1,0,0,0,4318,4316,1,0,0,0,4319,4311,1,0,0,0,4319,
        4320,1,0,0,0,4320,4323,1,0,0,0,4321,4322,5,661,0,0,4322,4324,3,356,
        178,0,4323,4321,1,0,0,0,4323,4324,1,0,0,0,4324,4328,1,0,0,0,4325,
        4327,3,358,179,0,4326,4325,1,0,0,0,4327,4330,1,0,0,0,4328,4326,1,
        0,0,0,4328,4329,1,0,0,0,4329,4332,1,0,0,0,4330,4328,1,0,0,0,4331,
        4333,3,348,174,0,4332,4331,1,0,0,0,4332,4333,1,0,0,0,4333,333,1,
        0,0,0,4334,4335,5,633,0,0,4335,4344,5,612,0,0,4336,4341,3,354,177,
        0,4337,4338,5,1128,0,0,4338,4340,3,354,177,0,4339,4337,1,0,0,0,4340,
        4343,1,0,0,0,4341,4339,1,0,0,0,4341,4342,1,0,0,0,4342,4345,1,0,0,
        0,4343,4341,1,0,0,0,4344,4336,1,0,0,0,4344,4345,1,0,0,0,4345,335,
        1,0,0,0,4346,4347,5,627,0,0,4347,4348,5,439,0,0,4348,337,1,0,0,0,
        4349,4350,5,633,0,0,4350,4351,5,439,0,0,4351,339,1,0,0,0,4352,4353,
        3,342,171,0,4353,4354,5,1117,0,0,4354,4355,5,1141,0,0,4355,4382,
        1,0,0,0,4356,4357,3,344,172,0,4357,4358,5,1117,0,0,4358,4359,3,570,
        285,0,4359,4382,1,0,0,0,4360,4361,3,346,173,0,4361,4362,5,1117,0,
        0,4362,4363,7,24,0,0,4363,4382,1,0,0,0,4364,4365,5,479,0,0,4365,
        4366,5,1117,0,0,4366,4382,5,1144,0,0,4367,4368,5,447,0,0,4368,4369,
        5,1117,0,0,4369,4378,5,1126,0,0,4370,4375,3,564,282,0,4371,4372,
        5,1128,0,0,4372,4374,3,564,282,0,4373,4371,1,0,0,0,4374,4377,1,0,
        0,0,4375,4373,1,0,0,0,4375,4376,1,0,0,0,4376,4379,1,0,0,0,4377,4375,
        1,0,0,0,4378,4370,1,0,0,0,4378,4379,1,0,0,0,4379,4380,1,0,0,0,4380,
        4382,5,1127,0,0,4381,4352,1,0,0,0,4381,4356,1,0,0,0,4381,4360,1,
        0,0,0,4381,4364,1,0,0,0,4381,4367,1,0,0,0,4382,341,1,0,0,0,4383,
        4384,7,57,0,0,4384,343,1,0,0,0,4385,4386,7,58,0,0,4386,345,1,0,0,
        0,4387,4388,7,59,0,0,4388,347,1,0,0,0,4389,4390,5,64,0,0,4390,4391,
        5,353,0,0,4391,4392,5,1141,0,0,4392,349,1,0,0,0,4393,4394,5,579,
        0,0,4394,4395,5,1117,0,0,4395,4396,5,1126,0,0,4396,4397,3,596,298,
        0,4397,4398,5,1127,0,0,4398,4443,1,0,0,0,4399,4400,5,581,0,0,4400,
        4401,5,1117,0,0,4401,4402,5,1126,0,0,4402,4403,3,596,298,0,4403,
        4404,5,1127,0,0,4404,4443,1,0,0,0,4405,4406,5,580,0,0,4406,4407,
        5,1117,0,0,4407,4408,5,1126,0,0,4408,4409,3,600,300,0,4409,4410,
        5,1127,0,0,4410,4443,1,0,0,0,4411,4412,5,582,0,0,4412,4413,5,1117,
        0,0,4413,4414,5,1126,0,0,4414,4415,3,600,300,0,4415,4416,5,1127,
        0,0,4416,4443,1,0,0,0,4417,4418,5,584,0,0,4418,4419,5,1117,0,0,4419,
        4420,5,1126,0,0,4420,4421,3,610,305,0,4421,4422,5,1127,0,0,4422,
        4443,1,0,0,0,4423,4424,5,585,0,0,4424,4425,5,1117,0,0,4425,4426,
        5,1126,0,0,4426,4427,3,610,305,0,4427,4428,5,1127,0,0,4428,4443,
        1,0,0,0,4429,4430,5,583,0,0,4430,4431,5,1117,0,0,4431,4432,5,1126,
        0,0,4432,4437,3,352,176,0,4433,4434,5,1128,0,0,4434,4436,3,352,176,
        0,4435,4433,1,0,0,0,4436,4439,1,0,0,0,4437,4435,1,0,0,0,4437,4438,
        1,0,0,0,4438,4440,1,0,0,0,4439,4437,1,0,0,0,4440,4441,5,1127,0,0,
        4441,4443,1,0,0,0,4442,4393,1,0,0,0,4442,4399,1,0,0,0,4442,4405,
        1,0,0,0,4442,4411,1,0,0,0,4442,4417,1,0,0,0,4442,4423,1,0,0,0,4442,
        4429,1,0,0,0,4443,351,1,0,0,0,4444,4445,5,1126,0,0,4445,4446,3,538,
        269,0,4446,4447,5,1128,0,0,4447,4448,3,538,269,0,4448,4449,5,1127,
        0,0,4449,353,1,0,0,0,4450,4451,7,60,0,0,4451,355,1,0,0,0,4452,4453,
        7,61,0,0,4453,4454,5,1117,0,0,4454,4471,3,360,180,0,4455,4456,5,
        481,0,0,4456,4457,5,1117,0,0,4457,4458,5,1141,0,0,4458,4459,5,1128,
        0,0,4459,4460,5,482,0,0,4460,4461,5,1117,0,0,4461,4471,3,570,285,
        0,4462,4463,5,573,0,0,4463,4464,5,1117,0,0,4464,4465,5,1141,0,0,
        4465,4466,5,1128,0,0,4466,4467,5,574,0,0,4467,4468,5,1117,0,0,4468,
        4471,3,570,285,0,4469,4471,5,621,0,0,4470,4452,1,0,0,0,4470,4455,
        1,0,0,0,4470,4462,1,0,0,0,4470,4469,1,0,0,0,4471,357,1,0,0,0,4472,
        4473,5,663,0,0,4473,4474,5,1117,0,0,4474,4485,5,1141,0,0,4475,4476,
        5,549,0,0,4476,4477,5,1117,0,0,4477,4485,5,1141,0,0,4478,4479,5,
        389,0,0,4479,4480,5,1117,0,0,4480,4485,5,1141,0,0,4481,4482,5,553,
        0,0,4482,4483,5,1117,0,0,4483,4485,5,1141,0,0,4484,4472,1,0,0,0,
        4484,4475,1,0,0,0,4484,4478,1,0,0,0,4484,4481,1,0,0,0,4485,359,1,
        0,0,0,4486,4491,3,556,278,0,4487,4488,5,1128,0,0,4488,4490,3,556,
        278,0,4489,4487,1,0,0,0,4490,4493,1,0,0,0,4491,4489,1,0,0,0,4491,
        4492,1,0,0,0,4492,4496,1,0,0,0,4493,4491,1,0,0,0,4494,4496,5,1141,
        0,0,4495,4486,1,0,0,0,4495,4494,1,0,0,0,4496,361,1,0,0,0,4497,4498,
        5,679,0,0,4498,4499,7,62,0,0,4499,4501,3,558,279,0,4500,4502,7,63,
        0,0,4501,4500,1,0,0,0,4501,4502,1,0,0,0,4502,363,1,0,0,0,4503,4504,
        5,679,0,0,4504,4505,5,405,0,0,4505,4511,3,558,279,0,4506,4509,5,
        641,0,0,4507,4508,5,64,0,0,4508,4510,5,507,0,0,4509,4507,1,0,0,0,
        4509,4510,1,0,0,0,4510,4512,1,0,0,0,4511,4506,1,0,0,0,4511,4512,
        1,0,0,0,4512,365,1,0,0,0,4513,4514,5,679,0,0,4514,4515,5,558,0,0,
        4515,4516,3,558,279,0,4516,367,1,0,0,0,4517,4518,5,679,0,0,4518,
        4519,5,367,0,0,4519,4522,3,558,279,0,4520,4521,5,534,0,0,4521,4523,
        5,551,0,0,4522,4520,1,0,0,0,4522,4523,1,0,0,0,4523,369,1,0,0,0,4524,
        4525,5,679,0,0,4525,4526,5,595,0,0,4526,4527,3,558,279,0,4527,371,
        1,0,0,0,4528,4529,5,679,0,0,4529,4532,5,568,0,0,4530,4531,5,32,0,
        0,4531,4533,3,558,279,0,4532,4530,1,0,0,0,4532,4533,1,0,0,0,4533,
        373,1,0,0,0,4534,4535,5,558,0,0,4535,4536,3,564,282,0,4536,4539,
        5,67,0,0,4537,4540,5,1141,0,0,4538,4540,5,1153,0,0,4539,4537,1,0,
        0,0,4539,4538,1,0,0,0,4540,375,1,0,0,0,4541,4542,5,704,0,0,4542,
        4545,3,564,282,0,4543,4544,5,185,0,0,4544,4546,3,612,306,0,4545,
        4543,1,0,0,0,4545,4546,1,0,0,0,4546,377,1,0,0,0,4547,4548,7,64,0,
        0,4548,4549,5,558,0,0,4549,4550,3,564,282,0,4550,379,1,0,0,0,4551,
        4554,3,382,191,0,4552,4554,3,4,2,0,4553,4551,1,0,0,0,4553,4552,1,
        0,0,0,4554,381,1,0,0,0,4555,4556,3,564,282,0,4556,4557,5,1137,0,
        0,4557,4559,1,0,0,0,4558,4555,1,0,0,0,4558,4559,1,0,0,0,4559,4560,
        1,0,0,0,4560,4599,5,342,0,0,4561,4562,3,402,201,0,4562,4563,5,1129,
        0,0,4563,4565,1,0,0,0,4564,4561,1,0,0,0,4565,4568,1,0,0,0,4566,4564,
        1,0,0,0,4566,4567,1,0,0,0,4567,4574,1,0,0,0,4568,4566,1,0,0,0,4569,
        4570,3,404,202,0,4570,4571,5,1129,0,0,4571,4573,1,0,0,0,4572,4569,
        1,0,0,0,4573,4576,1,0,0,0,4574,4572,1,0,0,0,4574,4575,1,0,0,0,4575,
        4582,1,0,0,0,4576,4574,1,0,0,0,4577,4578,3,406,203,0,4578,4579,5,
        1129,0,0,4579,4581,1,0,0,0,4580,4577,1,0,0,0,4581,4584,1,0,0,0,4582,
        4580,1,0,0,0,4582,4583,1,0,0,0,4583,4590,1,0,0,0,4584,4582,1,0,0,
        0,4585,4586,3,408,204,0,4586,4587,5,1129,0,0,4587,4589,1,0,0,0,4588,
        4585,1,0,0,0,4589,4592,1,0,0,0,4590,4588,1,0,0,0,4590,4591,1,0,0,
        0,4591,4596,1,0,0,0,4592,4590,1,0,0,0,4593,4595,3,412,206,0,4594,
        4593,1,0,0,0,4595,4598,1,0,0,0,4596,4594,1,0,0,0,4596,4597,1,0,0,
        0,4597,4600,1,0,0,0,4598,4596,1,0,0,0,4599,4566,1,0,0,0,4599,4600,
        1,0,0,0,4600,4601,1,0,0,0,4601,4603,5,405,0,0,4602,4604,3,564,282,
        0,4603,4602,1,0,0,0,4603,4604,1,0,0,0,4604,383,1,0,0,0,4605,4608,
        5,22,0,0,4606,4609,3,564,282,0,4607,4609,3,668,334,0,4608,4606,1,
        0,0,0,4608,4607,1,0,0,0,4608,4609,1,0,0,0,4609,4611,1,0,0,0,4610,
        4612,3,414,207,0,4611,4610,1,0,0,0,4612,4613,1,0,0,0,4613,4611,1,
        0,0,0,4613,4614,1,0,0,0,4614,4621,1,0,0,0,4615,4617,5,53,0,0,4616,
        4618,3,412,206,0,4617,4616,1,0,0,0,4618,4619,1,0,0,0,4619,4617,1,
        0,0,0,4619,4620,1,0,0,0,4620,4622,1,0,0,0,4621,4615,1,0,0,0,4621,
        4622,1,0,0,0,4622,4623,1,0,0,0,4623,4624,5,405,0,0,4624,4625,5,22,
        0,0,4625,385,1,0,0,0,4626,4627,5,76,0,0,4627,4628,3,668,334,0,4628,
        4630,5,172,0,0,4629,4631,3,412,206,0,4630,4629,1,0,0,0,4631,4632,
        1,0,0,0,4632,4630,1,0,0,0,4632,4633,1,0,0,0,4633,4637,1,0,0,0,4634,
        4636,3,416,208,0,4635,4634,1,0,0,0,4636,4639,1,0,0,0,4637,4635,1,
        0,0,0,4637,4638,1,0,0,0,4638,4646,1,0,0,0,4639,4637,1,0,0,0,4640,
        4642,5,53,0,0,4641,4643,3,412,206,0,4642,4641,1,0,0,0,4643,4644,
        1,0,0,0,4644,4642,1,0,0,0,4644,4645,1,0,0,0,4645,4647,1,0,0,0,4646,
        4640,1,0,0,0,4646,4647,1,0,0,0,4647,4648,1,0,0,0,4648,4649,5,405,
        0,0,4649,4650,5,76,0,0,4650,387,1,0,0,0,4651,4652,5,88,0,0,4652,
        4653,3,564,282,0,4653,389,1,0,0,0,4654,4655,5,95,0,0,4655,4656,3,
        564,282,0,4656,391,1,0,0,0,4657,4658,3,564,282,0,4658,4659,5,1137,
        0,0,4659,4661,1,0,0,0,4660,4657,1,0,0,0,4660,4661,1,0,0,0,4661,4662,
        1,0,0,0,4662,4664,5,104,0,0,4663,4665,3,412,206,0,4664,4663,1,0,
        0,0,4665,4666,1,0,0,0,4666,4664,1,0,0,0,4666,4667,1,0,0,0,4667,4668,
        1,0,0,0,4668,4669,5,405,0,0,4669,4671,5,104,0,0,4670,4672,3,564,
        282,0,4671,4670,1,0,0,0,4671,4672,1,0,0,0,4672,393,1,0,0,0,4673,
        4674,3,564,282,0,4674,4675,5,1137,0,0,4675,4677,1,0,0,0,4676,4673,
        1,0,0,0,4676,4677,1,0,0,0,4677,4678,1,0,0,0,4678,4680,5,139,0,0,
        4679,4681,3,412,206,0,4680,4679,1,0,0,0,4681,4682,1,0,0,0,4682,4680,
        1,0,0,0,4682,4683,1,0,0,0,4683,4684,1,0,0,0,4684,4685,5,661,0,0,
        4685,4686,3,668,334,0,4686,4687,5,405,0,0,4687,4689,5,139,0,0,4688,
        4690,3,564,282,0,4689,4688,1,0,0,0,4689,4690,1,0,0,0,4690,395,1,
        0,0,0,4691,4692,5,145,0,0,4692,4693,3,668,334,0,4693,397,1,0,0,0,
        4694,4695,3,564,282,0,4695,4696,5,1137,0,0,4696,4698,1,0,0,0,4697,
        4694,1,0,0,0,4697,4698,1,0,0,0,4698,4699,1,0,0,0,4699,4700,5,189,
        0,0,4700,4701,3,668,334,0,4701,4703,5,397,0,0,4702,4704,3,412,206,
        0,4703,4702,1,0,0,0,4704,4705,1,0,0,0,4705,4703,1,0,0,0,4705,4706,
        1,0,0,0,4706,4707,1,0,0,0,4707,4708,5,405,0,0,4708,4710,5,189,0,
        0,4709,4711,3,564,282,0,4710,4709,1,0,0,0,4710,4711,1,0,0,0,4711,
        399,1,0,0,0,4712,4713,5,359,0,0,4713,4728,3,564,282,0,4714,4719,
        5,63,0,0,4715,4717,5,518,0,0,4716,4715,1,0,0,0,4716,4717,1,0,0,0,
        4717,4718,1,0,0,0,4718,4720,5,67,0,0,4719,4716,1,0,0,0,4719,4720,
        1,0,0,0,4720,4721,1,0,0,0,4721,4722,3,564,282,0,4722,4723,5,86,0,
        0,4723,4724,3,596,298,0,4724,4728,1,0,0,0,4725,4726,5,537,0,0,4726,
        4728,3,564,282,0,4727,4712,1,0,0,0,4727,4714,1,0,0,0,4727,4725,1,
        0,0,0,4728,401,1,0,0,0,4729,4730,5,41,0,0,4730,4731,3,596,298,0,
        4731,4734,3,584,292,0,4732,4733,5,42,0,0,4733,4735,3,668,334,0,4734,
        4732,1,0,0,0,4734,4735,1,0,0,0,4735,403,1,0,0,0,4736,4737,5,41,0,
        0,4737,4738,3,564,282,0,4738,4739,5,29,0,0,4739,4746,5,64,0,0,4740,
        4747,3,570,285,0,4741,4743,5,160,0,0,4742,4744,5,667,0,0,4743,4742,
        1,0,0,0,4743,4744,1,0,0,0,4744,4745,1,0,0,0,4745,4747,5,1141,0,0,
        4746,4740,1,0,0,0,4746,4741,1,0,0,0,4747,405,1,0,0,0,4748,4749,5,
        41,0,0,4749,4750,3,564,282,0,4750,4751,5,38,0,0,4751,4752,5,64,0,
        0,4752,4753,3,196,98,0,4753,407,1,0,0,0,4754,4755,5,41,0,0,4755,
        4756,7,65,0,0,4756,4757,5,440,0,0,4757,4758,5,64,0,0,4758,4763,3,
        410,205,0,4759,4760,5,1128,0,0,4760,4762,3,410,205,0,4761,4759,1,
        0,0,0,4762,4765,1,0,0,0,4763,4761,1,0,0,0,4763,4764,1,0,0,0,4764,
        4766,1,0,0,0,4765,4763,1,0,0,0,4766,4767,3,380,190,0,4767,409,1,
        0,0,0,4768,4780,3,570,285,0,4769,4771,5,160,0,0,4770,4772,5,667,
        0,0,4771,4770,1,0,0,0,4771,4772,1,0,0,0,4772,4773,1,0,0,0,4773,4780,
        5,1141,0,0,4774,4780,3,564,282,0,4775,4780,5,161,0,0,4776,4777,5,
        113,0,0,4777,4780,5,433,0,0,4778,4780,5,159,0,0,4779,4768,1,0,0,
        0,4779,4769,1,0,0,0,4779,4774,1,0,0,0,4779,4775,1,0,0,0,4779,4776,
        1,0,0,0,4779,4778,1,0,0,0,4780,411,1,0,0,0,4781,4784,3,18,9,0,4782,
        4784,3,4,2,0,4783,4781,1,0,0,0,4783,4782,1,0,0,0,4784,4785,1,0,0,
        0,4785,4786,5,1129,0,0,4786,413,1,0,0,0,4787,4790,5,187,0,0,4788,
        4791,3,582,291,0,4789,4791,3,668,334,0,4790,4788,1,0,0,0,4790,4789,
        1,0,0,0,4791,4792,1,0,0,0,4792,4794,5,172,0,0,4793,4795,3,412,206,
        0,4794,4793,1,0,0,0,4795,4796,1,0,0,0,4796,4794,1,0,0,0,4796,4797,
        1,0,0,0,4797,415,1,0,0,0,4798,4799,5,54,0,0,4799,4800,3,668,334,
        0,4800,4802,5,172,0,0,4801,4803,3,412,206,0,4802,4801,1,0,0,0,4803,
        4804,1,0,0,0,4804,4802,1,0,0,0,4804,4805,1,0,0,0,4805,417,1,0,0,
        0,4806,4807,5,7,0,0,4807,4808,5,663,0,0,4808,4813,3,438,219,0,4809,
        4810,5,1128,0,0,4810,4812,3,438,219,0,4811,4809,1,0,0,0,4812,4815,
        1,0,0,0,4813,4811,1,0,0,0,4813,4814,1,0,0,0,4814,4880,1,0,0,0,4815,
        4813,1,0,0,0,4816,4817,5,7,0,0,4817,4819,5,663,0,0,4818,4820,3,620,
        310,0,4819,4818,1,0,0,0,4819,4820,1,0,0,0,4820,4821,1,0,0,0,4821,
        4826,3,440,220,0,4822,4823,5,1128,0,0,4823,4825,3,440,220,0,4824,
        4822,1,0,0,0,4825,4828,1,0,0,0,4826,4824,1,0,0,0,4826,4827,1,0,0,
        0,4827,4843,1,0,0,0,4828,4826,1,0,0,0,4829,4841,5,141,0,0,4830,4842,
        5,527,0,0,4831,4838,3,444,222,0,4832,4834,5,10,0,0,4833,4832,1,0,
        0,0,4833,4834,1,0,0,0,4834,4835,1,0,0,0,4835,4837,3,444,222,0,4836,
        4833,1,0,0,0,4837,4840,1,0,0,0,4838,4836,1,0,0,0,4838,4839,1,0,0,
        0,4839,4842,1,0,0,0,4840,4838,1,0,0,0,4841,4830,1,0,0,0,4841,4831,
        1,0,0,0,4842,4844,1,0,0,0,4843,4829,1,0,0,0,4843,4844,1,0,0,0,4844,
        4851,1,0,0,0,4845,4847,5,190,0,0,4846,4848,3,446,223,0,4847,4846,
        1,0,0,0,4848,4849,1,0,0,0,4849,4847,1,0,0,0,4849,4850,1,0,0,0,4850,
        4852,1,0,0,0,4851,4845,1,0,0,0,4851,4852,1,0,0,0,4852,4857,1,0,0,
        0,4853,4856,3,448,224,0,4854,4856,3,450,225,0,4855,4853,1,0,0,0,
        4855,4854,1,0,0,0,4856,4859,1,0,0,0,4857,4855,1,0,0,0,4857,4858,
        1,0,0,0,4858,4864,1,0,0,0,4859,4857,1,0,0,0,4860,4861,5,366,0,0,
        4861,4865,5,1141,0,0,4862,4863,5,14,0,0,4863,4865,5,1141,0,0,4864,
        4860,1,0,0,0,4864,4862,1,0,0,0,4864,4865,1,0,0,0,4865,4880,1,0,0,
        0,4866,4867,5,7,0,0,4867,4869,5,663,0,0,4868,4870,3,620,310,0,4869,
        4868,1,0,0,0,4869,4870,1,0,0,0,4870,4873,1,0,0,0,4871,4874,3,546,
        273,0,4872,4874,3,564,282,0,4873,4871,1,0,0,0,4873,4872,1,0,0,0,
        4874,4875,1,0,0,0,4875,4876,5,42,0,0,4876,4877,5,594,0,0,4877,4878,
        3,426,213,0,4878,4880,1,0,0,0,4879,4806,1,0,0,0,4879,4816,1,0,0,
        0,4879,4866,1,0,0,0,4880,419,1,0,0,0,4881,4882,5,33,0,0,4882,4883,
        5,663,0,0,4883,4888,3,440,220,0,4884,4885,5,1128,0,0,4885,4887,3,
        440,220,0,4886,4884,1,0,0,0,4887,4890,1,0,0,0,4888,4886,1,0,0,0,
        4888,4889,1,0,0,0,4889,4947,1,0,0,0,4890,4888,1,0,0,0,4891,4892,
        5,33,0,0,4892,4894,5,663,0,0,4893,4895,3,622,311,0,4894,4893,1,0,
        0,0,4894,4895,1,0,0,0,4895,4896,1,0,0,0,4896,4901,3,440,220,0,4897,
        4898,5,1128,0,0,4898,4900,3,440,220,0,4899,4897,1,0,0,0,4900,4903,
        1,0,0,0,4901,4899,1,0,0,0,4901,4902,1,0,0,0,4902,4907,1,0,0,0,4903,
        4901,1,0,0,0,4904,4905,5,42,0,0,4905,4906,5,594,0,0,4906,4908,3,
        426,213,0,4907,4904,1,0,0,0,4907,4908,1,0,0,0,4908,4923,1,0,0,0,
        4909,4921,5,141,0,0,4910,4922,5,527,0,0,4911,4918,3,444,222,0,4912,
        4914,5,10,0,0,4913,4912,1,0,0,0,4913,4914,1,0,0,0,4914,4915,1,0,
        0,0,4915,4917,3,444,222,0,4916,4913,1,0,0,0,4917,4920,1,0,0,0,4918,
        4916,1,0,0,0,4918,4919,1,0,0,0,4919,4922,1,0,0,0,4920,4918,1,0,0,
        0,4921,4910,1,0,0,0,4921,4911,1,0,0,0,4922,4924,1,0,0,0,4923,4909,
        1,0,0,0,4923,4924,1,0,0,0,4924,4931,1,0,0,0,4925,4927,5,190,0,0,
        4926,4928,3,446,223,0,4927,4926,1,0,0,0,4928,4929,1,0,0,0,4929,4927,
        1,0,0,0,4929,4930,1,0,0,0,4930,4932,1,0,0,0,4931,4925,1,0,0,0,4931,
        4932,1,0,0,0,4932,4937,1,0,0,0,4933,4936,3,448,224,0,4934,4936,3,
        450,225,0,4935,4933,1,0,0,0,4935,4934,1,0,0,0,4936,4939,1,0,0,0,
        4937,4935,1,0,0,0,4937,4938,1,0,0,0,4938,4944,1,0,0,0,4939,4937,
        1,0,0,0,4940,4941,5,366,0,0,4941,4945,5,1141,0,0,4942,4943,5,14,
        0,0,4943,4945,5,1141,0,0,4944,4940,1,0,0,0,4944,4942,1,0,0,0,4944,
        4945,1,0,0,0,4945,4947,1,0,0,0,4946,4881,1,0,0,0,4946,4891,1,0,0,
        0,4947,421,1,0,0,0,4948,4949,5,51,0,0,4949,4951,5,663,0,0,4950,4952,
        3,620,310,0,4951,4950,1,0,0,0,4951,4952,1,0,0,0,4952,4953,1,0,0,
        0,4953,4958,3,546,273,0,4954,4955,5,1128,0,0,4955,4957,3,546,273,
        0,4956,4954,1,0,0,0,4957,4960,1,0,0,0,4958,4956,1,0,0,0,4958,4959,
        1,0,0,0,4959,423,1,0,0,0,4960,4958,1,0,0,0,4961,4962,5,71,0,0,4962,
        4967,3,452,226,0,4963,4964,5,1128,0,0,4964,4966,3,452,226,0,4965,
        4963,1,0,0,0,4966,4969,1,0,0,0,4967,4965,1,0,0,0,4967,4968,1,0,0,
        0,4968,4970,1,0,0,0,4969,4967,1,0,0,0,4970,4972,5,117,0,0,4971,4973,
        7,66,0,0,4972,4971,1,0,0,0,4972,4973,1,0,0,0,4973,4974,1,0,0,0,4974,
        4975,3,456,228,0,4975,4976,5,173,0,0,4976,4981,3,440,220,0,4977,
        4978,5,1128,0,0,4978,4980,3,440,220,0,4979,4977,1,0,0,0,4980,4983,
        1,0,0,0,4981,4979,1,0,0,0,4981,4982,1,0,0,0,4982,4998,1,0,0,0,4983,
        4981,1,0,0,0,4984,4996,5,141,0,0,4985,4997,5,527,0,0,4986,4993,3,
        444,222,0,4987,4989,5,10,0,0,4988,4987,1,0,0,0,4988,4989,1,0,0,0,
        4989,4990,1,0,0,0,4990,4992,3,444,222,0,4991,4988,1,0,0,0,4992,4995,
        1,0,0,0,4993,4991,1,0,0,0,4993,4994,1,0,0,0,4994,4997,1,0,0,0,4995,
        4993,1,0,0,0,4996,4985,1,0,0,0,4996,4986,1,0,0,0,4997,4999,1,0,0,
        0,4998,4984,1,0,0,0,4998,4999,1,0,0,0,4999,5009,1,0,0,0,5000,5006,
        5,190,0,0,5001,5002,5,71,0,0,5002,5005,5,119,0,0,5003,5005,3,446,
        223,0,5004,5001,1,0,0,0,5004,5003,1,0,0,0,5005,5008,1,0,0,0,5006,
        5004,1,0,0,0,5006,5007,1,0,0,0,5007,5010,1,0,0,0,5008,5006,1,0,0,
        0,5009,5000,1,0,0,0,5009,5010,1,0,0,0,5010,5017,1,0,0,0,5011,5012,
        5,12,0,0,5012,5013,3,546,273,0,5013,5014,5,190,0,0,5014,5015,5,594,
        0,0,5015,5016,3,426,213,0,5016,5018,1,0,0,0,5017,5011,1,0,0,0,5017,
        5018,1,0,0,0,5018,5055,1,0,0,0,5019,5022,5,71,0,0,5020,5023,3,546,
        273,0,5021,5023,3,564,282,0,5022,5020,1,0,0,0,5022,5021,1,0,0,0,
        5023,5031,1,0,0,0,5024,5027,5,1128,0,0,5025,5028,3,546,273,0,5026,
        5028,3,564,282,0,5027,5025,1,0,0,0,5027,5026,1,0,0,0,5028,5030,1,
        0,0,0,5029,5024,1,0,0,0,5030,5033,1,0,0,0,5031,5029,1,0,0,0,5031,
        5032,1,0,0,0,5032,5034,1,0,0,0,5033,5031,1,0,0,0,5034,5037,5,173,
        0,0,5035,5038,3,546,273,0,5036,5038,3,564,282,0,5037,5035,1,0,0,
        0,5037,5036,1,0,0,0,5038,5046,1,0,0,0,5039,5042,5,1128,0,0,5040,
        5043,3,546,273,0,5041,5043,3,564,282,0,5042,5040,1,0,0,0,5042,5041,
        1,0,0,0,5043,5045,1,0,0,0,5044,5039,1,0,0,0,5045,5048,1,0,0,0,5046,
        5044,1,0,0,0,5046,5047,1,0,0,0,5047,5052,1,0,0,0,5048,5046,1,0,0,
        0,5049,5050,5,190,0,0,5050,5051,5,695,0,0,5051,5053,5,119,0,0,5052,
        5049,1,0,0,0,5052,5053,1,0,0,0,5053,5055,1,0,0,0,5054,4961,1,0,0,
        0,5054,5019,1,0,0,0,5055,425,1,0,0,0,5056,5079,5,42,0,0,5057,5079,
        5,527,0,0,5058,5068,5,6,0,0,5059,5060,5,58,0,0,5060,5065,3,546,273,
        0,5061,5062,5,1128,0,0,5062,5064,3,546,273,0,5063,5061,1,0,0,0,5064,
        5067,1,0,0,0,5065,5063,1,0,0,0,5065,5066,1,0,0,0,5066,5069,1,0,0,
        0,5067,5065,1,0,0,0,5068,5059,1,0,0,0,5068,5069,1,0,0,0,5069,5079,
        1,0,0,0,5070,5075,3,546,273,0,5071,5072,5,1128,0,0,5072,5074,3,546,
        273,0,5073,5071,1,0,0,0,5074,5077,1,0,0,0,5075,5073,1,0,0,0,5075,
        5076,1,0,0,0,5076,5079,1,0,0,0,5077,5075,1,0,0,0,5078,5056,1,0,0,
        0,5078,5057,1,0,0,0,5078,5058,1,0,0,0,5078,5070,1,0,0,0,5079,427,
        1,0,0,0,5080,5081,5,71,0,0,5081,5082,5,564,0,0,5082,5083,5,117,0,
        0,5083,5084,3,546,273,0,5084,5085,5,173,0,0,5085,5090,3,546,273,
        0,5086,5087,5,1128,0,0,5087,5089,3,546,273,0,5088,5086,1,0,0,0,5089,
        5092,1,0,0,0,5090,5088,1,0,0,0,5090,5091,1,0,0,0,5091,5096,1,0,0,
        0,5092,5090,1,0,0,0,5093,5094,5,190,0,0,5094,5095,5,71,0,0,5095,
        5097,5,119,0,0,5096,5093,1,0,0,0,5096,5097,1,0,0,0,5097,429,1,0,
        0,0,5098,5099,5,138,0,0,5099,5100,5,663,0,0,5100,5105,3,458,229,
        0,5101,5102,5,1128,0,0,5102,5104,3,458,229,0,5103,5101,1,0,0,0,5104,
        5107,1,0,0,0,5105,5103,1,0,0,0,5105,5106,1,0,0,0,5106,431,1,0,0,
        0,5107,5105,1,0,0,0,5108,5109,5,146,0,0,5109,5114,3,452,226,0,5110,
        5111,5,1128,0,0,5111,5113,3,452,226,0,5112,5110,1,0,0,0,5113,5116,
        1,0,0,0,5114,5112,1,0,0,0,5114,5115,1,0,0,0,5115,5117,1,0,0,0,5116,
        5114,1,0,0,0,5117,5119,5,117,0,0,5118,5120,7,66,0,0,5119,5118,1,
        0,0,0,5119,5120,1,0,0,0,5120,5121,1,0,0,0,5121,5122,3,456,228,0,
        5122,5123,5,67,0,0,5123,5128,3,546,273,0,5124,5125,5,1128,0,0,5125,
        5127,3,546,273,0,5126,5124,1,0,0,0,5127,5130,1,0,0,0,5128,5126,1,
        0,0,0,5128,5129,1,0,0,0,5129,5179,1,0,0,0,5130,5128,1,0,0,0,5131,
        5132,5,146,0,0,5132,5134,5,6,0,0,5133,5135,5,720,0,0,5134,5133,1,
        0,0,0,5134,5135,1,0,0,0,5135,5136,1,0,0,0,5136,5137,5,1128,0,0,5137,
        5138,5,71,0,0,5138,5139,5,119,0,0,5139,5140,5,67,0,0,5140,5145,3,
        546,273,0,5141,5142,5,1128,0,0,5142,5144,3,546,273,0,5143,5141,1,
        0,0,0,5144,5147,1,0,0,0,5145,5143,1,0,0,0,5145,5146,1,0,0,0,5146,
        5179,1,0,0,0,5147,5145,1,0,0,0,5148,5151,5,146,0,0,5149,5152,3,546,
        273,0,5150,5152,3,564,282,0,5151,5149,1,0,0,0,5151,5150,1,0,0,0,
        5152,5160,1,0,0,0,5153,5156,5,1128,0,0,5154,5157,3,546,273,0,5155,
        5157,3,564,282,0,5156,5154,1,0,0,0,5156,5155,1,0,0,0,5157,5159,1,
        0,0,0,5158,5153,1,0,0,0,5159,5162,1,0,0,0,5160,5158,1,0,0,0,5160,
        5161,1,0,0,0,5161,5163,1,0,0,0,5162,5160,1,0,0,0,5163,5166,5,67,
        0,0,5164,5167,3,546,273,0,5165,5167,3,564,282,0,5166,5164,1,0,0,
        0,5166,5165,1,0,0,0,5167,5175,1,0,0,0,5168,5171,5,1128,0,0,5169,
        5172,3,546,273,0,5170,5172,3,564,282,0,5171,5169,1,0,0,0,5171,5170,
        1,0,0,0,5172,5174,1,0,0,0,5173,5168,1,0,0,0,5174,5177,1,0,0,0,5175,
        5173,1,0,0,0,5175,5176,1,0,0,0,5176,5179,1,0,0,0,5177,5175,1,0,0,
        0,5178,5108,1,0,0,0,5178,5131,1,0,0,0,5178,5148,1,0,0,0,5179,433,
        1,0,0,0,5180,5181,5,146,0,0,5181,5182,5,564,0,0,5182,5183,5,117,
        0,0,5183,5184,3,546,273,0,5184,5185,5,67,0,0,5185,5190,3,546,273,
        0,5186,5187,5,1128,0,0,5187,5189,3,546,273,0,5188,5186,1,0,0,0,5189,
        5192,1,0,0,0,5190,5188,1,0,0,0,5190,5191,1,0,0,0,5191,435,1,0,0,
        0,5192,5190,1,0,0,0,5193,5194,5,152,0,0,5194,5197,5,549,0,0,5195,
        5196,5,64,0,0,5196,5198,3,546,273,0,5197,5195,1,0,0,0,5197,5198,
        1,0,0,0,5198,5199,1,0,0,0,5199,5202,5,1117,0,0,5200,5203,3,662,331,
        0,5201,5203,5,1141,0,0,5202,5200,1,0,0,0,5202,5201,1,0,0,0,5203,
        437,1,0,0,0,5204,5205,3,546,273,0,5205,5206,3,448,224,0,5206,439,
        1,0,0,0,5207,5208,3,546,273,0,5208,5209,5,446,0,0,5209,5210,5,19,
        0,0,5210,5211,5,549,0,0,5211,5212,5,1141,0,0,5212,5229,1,0,0,0,5213,
        5214,3,546,273,0,5214,5215,5,446,0,0,5215,5216,5,19,0,0,5216,5220,
        5,1141,0,0,5217,5218,5,144,0,0,5218,5219,5,35,0,0,5219,5221,5,549,
        0,0,5220,5217,1,0,0,0,5220,5221,1,0,0,0,5221,5229,1,0,0,0,5222,5223,
        3,546,273,0,5223,5224,5,446,0,0,5224,5225,5,190,0,0,5225,5226,3,
        442,221,0,5226,5229,1,0,0,0,5227,5229,3,546,273,0,5228,5207,1,0,
        0,0,5228,5213,1,0,0,0,5228,5222,1,0,0,0,5228,5227,1,0,0,0,5229,441,
        1,0,0,0,5230,5233,3,562,281,0,5231,5232,7,67,0,0,5232,5234,5,1141,
        0,0,5233,5231,1,0,0,0,5233,5234,1,0,0,0,5234,5240,1,0,0,0,5235,5236,
        3,562,281,0,5236,5237,5,185,0,0,5237,5238,3,662,331,0,5238,5240,
        1,0,0,0,5239,5230,1,0,0,0,5239,5235,1,0,0,0,5240,443,1,0,0,0,5241,
        5250,5,165,0,0,5242,5250,5,678,0,0,5243,5244,5,356,0,0,5244,5250,
        5,1141,0,0,5245,5246,5,463,0,0,5246,5250,5,1141,0,0,5247,5248,5,
        638,0,0,5248,5250,5,1141,0,0,5249,5241,1,0,0,0,5249,5242,1,0,0,0,
        5249,5243,1,0,0,0,5249,5245,1,0,0,0,5249,5247,1,0,0,0,5250,445,1,
        0,0,0,5251,5252,5,497,0,0,5252,5260,3,570,285,0,5253,5254,5,500,
        0,0,5254,5260,3,570,285,0,5255,5256,5,496,0,0,5256,5260,3,570,285,
        0,5257,5258,5,501,0,0,5258,5260,3,570,285,0,5259,5251,1,0,0,0,5259,
        5253,1,0,0,0,5259,5255,1,0,0,0,5259,5257,1,0,0,0,5260,447,1,0,0,
        0,5261,5262,5,549,0,0,5262,5269,5,418,0,0,5263,5270,5,42,0,0,5264,
        5270,5,517,0,0,5265,5266,5,85,0,0,5266,5267,3,570,285,0,5267,5268,
        5,689,0,0,5268,5270,1,0,0,0,5269,5263,1,0,0,0,5269,5264,1,0,0,0,
        5269,5265,1,0,0,0,5269,5270,1,0,0,0,5270,5300,1,0,0,0,5271,5272,
        5,549,0,0,5272,5275,5,443,0,0,5273,5276,5,42,0,0,5274,5276,3,570,
        285,0,5275,5273,1,0,0,0,5275,5274,1,0,0,0,5276,5300,1,0,0,0,5277,
        5278,5,549,0,0,5278,5279,5,593,0,0,5279,5284,5,85,0,0,5280,5285,
        5,42,0,0,5281,5282,3,570,285,0,5282,5283,5,689,0,0,5283,5285,1,0,
        0,0,5284,5280,1,0,0,0,5284,5281,1,0,0,0,5285,5300,1,0,0,0,5286,5287,
        5,549,0,0,5287,5288,5,141,0,0,5288,5290,5,35,0,0,5289,5291,7,68,
        0,0,5290,5289,1,0,0,0,5290,5291,1,0,0,0,5291,5300,1,0,0,0,5292,5293,
        5,422,0,0,5293,5300,3,570,285,0,5294,5297,5,550,0,0,5295,5298,3,
        570,285,0,5296,5298,5,655,0,0,5297,5295,1,0,0,0,5297,5296,1,0,0,
        0,5298,5300,1,0,0,0,5299,5261,1,0,0,0,5299,5271,1,0,0,0,5299,5277,
        1,0,0,0,5299,5286,1,0,0,0,5299,5292,1,0,0,0,5299,5294,1,0,0,0,5300,
        449,1,0,0,0,5301,5302,5,330,0,0,5302,5303,7,69,0,0,5303,451,1,0,
        0,0,5304,5309,3,454,227,0,5305,5306,5,1126,0,0,5306,5307,3,596,298,
        0,5307,5308,5,1127,0,0,5308,5310,1,0,0,0,5309,5305,1,0,0,0,5309,
        5310,1,0,0,0,5310,453,1,0,0,0,5311,5313,5,6,0,0,5312,5314,5,720,
        0,0,5313,5312,1,0,0,0,5313,5314,1,0,0,0,5314,5400,1,0,0,0,5315,5317,
        5,7,0,0,5316,5318,5,728,0,0,5317,5316,1,0,0,0,5317,5318,1,0,0,0,
        5318,5400,1,0,0,0,5319,5327,5,33,0,0,5320,5321,5,647,0,0,5321,5328,
        5,737,0,0,5322,5328,5,728,0,0,5323,5328,5,669,0,0,5324,5328,5,663,
        0,0,5325,5328,5,645,0,0,5326,5328,5,594,0,0,5327,5320,1,0,0,0,5327,
        5322,1,0,0,0,5327,5323,1,0,0,0,5327,5324,1,0,0,0,5327,5325,1,0,0,
        0,5327,5326,1,0,0,0,5327,5328,1,0,0,0,5328,5400,1,0,0,0,5329,5400,
        5,44,0,0,5330,5332,5,51,0,0,5331,5333,5,594,0,0,5332,5331,1,0,0,
        0,5332,5333,1,0,0,0,5333,5400,1,0,0,0,5334,5400,5,413,0,0,5335,5400,
        5,704,0,0,5336,5400,5,705,0,0,5337,5338,5,71,0,0,5338,5400,5,119,
        0,0,5339,5400,5,80,0,0,5340,5400,5,84,0,0,5341,5342,5,102,0,0,5342,
        5400,5,737,0,0,5343,5400,5,721,0,0,5344,5400,5,564,0,0,5345,5400,
        5,135,0,0,5346,5400,5,722,0,0,5347,5348,5,586,0,0,5348,5400,7,70,
        0,0,5349,5400,5,151,0,0,5350,5351,5,154,0,0,5351,5400,7,71,0,0,5352,
        5400,5,734,0,0,5353,5400,5,735,0,0,5354,5400,5,175,0,0,5355,5400,
        5,182,0,0,5356,5400,5,183,0,0,5357,5400,5,696,0,0,5358,5400,5,697,
        0,0,5359,5400,5,698,0,0,5360,5400,5,699,0,0,5361,5400,5,700,0,0,
        5362,5400,5,701,0,0,5363,5400,5,702,0,0,5364,5400,5,703,0,0,5365,
        5400,5,706,0,0,5366,5400,5,707,0,0,5367,5400,5,708,0,0,5368,5400,
        5,709,0,0,5369,5400,5,710,0,0,5370,5400,5,711,0,0,5371,5400,5,712,
        0,0,5372,5400,5,713,0,0,5373,5400,5,714,0,0,5374,5400,5,717,0,0,
        5375,5400,5,718,0,0,5376,5400,5,719,0,0,5377,5400,5,723,0,0,5378,
        5400,5,724,0,0,5379,5400,5,725,0,0,5380,5400,5,726,0,0,5381,5400,
        5,727,0,0,5382,5400,5,730,0,0,5383,5400,5,731,0,0,5384,5400,5,732,
        0,0,5385,5400,5,733,0,0,5386,5400,5,1071,0,0,5387,5400,5,736,0,0,
        5388,5400,5,738,0,0,5389,5400,5,739,0,0,5390,5400,5,740,0,0,5391,
        5392,5,101,0,0,5392,5393,5,67,0,0,5393,5400,5,729,0,0,5394,5395,
        5,151,0,0,5395,5396,5,86,0,0,5396,5400,5,729,0,0,5397,5398,5,715,
        0,0,5398,5400,5,716,0,0,5399,5311,1,0,0,0,5399,5315,1,0,0,0,5399,
        5319,1,0,0,0,5399,5329,1,0,0,0,5399,5330,1,0,0,0,5399,5334,1,0,0,
        0,5399,5335,1,0,0,0,5399,5336,1,0,0,0,5399,5337,1,0,0,0,5399,5339,
        1,0,0,0,5399,5340,1,0,0,0,5399,5341,1,0,0,0,5399,5343,1,0,0,0,5399,
        5344,1,0,0,0,5399,5345,1,0,0,0,5399,5346,1,0,0,0,5399,5347,1,0,0,
        0,5399,5349,1,0,0,0,5399,5350,1,0,0,0,5399,5352,1,0,0,0,5399,5353,
        1,0,0,0,5399,5354,1,0,0,0,5399,5355,1,0,0,0,5399,5356,1,0,0,0,5399,
        5357,1,0,0,0,5399,5358,1,0,0,0,5399,5359,1,0,0,0,5399,5360,1,0,0,
        0,5399,5361,1,0,0,0,5399,5362,1,0,0,0,5399,5363,1,0,0,0,5399,5364,
        1,0,0,0,5399,5365,1,0,0,0,5399,5366,1,0,0,0,5399,5367,1,0,0,0,5399,
        5368,1,0,0,0,5399,5369,1,0,0,0,5399,5370,1,0,0,0,5399,5371,1,0,0,
        0,5399,5372,1,0,0,0,5399,5373,1,0,0,0,5399,5374,1,0,0,0,5399,5375,
        1,0,0,0,5399,5376,1,0,0,0,5399,5377,1,0,0,0,5399,5378,1,0,0,0,5399,
        5379,1,0,0,0,5399,5380,1,0,0,0,5399,5381,1,0,0,0,5399,5382,1,0,0,
        0,5399,5383,1,0,0,0,5399,5384,1,0,0,0,5399,5385,1,0,0,0,5399,5386,
        1,0,0,0,5399,5387,1,0,0,0,5399,5388,1,0,0,0,5399,5389,1,0,0,0,5399,
        5390,1,0,0,0,5399,5391,1,0,0,0,5399,5394,1,0,0,0,5399,5397,1,0,0,
        0,5400,455,1,0,0,0,5401,5418,5,1110,0,0,5402,5403,5,1110,0,0,5403,
        5404,5,1125,0,0,5404,5418,5,1110,0,0,5405,5406,3,564,282,0,5406,
        5407,5,1125,0,0,5407,5408,5,1110,0,0,5408,5418,1,0,0,0,5409,5410,
        3,564,282,0,5410,5411,5,1125,0,0,5411,5412,3,564,282,0,5412,5418,
        1,0,0,0,5413,5414,3,564,282,0,5414,5415,3,568,284,0,5415,5418,1,
        0,0,0,5416,5418,3,564,282,0,5417,5401,1,0,0,0,5417,5402,1,0,0,0,
        5417,5405,1,0,0,0,5417,5409,1,0,0,0,5417,5413,1,0,0,0,5417,5416,
        1,0,0,0,5418,457,1,0,0,0,5419,5420,3,546,273,0,5420,5421,5,173,0,
        0,5421,5422,3,546,273,0,5422,459,1,0,0,0,5423,5425,5,9,0,0,5424,
        5426,7,72,0,0,5425,5424,1,0,0,0,5425,5426,1,0,0,0,5426,5427,1,0,
        0,0,5427,5428,7,54,0,0,5428,5446,3,600,300,0,5429,5430,5,182,0,0,
        5430,5431,5,75,0,0,5431,5432,5,117,0,0,5432,5437,3,542,271,0,5433,
        5434,5,1128,0,0,5434,5436,3,542,271,0,5435,5433,1,0,0,0,5436,5439,
        1,0,0,0,5437,5435,1,0,0,0,5437,5438,1,0,0,0,5438,5444,1,0,0,0,5439,
        5437,1,0,0,0,5440,5441,5,190,0,0,5441,5442,3,570,285,0,5442,5443,
        5,18,0,0,5443,5445,1,0,0,0,5444,5440,1,0,0,0,5444,5445,1,0,0,0,5445,
        5447,1,0,0,0,5446,5429,1,0,0,0,5446,5447,1,0,0,0,5447,5459,1,0,0,
        0,5448,5449,5,51,0,0,5449,5450,5,75,0,0,5450,5451,5,117,0,0,5451,
        5456,3,542,271,0,5452,5453,5,1128,0,0,5453,5455,3,542,271,0,5454,
        5452,1,0,0,0,5455,5458,1,0,0,0,5456,5454,1,0,0,0,5456,5457,1,0,0,
        0,5457,5460,1,0,0,0,5458,5456,1,0,0,0,5459,5448,1,0,0,0,5459,5460,
        1,0,0,0,5460,461,1,0,0,0,5461,5462,5,26,0,0,5462,5463,5,170,0,0,
        5463,5467,3,600,300,0,5464,5466,3,470,235,0,5465,5464,1,0,0,0,5466,
        5469,1,0,0,0,5467,5465,1,0,0,0,5467,5468,1,0,0,0,5468,463,1,0,0,
        0,5469,5467,1,0,0,0,5470,5471,5,354,0,0,5471,5472,5,170,0,0,5472,
        5474,3,600,300,0,5473,5475,7,73,0,0,5474,5473,1,0,0,0,5474,5475,
        1,0,0,0,5475,465,1,0,0,0,5476,5478,5,118,0,0,5477,5479,7,72,0,0,
        5478,5477,1,0,0,0,5478,5479,1,0,0,0,5479,5480,1,0,0,0,5480,5481,
        7,54,0,0,5481,5482,3,600,300,0,5482,467,1,0,0,0,5483,5485,5,578,
        0,0,5484,5486,7,72,0,0,5485,5484,1,0,0,0,5485,5486,1,0,0,0,5486,
        5487,1,0,0,0,5487,5488,5,170,0,0,5488,5490,3,600,300,0,5489,5491,
        5,566,0,0,5490,5489,1,0,0,0,5490,5491,1,0,0,0,5491,5493,1,0,0,0,
        5492,5494,5,420,0,0,5493,5492,1,0,0,0,5493,5494,1,0,0,0,5494,5496,
        1,0,0,0,5495,5497,5,664,0,0,5496,5495,1,0,0,0,5496,5497,1,0,0,0,
        5497,469,1,0,0,0,5498,5499,5,64,0,0,5499,5506,5,662,0,0,5500,5506,
        5,566,0,0,5501,5506,5,423,0,0,5502,5506,5,502,0,0,5503,5506,5,420,
        0,0,5504,5506,5,352,0,0,5505,5498,1,0,0,0,5505,5500,1,0,0,0,5505,
        5501,1,0,0,0,5505,5502,1,0,0,0,5505,5503,1,0,0,0,5505,5504,1,0,0,
        0,5506,471,1,0,0,0,5507,5509,5,33,0,0,5508,5510,5,333,0,0,5509,5508,
        1,0,0,0,5509,5510,1,0,0,0,5510,5511,1,0,0,0,5511,5513,5,435,0,0,
        5512,5514,3,622,311,0,5513,5512,1,0,0,0,5513,5514,1,0,0,0,5514,5515,
        1,0,0,0,5515,5516,3,564,282,0,5516,5517,5,592,0,0,5517,5518,7,74,
        0,0,5518,5519,5,617,0,0,5519,5520,5,1141,0,0,5520,473,1,0,0,0,5521,
        5522,5,454,0,0,5522,5523,5,552,0,0,5523,5524,3,564,282,0,5524,5525,
        5,617,0,0,5525,5526,5,1141,0,0,5526,475,1,0,0,0,5527,5528,5,659,
        0,0,5528,5529,5,552,0,0,5529,5530,3,564,282,0,5530,477,1,0,0,0,5531,
        5532,5,152,0,0,5532,5533,3,482,241,0,5533,5536,7,75,0,0,5534,5537,
        3,668,334,0,5535,5537,5,117,0,0,5536,5534,1,0,0,0,5536,5535,1,0,
        0,0,5537,5547,1,0,0,0,5538,5539,5,1128,0,0,5539,5540,3,482,241,0,
        5540,5543,7,75,0,0,5541,5544,3,668,334,0,5542,5544,5,117,0,0,5543,
        5541,1,0,0,0,5543,5542,1,0,0,0,5544,5546,1,0,0,0,5545,5538,1,0,0,
        0,5546,5549,1,0,0,0,5547,5545,1,0,0,0,5547,5548,1,0,0,0,5548,5584,
        1,0,0,0,5549,5547,1,0,0,0,5550,5551,5,152,0,0,5551,5554,3,60,30,
        0,5552,5555,3,550,275,0,5553,5555,5,42,0,0,5554,5552,1,0,0,0,5554,
        5553,1,0,0,0,5555,5584,1,0,0,0,5556,5557,5,152,0,0,5557,5564,5,515,
        0,0,5558,5561,3,550,275,0,5559,5560,5,27,0,0,5560,5562,3,552,276,
        0,5561,5559,1,0,0,0,5561,5562,1,0,0,0,5562,5565,1,0,0,0,5563,5565,
        5,42,0,0,5564,5558,1,0,0,0,5564,5563,1,0,0,0,5565,5584,1,0,0,0,5566,
        5584,3,436,218,0,5567,5584,3,310,155,0,5568,5584,3,308,154,0,5569,
        5570,5,152,0,0,5570,5571,3,536,268,0,5571,5572,7,75,0,0,5572,5580,
        3,668,334,0,5573,5574,5,1128,0,0,5574,5575,3,536,268,0,5575,5576,
        7,75,0,0,5576,5577,3,668,334,0,5577,5579,1,0,0,0,5578,5573,1,0,0,
        0,5579,5582,1,0,0,0,5580,5578,1,0,0,0,5580,5581,1,0,0,0,5581,5584,
        1,0,0,0,5582,5580,1,0,0,0,5583,5531,1,0,0,0,5583,5550,1,0,0,0,5583,
        5556,1,0,0,0,5583,5566,1,0,0,0,5583,5567,1,0,0,0,5583,5568,1,0,0,
        0,5583,5569,1,0,0,0,5584,479,1,0,0,0,5585,5586,5,154,0,0,5586,5587,
        7,56,0,0,5587,5739,5,474,0,0,5588,5589,5,154,0,0,5589,5590,7,76,
        0,0,5590,5593,5,414,0,0,5591,5592,5,79,0,0,5592,5594,5,1141,0,0,
        5593,5591,1,0,0,0,5593,5594,1,0,0,0,5594,5597,1,0,0,0,5595,5596,
        5,67,0,0,5596,5598,3,570,285,0,5597,5595,1,0,0,0,5597,5598,1,0,0,
        0,5598,5606,1,0,0,0,5599,5603,5,98,0,0,5600,5601,3,570,285,0,5601,
        5602,5,1128,0,0,5602,5604,1,0,0,0,5603,5600,1,0,0,0,5603,5604,1,
        0,0,0,5604,5605,1,0,0,0,5605,5607,3,570,285,0,5606,5599,1,0,0,0,
        5606,5607,1,0,0,0,5607,5739,1,0,0,0,5608,5609,5,154,0,0,5609,5611,
        3,484,242,0,5610,5612,3,486,243,0,5611,5610,1,0,0,0,5611,5612,1,
        0,0,0,5612,5739,1,0,0,0,5613,5615,5,154,0,0,5614,5616,5,434,0,0,
        5615,5614,1,0,0,0,5615,5616,1,0,0,0,5616,5617,1,0,0,0,5617,5618,
        7,41,0,0,5618,5619,7,77,0,0,5619,5622,3,538,269,0,5620,5621,7,77,
        0,0,5621,5623,3,564,282,0,5622,5620,1,0,0,0,5622,5623,1,0,0,0,5623,
        5625,1,0,0,0,5624,5626,3,486,243,0,5625,5624,1,0,0,0,5625,5626,1,
        0,0,0,5626,5739,1,0,0,0,5627,5628,5,154,0,0,5628,5629,5,33,0,0,5629,
        5631,7,0,0,0,5630,5632,3,622,311,0,5631,5630,1,0,0,0,5631,5632,1,
        0,0,0,5632,5633,1,0,0,0,5633,5739,3,564,282,0,5634,5635,5,154,0,
        0,5635,5636,5,33,0,0,5636,5637,7,78,0,0,5637,5739,3,536,268,0,5638,
        5639,5,154,0,0,5639,5640,5,33,0,0,5640,5641,5,663,0,0,5641,5739,
        3,546,273,0,5642,5643,5,154,0,0,5643,5644,5,407,0,0,5644,5645,3,
        554,277,0,5645,5646,7,79,0,0,5646,5739,1,0,0,0,5647,5648,5,154,0,
        0,5648,5739,3,488,244,0,5649,5650,5,154,0,0,5650,5658,7,80,0,0,5651,
        5655,5,98,0,0,5652,5653,3,570,285,0,5653,5654,5,1128,0,0,5654,5656,
        1,0,0,0,5655,5652,1,0,0,0,5655,5656,1,0,0,0,5656,5657,1,0,0,0,5657,
        5659,3,570,285,0,5658,5651,1,0,0,0,5658,5659,1,0,0,0,5659,5739,1,
        0,0,0,5660,5661,5,154,0,0,5661,5662,5,288,0,0,5662,5663,5,1126,0,
        0,5663,5664,5,1110,0,0,5664,5665,5,1127,0,0,5665,5739,7,80,0,0,5666,
        5667,5,154,0,0,5667,5670,3,490,245,0,5668,5669,7,77,0,0,5669,5671,
        3,564,282,0,5670,5668,1,0,0,0,5670,5671,1,0,0,0,5671,5673,1,0,0,
        0,5672,5674,3,486,243,0,5673,5672,1,0,0,0,5673,5674,1,0,0,0,5674,
        5739,1,0,0,0,5675,5676,5,154,0,0,5676,5677,7,81,0,0,5677,5678,5,
        362,0,0,5678,5739,3,536,268,0,5679,5680,5,154,0,0,5680,5683,5,438,
        0,0,5681,5682,5,64,0,0,5682,5684,3,546,273,0,5683,5681,1,0,0,0,5683,
        5684,1,0,0,0,5684,5739,1,0,0,0,5685,5686,5,154,0,0,5686,5687,7,82,
        0,0,5687,5688,7,77,0,0,5688,5691,3,538,269,0,5689,5690,7,77,0,0,
        5690,5692,3,564,282,0,5691,5689,1,0,0,0,5691,5692,1,0,0,0,5692,5695,
        1,0,0,0,5693,5694,5,188,0,0,5694,5696,3,668,334,0,5695,5693,1,0,
        0,0,5695,5696,1,0,0,0,5696,5739,1,0,0,0,5697,5698,5,154,0,0,5698,
        5699,5,537,0,0,5699,5702,5,737,0,0,5700,5701,7,77,0,0,5701,5703,
        3,564,282,0,5702,5700,1,0,0,0,5702,5703,1,0,0,0,5703,5705,1,0,0,
        0,5704,5706,3,486,243,0,5705,5704,1,0,0,0,5705,5706,1,0,0,0,5706,
        5739,1,0,0,0,5707,5708,5,154,0,0,5708,5709,5,562,0,0,5709,5714,3,
        492,246,0,5710,5711,5,1128,0,0,5711,5713,3,492,246,0,5712,5710,1,
        0,0,0,5713,5716,1,0,0,0,5714,5712,1,0,0,0,5714,5715,1,0,0,0,5715,
        5720,1,0,0,0,5716,5714,1,0,0,0,5717,5718,5,64,0,0,5718,5719,5,565,
        0,0,5719,5721,3,570,285,0,5720,5717,1,0,0,0,5720,5721,1,0,0,0,5721,
        5722,1,0,0,0,5722,5726,5,98,0,0,5723,5724,3,570,285,0,5724,5725,
        5,1128,0,0,5725,5727,1,0,0,0,5726,5723,1,0,0,0,5726,5727,1,0,0,0,
        5727,5728,1,0,0,0,5728,5729,3,570,285,0,5729,5739,1,0,0,0,5730,5731,
        5,154,0,0,5731,5732,5,612,0,0,5732,5736,5,632,0,0,5733,5734,5,64,
        0,0,5734,5735,5,353,0,0,5735,5737,5,1141,0,0,5736,5733,1,0,0,0,5736,
        5737,1,0,0,0,5737,5739,1,0,0,0,5738,5585,1,0,0,0,5738,5588,1,0,0,
        0,5738,5608,1,0,0,0,5738,5613,1,0,0,0,5738,5627,1,0,0,0,5738,5634,
        1,0,0,0,5738,5638,1,0,0,0,5738,5642,1,0,0,0,5738,5647,1,0,0,0,5738,
        5649,1,0,0,0,5738,5660,1,0,0,0,5738,5666,1,0,0,0,5738,5675,1,0,0,
        0,5738,5679,1,0,0,0,5738,5685,1,0,0,0,5738,5697,1,0,0,0,5738,5707,
        1,0,0,0,5738,5730,1,0,0,0,5739,481,1,0,0,0,5740,5751,5,1153,0,0,
        5741,5751,5,1154,0,0,5742,5743,5,1130,0,0,5743,5745,5,1130,0,0,5744,
        5742,1,0,0,0,5744,5745,1,0,0,0,5745,5746,1,0,0,0,5746,5748,7,83,
        0,0,5747,5744,1,0,0,0,5747,5748,1,0,0,0,5748,5749,1,0,0,0,5749,5751,
        3,564,282,0,5750,5740,1,0,0,0,5750,5741,1,0,0,0,5750,5747,1,0,0,
        0,5751,483,1,0,0,0,5752,5753,5,25,0,0,5753,5766,5,152,0,0,5754,5766,
        5,839,0,0,5755,5766,5,40,0,0,5756,5766,5,150,0,0,5757,5758,5,435,
        0,0,5758,5766,5,632,0,0,5759,5760,5,130,0,0,5760,5766,5,632,0,0,
        5761,5763,7,55,0,0,5762,5761,1,0,0,0,5762,5763,1,0,0,0,5763,5764,
        1,0,0,0,5764,5766,7,84,0,0,5765,5752,1,0,0,0,5765,5754,1,0,0,0,5765,
        5755,1,0,0,0,5765,5756,1,0,0,0,5765,5757,1,0,0,0,5765,5759,1,0,0,
        0,5765,5762,1,0,0,0,5766,485,1,0,0,0,5767,5768,5,97,0,0,5768,5772,
        5,1141,0,0,5769,5770,5,188,0,0,5770,5772,3,668,334,0,5771,5767,1,
        0,0,0,5771,5769,1,0,0,0,5772,487,1,0,0,0,5773,5775,5,634,0,0,5774,
        5773,1,0,0,0,5774,5775,1,0,0,0,5775,5776,1,0,0,0,5776,5791,5,408,
        0,0,5777,5778,5,475,0,0,5778,5791,5,632,0,0,5779,5791,5,554,0,0,
        5780,5791,5,720,0,0,5781,5783,5,434,0,0,5782,5781,1,0,0,0,5782,5783,
        1,0,0,0,5783,5784,1,0,0,0,5784,5791,5,561,0,0,5785,5791,5,563,0,
        0,5786,5787,5,612,0,0,5787,5791,5,445,0,0,5788,5791,5,337,0,0,5789,
        5791,5,381,0,0,5790,5774,1,0,0,0,5790,5777,1,0,0,0,5790,5779,1,0,
        0,0,5790,5780,1,0,0,0,5790,5782,1,0,0,0,5790,5785,1,0,0,0,5790,5786,
        1,0,0,0,5790,5788,1,0,0,0,5790,5789,1,0,0,0,5791,489,1,0,0,0,5792,
        5801,5,414,0,0,5793,5794,5,170,0,0,5794,5801,5,632,0,0,5795,5797,
        5,434,0,0,5796,5795,1,0,0,0,5796,5797,1,0,0,0,5797,5798,1,0,0,0,
        5798,5801,5,737,0,0,5799,5801,5,653,0,0,5800,5792,1,0,0,0,5800,5793,
        1,0,0,0,5800,5796,1,0,0,0,5800,5799,1,0,0,0,5801,491,1,0,0,0,5802,
        5815,5,6,0,0,5803,5804,5,345,0,0,5804,5815,5,459,0,0,5805,5806,5,
        380,0,0,5806,5815,5,643,0,0,5807,5815,5,383,0,0,5808,5815,5,461,
        0,0,5809,5815,5,787,0,0,5810,5811,5,542,0,0,5811,5815,5,424,0,0,
        5812,5815,5,619,0,0,5813,5815,5,642,0,0,5814,5802,1,0,0,0,5814,5803,
        1,0,0,0,5814,5805,1,0,0,0,5814,5807,1,0,0,0,5814,5808,1,0,0,0,5814,
        5809,1,0,0,0,5814,5810,1,0,0,0,5814,5812,1,0,0,0,5814,5813,1,0,0,
        0,5815,493,1,0,0,0,5816,5817,5,343,0,0,5817,5818,5,1141,0,0,5818,
        495,1,0,0,0,5819,5820,5,349,0,0,5820,5821,5,80,0,0,5821,5826,3,508,
        254,0,5822,5823,5,1128,0,0,5823,5825,3,508,254,0,5824,5822,1,0,0,
        0,5825,5828,1,0,0,0,5826,5824,1,0,0,0,5826,5827,1,0,0,0,5827,5836,
        1,0,0,0,5828,5826,1,0,0,0,5829,5830,5,128,0,0,5830,5833,5,1126,0,
        0,5831,5834,3,596,298,0,5832,5834,5,6,0,0,5833,5831,1,0,0,0,5833,
        5832,1,0,0,0,5834,5835,1,0,0,0,5835,5837,5,1127,0,0,5836,5829,1,
        0,0,0,5836,5837,1,0,0,0,5837,5838,1,0,0,0,5838,5839,5,79,0,0,5839,
        5840,3,564,282,0,5840,497,1,0,0,0,5841,5843,5,430,0,0,5842,5844,
        7,72,0,0,5843,5842,1,0,0,0,5843,5844,1,0,0,0,5844,5845,1,0,0,0,5845,
        5850,3,510,255,0,5846,5847,5,1128,0,0,5847,5849,3,510,255,0,5848,
        5846,1,0,0,0,5849,5852,1,0,0,0,5850,5848,1,0,0,0,5850,5851,1,0,0,
        0,5851,499,1,0,0,0,5852,5850,1,0,0,0,5853,5855,5,92,0,0,5854,5856,
        7,85,0,0,5855,5854,1,0,0,0,5855,5856,1,0,0,0,5856,5857,1,0,0,0,5857,
        5858,3,668,334,0,5858,501,1,0,0,0,5859,5860,5,101,0,0,5860,5861,
        5,80,0,0,5861,5862,5,86,0,0,5862,5863,5,349,0,0,5863,5868,3,514,
        257,0,5864,5865,5,1128,0,0,5865,5867,3,514,257,0,5866,5864,1,0,0,
        0,5867,5870,1,0,0,0,5868,5866,1,0,0,0,5868,5869,1,0,0,0,5869,503,
        1,0,0,0,5870,5868,1,0,0,0,5871,5872,5,587,0,0,5872,5873,5,565,0,
        0,5873,5874,5,349,0,0,5874,505,1,0,0,0,5875,5876,5,734,0,0,5876,
        507,1,0,0,0,5877,5885,3,538,269,0,5878,5880,7,20,0,0,5879,5878,1,
        0,0,0,5879,5880,1,0,0,0,5880,5881,1,0,0,0,5881,5882,5,1126,0,0,5882,
        5883,3,596,298,0,5883,5884,5,1127,0,0,5884,5886,1,0,0,0,5885,5879,
        1,0,0,0,5885,5886,1,0,0,0,5886,509,1,0,0,0,5887,5906,5,392,0,0,5888,
        5906,5,445,0,0,5889,5891,7,86,0,0,5890,5889,1,0,0,0,5890,5891,1,
        0,0,0,5891,5892,1,0,0,0,5892,5906,5,474,0,0,5893,5906,5,538,0,0,
        5894,5906,5,720,0,0,5895,5896,5,565,0,0,5896,5906,5,349,0,0,5897,
        5906,5,632,0,0,5898,5906,5,665,0,0,5899,5903,5,737,0,0,5900,5901,
        5,190,0,0,5901,5902,5,133,0,0,5902,5904,5,102,0,0,5903,5900,1,0,
        0,0,5903,5904,1,0,0,0,5904,5906,1,0,0,0,5905,5887,1,0,0,0,5905,5888,
        1,0,0,0,5905,5890,1,0,0,0,5905,5893,1,0,0,0,5905,5894,1,0,0,0,5905,
        5895,1,0,0,0,5905,5897,1,0,0,0,5905,5898,1,0,0,0,5905,5899,1,0,0,
        0,5906,5920,1,0,0,0,5907,5908,5,572,0,0,5908,5910,5,474,0,0,5909,
        5911,3,348,174,0,5910,5909,1,0,0,0,5910,5911,1,0,0,0,5911,5920,1,
        0,0,0,5912,5914,7,54,0,0,5913,5915,3,600,300,0,5914,5913,1,0,0,0,
        5914,5915,1,0,0,0,5915,5917,1,0,0,0,5916,5918,3,512,256,0,5917,5916,
        1,0,0,0,5917,5918,1,0,0,0,5918,5920,1,0,0,0,5919,5905,1,0,0,0,5919,
        5907,1,0,0,0,5919,5912,1,0,0,0,5920,511,1,0,0,0,5921,5922,5,190,
        0,0,5922,5923,5,133,0,0,5923,5927,5,102,0,0,5924,5925,5,64,0,0,5925,
        5927,5,419,0,0,5926,5921,1,0,0,0,5926,5924,1,0,0,0,5927,513,1,0,
        0,0,5928,5936,3,538,269,0,5929,5930,5,128,0,0,5930,5933,5,1126,0,
        0,5931,5934,3,596,298,0,5932,5934,5,6,0,0,5933,5931,1,0,0,0,5933,
        5932,1,0,0,0,5934,5935,1,0,0,0,5935,5937,5,1127,0,0,5936,5929,1,
        0,0,0,5936,5937,1,0,0,0,5937,5945,1,0,0,0,5938,5940,7,20,0,0,5939,
        5938,1,0,0,0,5939,5940,1,0,0,0,5940,5941,1,0,0,0,5941,5942,5,1126,
        0,0,5942,5943,3,596,298,0,5943,5944,5,1127,0,0,5944,5946,1,0,0,0,
        5945,5939,1,0,0,0,5945,5946,1,0,0,0,5946,5949,1,0,0,0,5947,5948,
        5,77,0,0,5948,5950,5,468,0,0,5949,5947,1,0,0,0,5949,5950,1,0,0,0,
        5950,515,1,0,0,0,5951,5952,7,87,0,0,5952,5955,3,538,269,0,5953,5956,
        3,564,282,0,5954,5956,5,1141,0,0,5955,5953,1,0,0,0,5955,5954,1,0,
        0,0,5955,5956,1,0,0,0,5956,517,1,0,0,0,5957,5961,7,87,0,0,5958,5959,
        7,88,0,0,5959,5960,5,1117,0,0,5960,5962,7,89,0,0,5961,5958,1,0,0,
        0,5961,5962,1,0,0,0,5962,5963,1,0,0,0,5963,5964,3,534,267,0,5964,
        519,1,0,0,0,5965,5966,5,442,0,0,5966,5967,5,1141,0,0,5967,521,1,
        0,0,0,5968,5969,5,184,0,0,5969,5970,3,564,282,0,5970,523,1,0,0,0,
        5971,5979,5,155,0,0,5972,5974,5,160,0,0,5973,5975,5,667,0,0,5974,
        5973,1,0,0,0,5974,5975,1,0,0,0,5975,5976,1,0,0,0,5976,5980,3,574,
        287,0,5977,5980,5,1149,0,0,5978,5980,5,1150,0,0,5979,5972,1,0,0,
        0,5979,5977,1,0,0,0,5979,5978,1,0,0,0,5980,5990,1,0,0,0,5981,5982,
        5,152,0,0,5982,5987,3,528,264,0,5983,5984,5,1128,0,0,5984,5986,3,
        528,264,0,5985,5983,1,0,0,0,5986,5989,1,0,0,0,5987,5985,1,0,0,0,
        5987,5988,1,0,0,0,5988,5991,1,0,0,0,5989,5987,1,0,0,0,5990,5981,
        1,0,0,0,5990,5991,1,0,0,0,5991,525,1,0,0,0,5992,6000,5,142,0,0,5993,
        5995,5,160,0,0,5994,5996,5,667,0,0,5995,5994,1,0,0,0,5995,5996,1,
        0,0,0,5996,5997,1,0,0,0,5997,6001,3,574,287,0,5998,6001,5,1149,0,
        0,5999,6001,5,1150,0,0,6000,5993,1,0,0,0,6000,5998,1,0,0,0,6000,
        5999,1,0,0,0,6000,6001,1,0,0,0,6001,6011,1,0,0,0,6002,6003,5,152,
        0,0,6003,6008,3,528,264,0,6004,6005,5,1128,0,0,6005,6007,3,528,264,
        0,6006,6004,1,0,0,0,6007,6010,1,0,0,0,6008,6006,1,0,0,0,6008,6009,
        1,0,0,0,6009,6012,1,0,0,0,6010,6008,1,0,0,0,6011,6002,1,0,0,0,6011,
        6012,1,0,0,0,6012,527,1,0,0,0,6013,6014,7,90,0,0,6014,6019,5,1117,
        0,0,6015,6020,3,574,287,0,6016,6020,5,1142,0,0,6017,6020,3,548,274,
        0,6018,6020,3,566,283,0,6019,6015,1,0,0,0,6019,6016,1,0,0,0,6019,
        6017,1,0,0,0,6019,6018,1,0,0,0,6020,529,1,0,0,0,6021,6023,5,70,0,
        0,6022,6024,7,91,0,0,6023,6022,1,0,0,0,6023,6024,1,0,0,0,6024,6025,
        1,0,0,0,6025,6057,5,48,0,0,6026,6027,3,482,241,0,6027,6028,5,1117,
        0,0,6028,6036,7,92,0,0,6029,6030,5,1128,0,0,6030,6031,3,482,241,
        0,6031,6032,5,1117,0,0,6032,6033,7,92,0,0,6033,6035,1,0,0,0,6034,
        6029,1,0,0,0,6035,6038,1,0,0,0,6036,6034,1,0,0,0,6036,6037,1,0,0,
        0,6037,6058,1,0,0,0,6038,6036,1,0,0,0,6039,6042,5,29,0,0,6040,6043,
        3,570,285,0,6041,6043,3,482,241,0,6042,6040,1,0,0,0,6042,6041,1,
        0,0,0,6043,6044,1,0,0,0,6044,6045,3,482,241,0,6045,6046,5,1117,0,
        0,6046,6054,3,532,266,0,6047,6048,5,1128,0,0,6048,6049,3,482,241,
        0,6049,6050,5,1117,0,0,6050,6051,3,532,266,0,6051,6053,1,0,0,0,6052,
        6047,1,0,0,0,6053,6056,1,0,0,0,6054,6052,1,0,0,0,6054,6055,1,0,0,
        0,6055,6058,1,0,0,0,6056,6054,1,0,0,0,6057,6026,1,0,0,0,6057,6039,
        1,0,0,0,6058,531,1,0,0,0,6059,6060,7,93,0,0,6060,533,1,0,0,0,6061,
        6067,3,196,98,0,6062,6067,3,182,91,0,6063,6067,3,188,94,0,6064,6067,
        3,194,97,0,6065,6067,3,198,99,0,6066,6061,1,0,0,0,6066,6062,1,0,
        0,0,6066,6063,1,0,0,0,6066,6064,1,0,0,0,6066,6065,1,0,0,0,6067,6072,
        1,0,0,0,6068,6069,5,64,0,0,6069,6070,5,374,0,0,6070,6072,3,564,282,
        0,6071,6066,1,0,0,0,6071,6068,1,0,0,0,6072,535,1,0,0,0,6073,6077,
        3,564,282,0,6074,6078,5,1148,0,0,6075,6076,5,1125,0,0,6076,6078,
        3,564,282,0,6077,6074,1,0,0,0,6077,6075,1,0,0,0,6077,6078,1,0,0,
        0,6078,537,1,0,0,0,6079,6080,3,536,268,0,6080,539,1,0,0,0,6081,6084,
        3,546,273,0,6082,6084,3,564,282,0,6083,6081,1,0,0,0,6083,6082,1,
        0,0,0,6084,541,1,0,0,0,6085,6090,3,564,282,0,6086,6088,3,568,284,
        0,6087,6089,3,568,284,0,6088,6087,1,0,0,0,6088,6089,1,0,0,0,6089,
        6091,1,0,0,0,6090,6086,1,0,0,0,6090,6091,1,0,0,0,6091,6100,1,0,0,
        0,6092,6094,9,0,0,0,6093,6092,1,0,0,0,6093,6094,1,0,0,0,6094,6095,
        1,0,0,0,6095,6097,3,568,284,0,6096,6098,3,568,284,0,6097,6096,1,
        0,0,0,6097,6098,1,0,0,0,6098,6100,1,0,0,0,6099,6085,1,0,0,0,6099,
        6093,1,0,0,0,6100,543,1,0,0,0,6101,6104,3,564,282,0,6102,6104,5,
        1141,0,0,6103,6101,1,0,0,0,6103,6102,1,0,0,0,6104,6109,1,0,0,0,6105,
        6106,5,1126,0,0,6106,6107,3,570,285,0,6107,6108,5,1127,0,0,6108,
        6110,1,0,0,0,6109,6105,1,0,0,0,6109,6110,1,0,0,0,6110,6113,1,0,0,
        0,6111,6113,3,668,334,0,6112,6103,1,0,0,0,6112,6111,1,0,0,0,6113,
        6115,1,0,0,0,6114,6116,7,48,0,0,6115,6114,1,0,0,0,6115,6116,1,0,
        0,0,6116,545,1,0,0,0,6117,6123,5,1151,0,0,6118,6123,5,1149,0,0,6119,
        6123,5,1141,0,0,6120,6123,5,695,0,0,6121,6123,3,696,348,0,6122,6117,
        1,0,0,0,6122,6118,1,0,0,0,6122,6119,1,0,0,0,6122,6120,1,0,0,0,6122,
        6121,1,0,0,0,6123,547,1,0,0,0,6124,6125,7,94,0,0,6125,549,1,0,0,
        0,6126,6131,5,224,0,0,6127,6131,3,686,343,0,6128,6131,5,1141,0,0,
        6129,6131,5,1138,0,0,6130,6126,1,0,0,0,6130,6127,1,0,0,0,6130,6128,
        1,0,0,0,6130,6129,1,0,0,0,6131,551,1,0,0,0,6132,6135,3,564,282,0,
        6133,6135,5,1141,0,0,6134,6132,1,0,0,0,6134,6133,1,0,0,0,6135,553,
        1,0,0,0,6136,6137,7,95,0,0,6137,555,1,0,0,0,6138,6139,3,570,285,
        0,6139,6140,5,1114,0,0,6140,6141,3,570,285,0,6141,6142,5,1114,0,
        0,6142,6143,3,570,285,0,6143,6144,5,1114,0,0,6144,6145,3,570,285,
        0,6145,6146,5,1114,0,0,6146,6152,3,570,285,0,6147,6148,5,1137,0,
        0,6148,6149,3,570,285,0,6149,6150,5,1114,0,0,6150,6151,3,570,285,
        0,6151,6153,1,0,0,0,6152,6147,1,0,0,0,6153,6154,1,0,0,0,6154,6152,
        1,0,0,0,6154,6155,1,0,0,0,6155,557,1,0,0,0,6156,6163,3,560,280,0,
        6157,6158,5,1128,0,0,6158,6161,3,560,280,0,6159,6160,5,1128,0,0,
        6160,6162,3,570,285,0,6161,6159,1,0,0,0,6161,6162,1,0,0,0,6162,6164,
        1,0,0,0,6163,6157,1,0,0,0,6163,6164,1,0,0,0,6164,559,1,0,0,0,6165,
        6173,5,1141,0,0,6166,6173,5,1146,0,0,6167,6169,5,1143,0,0,6168,6167,
        1,0,0,0,6169,6170,1,0,0,0,6170,6168,1,0,0,0,6170,6171,1,0,0,0,6171,
        6173,1,0,0,0,6172,6165,1,0,0,0,6172,6166,1,0,0,0,6172,6168,1,0,0,
        0,6173,561,1,0,0,0,6174,6177,3,564,282,0,6175,6177,5,1141,0,0,6176,
        6174,1,0,0,0,6176,6175,1,0,0,0,6177,563,1,0,0,0,6178,6182,3,566,
        283,0,6179,6182,5,1150,0,0,6180,6182,5,1138,0,0,6181,6178,1,0,0,
        0,6181,6179,1,0,0,0,6181,6180,1,0,0,0,6182,565,1,0,0,0,6183,6193,
        5,1149,0,0,6184,6193,3,686,343,0,6185,6193,3,688,344,0,6186,6193,
        3,554,277,0,6187,6193,3,690,345,0,6188,6193,3,692,346,0,6189,6193,
        3,694,347,0,6190,6193,3,696,348,0,6191,6193,3,660,330,0,6192,6183,
        1,0,0,0,6192,6184,1,0,0,0,6192,6185,1,0,0,0,6192,6186,1,0,0,0,6192,
        6187,1,0,0,0,6192,6188,1,0,0,0,6192,6189,1,0,0,0,6192,6190,1,0,0,
        0,6192,6191,1,0,0,0,6193,567,1,0,0,0,6194,6198,5,1148,0,0,6195,6196,
        5,1125,0,0,6196,6198,3,564,282,0,6197,6194,1,0,0,0,6197,6195,1,0,
        0,0,6198,569,1,0,0,0,6199,6200,7,96,0,0,6200,571,1,0,0,0,6201,6204,
        5,1139,0,0,6202,6204,3,570,285,0,6203,6201,1,0,0,0,6203,6202,1,0,
        0,0,6204,573,1,0,0,0,6205,6207,5,1147,0,0,6206,6205,1,0,0,0,6206,
        6207,1,0,0,0,6207,6208,1,0,0,0,6208,6211,5,1141,0,0,6209,6211,5,
        1140,0,0,6210,6206,1,0,0,0,6210,6209,1,0,0,0,6211,6213,1,0,0,0,6212,
        6214,5,1141,0,0,6213,6212,1,0,0,0,6214,6215,1,0,0,0,6215,6213,1,
        0,0,0,6215,6216,1,0,0,0,6216,6229,1,0,0,0,6217,6219,5,1147,0,0,6218,
        6217,1,0,0,0,6218,6219,1,0,0,0,6219,6220,1,0,0,0,6220,6223,5,1141,
        0,0,6221,6223,5,1140,0,0,6222,6218,1,0,0,0,6222,6221,1,0,0,0,6223,
        6226,1,0,0,0,6224,6225,5,27,0,0,6225,6227,3,552,276,0,6226,6224,
        1,0,0,0,6226,6227,1,0,0,0,6227,6229,1,0,0,0,6228,6210,1,0,0,0,6228,
        6222,1,0,0,0,6229,575,1,0,0,0,6230,6231,7,97,0,0,6231,577,1,0,0,
        0,6232,6234,5,1147,0,0,6233,6232,1,0,0,0,6233,6234,1,0,0,0,6234,
        6235,1,0,0,0,6235,6236,5,1143,0,0,6236,579,1,0,0,0,6237,6239,5,113,
        0,0,6238,6237,1,0,0,0,6238,6239,1,0,0,0,6239,6240,1,0,0,0,6240,6241,
        7,98,0,0,6241,581,1,0,0,0,6242,6255,3,574,287,0,6243,6255,3,570,
        285,0,6244,6245,5,1114,0,0,6245,6255,3,570,285,0,6246,6255,3,578,
        289,0,6247,6255,3,576,288,0,6248,6255,5,1144,0,0,6249,6255,5,1146,
        0,0,6250,6252,5,113,0,0,6251,6250,1,0,0,0,6251,6252,1,0,0,0,6252,
        6253,1,0,0,0,6253,6255,7,98,0,0,6254,6242,1,0,0,0,6254,6243,1,0,
        0,0,6254,6244,1,0,0,0,6254,6246,1,0,0,0,6254,6247,1,0,0,0,6254,6248,
        1,0,0,0,6254,6249,1,0,0,0,6254,6251,1,0,0,0,6255,583,1,0,0,0,6256,
        6258,7,99,0,0,6257,6259,5,236,0,0,6258,6257,1,0,0,0,6258,6259,1,
        0,0,0,6259,6261,1,0,0,0,6260,6262,3,590,295,0,6261,6260,1,0,0,0,
        6261,6262,1,0,0,0,6262,6264,1,0,0,0,6263,6265,5,224,0,0,6264,6263,
        1,0,0,0,6264,6265,1,0,0,0,6265,6269,1,0,0,0,6266,6267,3,60,30,0,
        6267,6268,3,550,275,0,6268,6270,1,0,0,0,6269,6266,1,0,0,0,6269,6270,
        1,0,0,0,6270,6274,1,0,0,0,6271,6272,5,27,0,0,6272,6275,3,552,276,
        0,6273,6275,5,224,0,0,6274,6271,1,0,0,0,6274,6273,1,0,0,0,6274,6275,
        1,0,0,0,6275,6379,1,0,0,0,6276,6277,5,223,0,0,6277,6279,7,100,0,
        0,6278,6280,3,590,295,0,6279,6278,1,0,0,0,6279,6280,1,0,0,0,6280,
        6282,1,0,0,0,6281,6283,5,224,0,0,6282,6281,1,0,0,0,6282,6283,1,0,
        0,0,6283,6379,1,0,0,0,6284,6285,5,516,0,0,6285,6287,5,221,0,0,6286,
        6288,3,590,295,0,6287,6286,1,0,0,0,6287,6288,1,0,0,0,6288,6290,1,
        0,0,0,6289,6291,5,224,0,0,6290,6289,1,0,0,0,6290,6291,1,0,0,0,6291,
        6379,1,0,0,0,6292,6293,5,223,0,0,6293,6294,7,101,0,0,6294,6296,5,
        236,0,0,6295,6297,3,590,295,0,6296,6295,1,0,0,0,6296,6297,1,0,0,
        0,6297,6299,1,0,0,0,6298,6300,5,224,0,0,6299,6298,1,0,0,0,6299,6300,
        1,0,0,0,6300,6379,1,0,0,0,6301,6303,7,102,0,0,6302,6304,3,590,295,
        0,6303,6302,1,0,0,0,6303,6304,1,0,0,0,6304,6308,1,0,0,0,6305,6307,
        7,103,0,0,6306,6305,1,0,0,0,6307,6310,1,0,0,0,6308,6306,1,0,0,0,
        6308,6309,1,0,0,0,6309,6379,1,0,0,0,6310,6308,1,0,0,0,6311,6313,
        5,206,0,0,6312,6314,3,592,296,0,6313,6312,1,0,0,0,6313,6314,1,0,
        0,0,6314,6318,1,0,0,0,6315,6317,7,103,0,0,6316,6315,1,0,0,0,6317,
        6320,1,0,0,0,6318,6316,1,0,0,0,6318,6319,1,0,0,0,6319,6379,1,0,0,
        0,6320,6318,1,0,0,0,6321,6323,5,207,0,0,6322,6324,5,208,0,0,6323,
        6322,1,0,0,0,6323,6324,1,0,0,0,6324,6326,1,0,0,0,6325,6327,3,592,
        296,0,6326,6325,1,0,0,0,6326,6327,1,0,0,0,6327,6331,1,0,0,0,6328,
        6330,7,103,0,0,6329,6328,1,0,0,0,6330,6333,1,0,0,0,6331,6329,1,0,
        0,0,6331,6332,1,0,0,0,6332,6379,1,0,0,0,6333,6331,1,0,0,0,6334,6336,
        7,104,0,0,6335,6337,3,594,297,0,6336,6335,1,0,0,0,6336,6337,1,0,
        0,0,6337,6341,1,0,0,0,6338,6340,7,103,0,0,6339,6338,1,0,0,0,6340,
        6343,1,0,0,0,6341,6339,1,0,0,0,6341,6342,1,0,0,0,6342,6379,1,0,0,
        0,6343,6341,1,0,0,0,6344,6379,7,105,0,0,6345,6347,7,106,0,0,6346,
        6348,3,590,295,0,6347,6346,1,0,0,0,6347,6348,1,0,0,0,6348,6379,1,
        0,0,0,6349,6350,7,107,0,0,6350,6352,3,586,293,0,6351,6353,5,224,
        0,0,6352,6351,1,0,0,0,6352,6353,1,0,0,0,6353,6357,1,0,0,0,6354,6355,
        3,60,30,0,6355,6356,3,550,275,0,6356,6358,1,0,0,0,6357,6354,1,0,
        0,0,6357,6358,1,0,0,0,6358,6379,1,0,0,0,6359,6379,7,108,0,0,6360,
        6362,5,229,0,0,6361,6363,5,221,0,0,6362,6361,1,0,0,0,6362,6363,1,
        0,0,0,6363,6365,1,0,0,0,6364,6366,5,224,0,0,6365,6364,1,0,0,0,6365,
        6366,1,0,0,0,6366,6370,1,0,0,0,6367,6368,3,60,30,0,6368,6369,3,550,
        275,0,6369,6371,1,0,0,0,6370,6367,1,0,0,0,6370,6371,1,0,0,0,6371,
        6374,1,0,0,0,6372,6373,5,27,0,0,6373,6375,3,552,276,0,6374,6372,
        1,0,0,0,6374,6375,1,0,0,0,6375,6379,1,0,0,0,6376,6377,5,229,0,0,
        6377,6379,5,225,0,0,6378,6256,1,0,0,0,6378,6276,1,0,0,0,6378,6284,
        1,0,0,0,6378,6292,1,0,0,0,6378,6301,1,0,0,0,6378,6311,1,0,0,0,6378,
        6321,1,0,0,0,6378,6334,1,0,0,0,6378,6344,1,0,0,0,6378,6345,1,0,0,
        0,6378,6349,1,0,0,0,6378,6359,1,0,0,0,6378,6360,1,0,0,0,6378,6376,
        1,0,0,0,6379,585,1,0,0,0,6380,6381,5,1126,0,0,6381,6386,5,1141,0,
        0,6382,6383,5,1128,0,0,6383,6385,5,1141,0,0,6384,6382,1,0,0,0,6385,
        6388,1,0,0,0,6386,6384,1,0,0,0,6386,6387,1,0,0,0,6387,6389,1,0,0,
        0,6388,6386,1,0,0,0,6389,6390,5,1127,0,0,6390,587,1,0,0,0,6391,6393,
        7,109,0,0,6392,6394,3,590,295,0,6393,6392,1,0,0,0,6393,6394,1,0,
        0,0,6394,6414,1,0,0,0,6395,6397,5,220,0,0,6396,6398,3,590,295,0,
        6397,6396,1,0,0,0,6397,6398,1,0,0,0,6398,6402,1,0,0,0,6399,6400,
        3,60,30,0,6400,6401,3,550,275,0,6401,6403,1,0,0,0,6402,6399,1,0,
        0,0,6402,6403,1,0,0,0,6403,6414,1,0,0,0,6404,6414,7,110,0,0,6405,
        6407,5,212,0,0,6406,6408,3,594,297,0,6407,6406,1,0,0,0,6407,6408,
        1,0,0,0,6408,6414,1,0,0,0,6409,6411,7,111,0,0,6410,6412,5,204,0,
        0,6411,6410,1,0,0,0,6411,6412,1,0,0,0,6412,6414,1,0,0,0,6413,6391,
        1,0,0,0,6413,6395,1,0,0,0,6413,6404,1,0,0,0,6413,6405,1,0,0,0,6413,
        6409,1,0,0,0,6414,6416,1,0,0,0,6415,6417,5,11,0,0,6416,6415,1,0,
        0,0,6416,6417,1,0,0,0,6417,589,1,0,0,0,6418,6419,5,1126,0,0,6419,
        6420,3,570,285,0,6420,6421,5,1127,0,0,6421,591,1,0,0,0,6422,6423,
        5,1126,0,0,6423,6424,3,570,285,0,6424,6425,5,1128,0,0,6425,6426,
        3,570,285,0,6426,6427,5,1127,0,0,6427,593,1,0,0,0,6428,6429,5,1126,
        0,0,6429,6432,3,570,285,0,6430,6431,5,1128,0,0,6431,6433,3,570,285,
        0,6432,6430,1,0,0,0,6432,6433,1,0,0,0,6433,6434,1,0,0,0,6434,6435,
        5,1127,0,0,6435,595,1,0,0,0,6436,6441,3,564,282,0,6437,6438,5,1128,
        0,0,6438,6440,3,564,282,0,6439,6437,1,0,0,0,6440,6443,1,0,0,0,6441,
        6439,1,0,0,0,6441,6442,1,0,0,0,6442,597,1,0,0,0,6443,6441,1,0,0,
        0,6444,6449,3,542,271,0,6445,6446,5,1128,0,0,6446,6448,3,542,271,
        0,6447,6445,1,0,0,0,6448,6451,1,0,0,0,6449,6447,1,0,0,0,6449,6450,
        1,0,0,0,6450,599,1,0,0,0,6451,6449,1,0,0,0,6452,6457,3,538,269,0,
        6453,6454,5,1128,0,0,6454,6456,3,538,269,0,6455,6453,1,0,0,0,6456,
        6459,1,0,0,0,6457,6455,1,0,0,0,6457,6458,1,0,0,0,6458,601,1,0,0,
        0,6459,6457,1,0,0,0,6460,6461,5,1126,0,0,6461,6466,3,544,272,0,6462,
        6463,5,1128,0,0,6463,6465,3,544,272,0,6464,6462,1,0,0,0,6465,6468,
        1,0,0,0,6466,6464,1,0,0,0,6466,6467,1,0,0,0,6467,6469,1,0,0,0,6468,
        6466,1,0,0,0,6469,6470,5,1127,0,0,6470,603,1,0,0,0,6471,6476,3,668,
        334,0,6472,6473,5,1128,0,0,6473,6475,3,668,334,0,6474,6472,1,0,0,
        0,6475,6478,1,0,0,0,6476,6474,1,0,0,0,6476,6477,1,0,0,0,6477,605,
        1,0,0,0,6478,6476,1,0,0,0,6479,6484,3,618,309,0,6480,6481,5,1128,
        0,0,6481,6483,3,618,309,0,6482,6480,1,0,0,0,6483,6486,1,0,0,0,6484,
        6482,1,0,0,0,6484,6485,1,0,0,0,6485,607,1,0,0,0,6486,6484,1,0,0,
        0,6487,6492,3,582,291,0,6488,6489,5,1128,0,0,6489,6491,3,582,291,
        0,6490,6488,1,0,0,0,6491,6494,1,0,0,0,6492,6490,1,0,0,0,6492,6493,
        1,0,0,0,6493,609,1,0,0,0,6494,6492,1,0,0,0,6495,6500,5,1141,0,0,
        6496,6497,5,1128,0,0,6497,6499,5,1141,0,0,6498,6496,1,0,0,0,6499,
        6502,1,0,0,0,6500,6498,1,0,0,0,6500,6501,1,0,0,0,6501,611,1,0,0,
        0,6502,6500,1,0,0,0,6503,6508,5,1153,0,0,6504,6505,5,1128,0,0,6505,
        6507,5,1153,0,0,6506,6504,1,0,0,0,6507,6510,1,0,0,0,6508,6506,1,
        0,0,0,6508,6509,1,0,0,0,6509,613,1,0,0,0,6510,6508,1,0,0,0,6511,
        6538,5,115,0,0,6512,6513,5,23,0,0,6513,6514,5,1126,0,0,6514,6515,
        3,668,334,0,6515,6516,5,12,0,0,6516,6517,3,588,294,0,6517,6518,5,
        1127,0,0,6518,6538,1,0,0,0,6519,6521,3,674,337,0,6520,6519,1,0,0,
        0,6520,6521,1,0,0,0,6521,6522,1,0,0,0,6522,6538,3,582,291,0,6523,
        6527,3,616,308,0,6524,6525,5,117,0,0,6525,6526,5,182,0,0,6526,6528,
        3,616,308,0,6527,6524,1,0,0,0,6527,6528,1,0,0,0,6528,6538,1,0,0,
        0,6529,6530,5,1126,0,0,6530,6531,3,668,334,0,6531,6532,5,1127,0,
        0,6532,6538,1,0,0,0,6533,6534,5,1126,0,0,6534,6535,3,536,268,0,6535,
        6536,5,1127,0,0,6536,6538,1,0,0,0,6537,6511,1,0,0,0,6537,6512,1,
        0,0,0,6537,6520,1,0,0,0,6537,6523,1,0,0,0,6537,6529,1,0,0,0,6537,
        6533,1,0,0,0,6538,615,1,0,0,0,6539,6545,7,112,0,0,6540,6542,5,1126,
        0,0,6541,6543,3,570,285,0,6542,6541,1,0,0,0,6542,6543,1,0,0,0,6543,
        6544,1,0,0,0,6544,6546,5,1127,0,0,6545,6540,1,0,0,0,6545,6546,1,
        0,0,0,6546,6554,1,0,0,0,6547,6548,5,321,0,0,6548,6550,5,1126,0,0,
        6549,6551,3,570,285,0,6550,6549,1,0,0,0,6550,6551,1,0,0,0,6551,6552,
        1,0,0,0,6552,6554,5,1127,0,0,6553,6539,1,0,0,0,6553,6547,1,0,0,0,
        6554,617,1,0,0,0,6555,6558,3,668,334,0,6556,6558,5,42,0,0,6557,6555,
        1,0,0,0,6557,6556,1,0,0,0,6558,619,1,0,0,0,6559,6560,5,76,0,0,6560,
        6561,5,59,0,0,6561,621,1,0,0,0,6562,6563,5,76,0,0,6563,6564,5,113,
        0,0,6564,6565,5,59,0,0,6565,623,1,0,0,0,6566,6567,5,122,0,0,6567,
        6568,5,140,0,0,6568,625,1,0,0,0,6569,6570,5,672,0,0,6570,6573,3,
        570,285,0,6571,6573,5,525,0,0,6572,6569,1,0,0,0,6572,6571,1,0,0,
        0,6573,627,1,0,0,0,6574,6593,3,630,315,0,6575,6593,3,638,319,0,6576,
        6593,3,640,320,0,6577,6578,3,660,330,0,6578,6580,5,1126,0,0,6579,
        6581,3,664,332,0,6580,6579,1,0,0,0,6580,6581,1,0,0,0,6581,6582,1,
        0,0,0,6582,6583,5,1127,0,0,6583,6593,1,0,0,0,6584,6585,3,536,268,
        0,6585,6587,5,1126,0,0,6586,6588,3,664,332,0,6587,6586,1,0,0,0,6587,
        6588,1,0,0,0,6588,6589,1,0,0,0,6589,6590,5,1127,0,0,6590,6593,1,
        0,0,0,6591,6593,3,662,331,0,6592,6574,1,0,0,0,6592,6575,1,0,0,0,
        6592,6576,1,0,0,0,6592,6577,1,0,0,0,6592,6584,1,0,0,0,6592,6591,
        1,0,0,0,6593,629,1,0,0,0,6594,6597,7,113,0,0,6595,6596,5,1126,0,
        0,6596,6598,5,1127,0,0,6597,6595,1,0,0,0,6597,6598,1,0,0,0,6598,
        6773,1,0,0,0,6599,6600,5,32,0,0,6600,6601,5,1126,0,0,6601,6602,3,
        668,334,0,6602,6603,5,1128,0,0,6603,6604,3,588,294,0,6604,6605,5,
        1127,0,0,6605,6773,1,0,0,0,6606,6607,5,32,0,0,6607,6608,5,1126,0,
        0,6608,6609,3,668,334,0,6609,6610,5,185,0,0,6610,6611,3,550,275,
        0,6611,6612,5,1127,0,0,6612,6773,1,0,0,0,6613,6614,5,23,0,0,6614,
        6615,5,1126,0,0,6615,6616,3,668,334,0,6616,6617,5,12,0,0,6617,6618,
        3,588,294,0,6618,6619,5,1127,0,0,6619,6773,1,0,0,0,6620,6621,5,186,
        0,0,6621,6622,5,1126,0,0,6622,6623,3,542,271,0,6623,6624,5,1127,
        0,0,6624,6773,1,0,0,0,6625,6626,5,22,0,0,6626,6628,3,668,334,0,6627,
        6629,3,632,316,0,6628,6627,1,0,0,0,6629,6630,1,0,0,0,6630,6628,1,
        0,0,0,6630,6631,1,0,0,0,6631,6634,1,0,0,0,6632,6633,5,53,0,0,6633,
        6635,3,666,333,0,6634,6632,1,0,0,0,6634,6635,1,0,0,0,6635,6636,1,
        0,0,0,6636,6637,5,405,0,0,6637,6773,1,0,0,0,6638,6640,5,22,0,0,6639,
        6641,3,632,316,0,6640,6639,1,0,0,0,6641,6642,1,0,0,0,6642,6640,1,
        0,0,0,6642,6643,1,0,0,0,6643,6646,1,0,0,0,6644,6645,5,53,0,0,6645,
        6647,3,666,333,0,6646,6644,1,0,0,0,6646,6647,1,0,0,0,6647,6648,1,
        0,0,0,6648,6649,5,405,0,0,6649,6773,1,0,0,0,6650,6651,5,220,0,0,
        6651,6652,5,1126,0,0,6652,6655,3,664,332,0,6653,6654,5,185,0,0,6654,
        6656,3,550,275,0,6655,6653,1,0,0,0,6655,6656,1,0,0,0,6656,6657,1,
        0,0,0,6657,6658,5,1127,0,0,6658,6773,1,0,0,0,6659,6660,5,322,0,0,
        6660,6663,5,1126,0,0,6661,6664,3,574,287,0,6662,6664,3,668,334,0,
        6663,6661,1,0,0,0,6663,6662,1,0,0,0,6664,6665,1,0,0,0,6665,6668,
        5,79,0,0,6666,6669,3,574,287,0,6667,6669,3,668,334,0,6668,6666,1,
        0,0,0,6668,6667,1,0,0,0,6669,6670,1,0,0,0,6670,6671,5,1127,0,0,6671,
        6773,1,0,0,0,6672,6673,7,114,0,0,6673,6676,5,1126,0,0,6674,6677,
        3,574,287,0,6675,6677,3,668,334,0,6676,6674,1,0,0,0,6676,6675,1,
        0,0,0,6677,6678,1,0,0,0,6678,6681,5,67,0,0,6679,6682,3,570,285,0,
        6680,6682,3,668,334,0,6681,6679,1,0,0,0,6681,6680,1,0,0,0,6682,6688,
        1,0,0,0,6683,6686,5,64,0,0,6684,6687,3,570,285,0,6685,6687,3,668,
        334,0,6686,6684,1,0,0,0,6686,6685,1,0,0,0,6687,6689,1,0,0,0,6688,
        6683,1,0,0,0,6688,6689,1,0,0,0,6689,6690,1,0,0,0,6690,6691,5,1127,
        0,0,6691,6773,1,0,0,0,6692,6693,5,326,0,0,6693,6694,5,1126,0,0,6694,
        6697,7,115,0,0,6695,6698,3,574,287,0,6696,6698,3,668,334,0,6697,
        6695,1,0,0,0,6697,6696,1,0,0,0,6697,6698,1,0,0,0,6698,6699,1,0,0,
        0,6699,6702,5,67,0,0,6700,6703,3,574,287,0,6701,6703,3,668,334,0,
        6702,6700,1,0,0,0,6702,6701,1,0,0,0,6703,6704,1,0,0,0,6704,6705,
        5,1127,0,0,6705,6773,1,0,0,0,6706,6707,5,326,0,0,6707,6710,5,1126,
        0,0,6708,6711,3,574,287,0,6709,6711,3,668,334,0,6710,6708,1,0,0,
        0,6710,6709,1,0,0,0,6711,6712,1,0,0,0,6712,6715,5,67,0,0,6713,6716,
        3,574,287,0,6714,6716,3,668,334,0,6715,6713,1,0,0,0,6715,6714,1,
        0,0,0,6716,6717,1,0,0,0,6717,6718,5,1127,0,0,6718,6773,1,0,0,0,6719,
        6720,5,1096,0,0,6720,6723,5,1126,0,0,6721,6724,3,574,287,0,6722,
        6724,3,668,334,0,6723,6721,1,0,0,0,6723,6722,1,0,0,0,6724,6731,1,
        0,0,0,6725,6726,5,12,0,0,6726,6727,7,116,0,0,6727,6728,5,1126,0,
        0,6728,6729,3,570,285,0,6729,6730,5,1127,0,0,6730,6732,1,0,0,0,6731,
        6725,1,0,0,0,6731,6732,1,0,0,0,6732,6734,1,0,0,0,6733,6735,3,634,
        317,0,6734,6733,1,0,0,0,6734,6735,1,0,0,0,6735,6736,1,0,0,0,6736,
        6737,5,1127,0,0,6737,6773,1,0,0,0,6738,6739,5,319,0,0,6739,6740,
        5,1126,0,0,6740,6741,3,70,35,0,6741,6744,5,67,0,0,6742,6745,3,574,
        287,0,6743,6745,3,668,334,0,6744,6742,1,0,0,0,6744,6743,1,0,0,0,
        6745,6746,1,0,0,0,6746,6747,5,1127,0,0,6747,6773,1,0,0,0,6748,6749,
        5,895,0,0,6749,6750,5,1126,0,0,6750,6751,7,117,0,0,6751,6752,5,1128,
        0,0,6752,6753,3,574,287,0,6753,6754,5,1127,0,0,6754,6773,1,0,0,0,
        6755,6756,5,280,0,0,6756,6757,5,1126,0,0,6757,6758,3,668,334,0,6758,
        6759,5,1128,0,0,6759,6762,3,668,334,0,6760,6761,5,591,0,0,6761,6763,
        3,588,294,0,6762,6760,1,0,0,0,6762,6763,1,0,0,0,6763,6765,1,0,0,
        0,6764,6766,3,260,130,0,6765,6764,1,0,0,0,6765,6766,1,0,0,0,6766,
        6768,1,0,0,0,6767,6769,3,262,131,0,6768,6767,1,0,0,0,6768,6769,1,
        0,0,0,6769,6770,1,0,0,0,6770,6771,5,1127,0,0,6771,6773,1,0,0,0,6772,
        6594,1,0,0,0,6772,6599,1,0,0,0,6772,6606,1,0,0,0,6772,6613,1,0,0,
        0,6772,6620,1,0,0,0,6772,6625,1,0,0,0,6772,6638,1,0,0,0,6772,6650,
        1,0,0,0,6772,6659,1,0,0,0,6772,6672,1,0,0,0,6772,6692,1,0,0,0,6772,
        6706,1,0,0,0,6772,6719,1,0,0,0,6772,6738,1,0,0,0,6772,6748,1,0,0,
        0,6772,6755,1,0,0,0,6773,631,1,0,0,0,6774,6775,5,187,0,0,6775,6776,
        3,666,333,0,6776,6777,5,172,0,0,6777,6778,3,666,333,0,6778,633,1,
        0,0,0,6779,6780,5,470,0,0,6780,6785,3,636,318,0,6781,6782,5,1128,
        0,0,6782,6784,3,636,318,0,6783,6781,1,0,0,0,6784,6787,1,0,0,0,6785,
        6783,1,0,0,0,6785,6786,1,0,0,0,6786,6794,1,0,0,0,6787,6785,1,0,0,
        0,6788,6789,5,470,0,0,6789,6790,3,570,285,0,6790,6791,5,1114,0,0,
        6791,6792,3,570,285,0,6792,6794,1,0,0,0,6793,6779,1,0,0,0,6793,6788,
        1,0,0,0,6794,635,1,0,0,0,6795,6797,3,570,285,0,6796,6798,7,118,0,
        0,6797,6796,1,0,0,0,6797,6798,1,0,0,0,6798,637,1,0,0,0,6799,6800,
        7,119,0,0,6800,6802,5,1126,0,0,6801,6803,7,44,0,0,6802,6801,1,0,
        0,0,6802,6803,1,0,0,0,6803,6804,1,0,0,0,6804,6805,3,666,333,0,6805,
        6807,5,1127,0,0,6806,6808,3,642,321,0,6807,6806,1,0,0,0,6807,6808,
        1,0,0,0,6808,6859,1,0,0,0,6809,6810,5,288,0,0,6810,6818,5,1126,0,
        0,6811,6819,5,1110,0,0,6812,6814,5,6,0,0,6813,6812,1,0,0,0,6813,
        6814,1,0,0,0,6814,6815,1,0,0,0,6815,6819,3,666,333,0,6816,6817,5,
        49,0,0,6817,6819,3,664,332,0,6818,6811,1,0,0,0,6818,6813,1,0,0,0,
        6818,6816,1,0,0,0,6819,6820,1,0,0,0,6820,6822,5,1127,0,0,6821,6823,
        3,642,321,0,6822,6821,1,0,0,0,6822,6823,1,0,0,0,6823,6859,1,0,0,
        0,6824,6825,7,120,0,0,6825,6827,5,1126,0,0,6826,6828,5,6,0,0,6827,
        6826,1,0,0,0,6827,6828,1,0,0,0,6828,6829,1,0,0,0,6829,6830,3,666,
        333,0,6830,6832,5,1127,0,0,6831,6833,3,642,321,0,6832,6831,1,0,0,
        0,6832,6833,1,0,0,0,6833,6859,1,0,0,0,6834,6835,5,292,0,0,6835,6837,
        5,1126,0,0,6836,6838,5,49,0,0,6837,6836,1,0,0,0,6837,6838,1,0,0,
        0,6838,6839,1,0,0,0,6839,6850,3,664,332,0,6840,6841,5,123,0,0,6841,
        6842,5,19,0,0,6842,6847,3,226,113,0,6843,6844,5,1128,0,0,6844,6846,
        3,226,113,0,6845,6843,1,0,0,0,6846,6849,1,0,0,0,6847,6845,1,0,0,
        0,6847,6848,1,0,0,0,6848,6851,1,0,0,0,6849,6847,1,0,0,0,6850,6840,
        1,0,0,0,6850,6851,1,0,0,0,6851,6854,1,0,0,0,6852,6853,5,153,0,0,
        6853,6855,5,1141,0,0,6854,6852,1,0,0,0,6854,6855,1,0,0,0,6855,6856,
        1,0,0,0,6856,6857,5,1127,0,0,6857,6859,1,0,0,0,6858,6799,1,0,0,0,
        6858,6809,1,0,0,0,6858,6824,1,0,0,0,6858,6834,1,0,0,0,6859,639,1,
        0,0,0,6860,6861,7,121,0,0,6861,6862,5,1126,0,0,6862,6865,3,668,334,
        0,6863,6864,5,1128,0,0,6864,6866,3,570,285,0,6865,6863,1,0,0,0,6865,
        6866,1,0,0,0,6866,6869,1,0,0,0,6867,6868,5,1128,0,0,6868,6870,3,
        570,285,0,6869,6867,1,0,0,0,6869,6870,1,0,0,0,6870,6871,1,0,0,0,
        6871,6872,5,1127,0,0,6872,6873,3,642,321,0,6873,6899,1,0,0,0,6874,
        6875,7,122,0,0,6875,6876,5,1126,0,0,6876,6877,3,668,334,0,6877,6878,
        5,1127,0,0,6878,6879,3,642,321,0,6879,6899,1,0,0,0,6880,6881,7,123,
        0,0,6881,6882,5,1126,0,0,6882,6883,5,1127,0,0,6883,6899,3,642,321,
        0,6884,6885,5,299,0,0,6885,6886,5,1126,0,0,6886,6887,3,668,334,0,
        6887,6888,5,1128,0,0,6888,6889,3,570,285,0,6889,6890,5,1127,0,0,
        6890,6891,3,642,321,0,6891,6899,1,0,0,0,6892,6893,5,298,0,0,6893,
        6894,5,1126,0,0,6894,6895,3,570,285,0,6895,6896,5,1127,0,0,6896,
        6897,3,642,321,0,6897,6899,1,0,0,0,6898,6860,1,0,0,0,6898,6874,1,
        0,0,0,6898,6880,1,0,0,0,6898,6884,1,0,0,0,6898,6892,1,0,0,0,6899,
        641,1,0,0,0,6900,6907,5,127,0,0,6901,6903,5,1126,0,0,6902,6904,3,
        644,322,0,6903,6902,1,0,0,0,6903,6904,1,0,0,0,6904,6905,1,0,0,0,
        6905,6908,5,1127,0,0,6906,6908,3,646,323,0,6907,6901,1,0,0,0,6907,
        6906,1,0,0,0,6908,643,1,0,0,0,6909,6911,3,646,323,0,6910,6909,1,
        0,0,0,6910,6911,1,0,0,0,6911,6913,1,0,0,0,6912,6914,3,658,329,0,
        6913,6912,1,0,0,0,6913,6914,1,0,0,0,6914,6916,1,0,0,0,6915,6917,
        3,224,112,0,6916,6915,1,0,0,0,6916,6917,1,0,0,0,6917,6919,1,0,0,
        0,6918,6920,3,648,324,0,6919,6918,1,0,0,0,6919,6920,1,0,0,0,6920,
        645,1,0,0,0,6921,6922,3,564,282,0,6922,647,1,0,0,0,6923,6924,3,650,
        325,0,6924,6925,3,652,326,0,6925,649,1,0,0,0,6926,6927,7,124,0,0,
        6927,651,1,0,0,0,6928,6931,3,656,328,0,6929,6931,3,654,327,0,6930,
        6928,1,0,0,0,6930,6929,1,0,0,0,6931,653,1,0,0,0,6932,6933,5,16,0,
        0,6933,6934,3,656,328,0,6934,6935,5,10,0,0,6935,6936,3,656,328,0,
        6936,655,1,0,0,0,6937,6938,5,35,0,0,6938,6945,5,598,0,0,6939,6940,
        5,655,0,0,6940,6945,7,125,0,0,6941,6942,3,668,334,0,6942,6943,7,
        125,0,0,6943,6945,1,0,0,0,6944,6937,1,0,0,0,6944,6939,1,0,0,0,6944,
        6941,1,0,0,0,6945,657,1,0,0,0,6946,6947,5,128,0,0,6947,6948,5,19,
        0,0,6948,6953,3,668,334,0,6949,6950,5,1128,0,0,6950,6952,3,668,334,
        0,6951,6949,1,0,0,0,6952,6955,1,0,0,0,6953,6951,1,0,0,0,6953,6954,
        1,0,0,0,6954,659,1,0,0,0,6955,6953,1,0,0,0,6956,6980,3,698,349,0,
        6957,6980,5,742,0,0,6958,6980,5,315,0,0,6959,6980,5,311,0,0,6960,
        6980,5,312,0,0,6961,6980,5,313,0,0,6962,6980,5,316,0,0,6963,6980,
        5,317,0,0,6964,6980,5,318,0,0,6965,6980,5,76,0,0,6966,6980,5,84,
        0,0,6967,6980,5,314,0,0,6968,6980,5,320,0,0,6969,6980,5,506,0,0,
        6970,6980,5,321,0,0,6971,6980,5,140,0,0,6972,6980,5,323,0,0,6973,
        6980,5,324,0,0,6974,6980,5,325,0,0,6975,6980,5,326,0,0,6976,6980,
        5,327,0,0,6977,6980,5,328,0,0,6978,6980,5,329,0,0,6979,6956,1,0,
        0,0,6979,6957,1,0,0,0,6979,6958,1,0,0,0,6979,6959,1,0,0,0,6979,6960,
        1,0,0,0,6979,6961,1,0,0,0,6979,6962,1,0,0,0,6979,6963,1,0,0,0,6979,
        6964,1,0,0,0,6979,6965,1,0,0,0,6979,6966,1,0,0,0,6979,6967,1,0,0,
        0,6979,6968,1,0,0,0,6979,6969,1,0,0,0,6979,6970,1,0,0,0,6979,6971,
        1,0,0,0,6979,6972,1,0,0,0,6979,6973,1,0,0,0,6979,6974,1,0,0,0,6979,
        6975,1,0,0,0,6979,6976,1,0,0,0,6979,6977,1,0,0,0,6979,6978,1,0,0,
        0,6980,661,1,0,0,0,6981,6982,7,126,0,0,6982,6983,5,1126,0,0,6983,
        6984,3,666,333,0,6984,6985,5,1127,0,0,6985,663,1,0,0,0,6986,6991,
        3,582,291,0,6987,6991,3,542,271,0,6988,6991,3,628,314,0,6989,6991,
        3,668,334,0,6990,6986,1,0,0,0,6990,6987,1,0,0,0,6990,6988,1,0,0,
        0,6990,6989,1,0,0,0,6991,7001,1,0,0,0,6992,6997,5,1128,0,0,6993,
        6998,3,582,291,0,6994,6998,3,542,271,0,6995,6998,3,628,314,0,6996,
        6998,3,668,334,0,6997,6993,1,0,0,0,6997,6994,1,0,0,0,6997,6995,1,
        0,0,0,6997,6996,1,0,0,0,6998,7000,1,0,0,0,6999,6992,1,0,0,0,7000,
        7003,1,0,0,0,7001,6999,1,0,0,0,7001,7002,1,0,0,0,7002,665,1,0,0,
        0,7003,7001,1,0,0,0,7004,7009,3,582,291,0,7005,7009,3,542,271,0,
        7006,7009,3,628,314,0,7007,7009,3,668,334,0,7008,7004,1,0,0,0,7008,
        7005,1,0,0,0,7008,7006,1,0,0,0,7008,7007,1,0,0,0,7009,667,1,0,0,
        0,7010,7011,6,334,-1,0,7011,7012,7,127,0,0,7012,7022,3,668,334,4,
        7013,7014,3,670,335,0,7014,7016,5,87,0,0,7015,7017,5,113,0,0,7016,
        7015,1,0,0,0,7016,7017,1,0,0,0,7017,7018,1,0,0,0,7018,7019,7,128,
        0,0,7019,7022,1,0,0,0,7020,7022,3,670,335,0,7021,7010,1,0,0,0,7021,
        7013,1,0,0,0,7021,7020,1,0,0,0,7022,7029,1,0,0,0,7023,7024,10,3,
        0,0,7024,7025,3,678,339,0,7025,7026,3,668,334,4,7026,7028,1,0,0,
        0,7027,7023,1,0,0,0,7028,7031,1,0,0,0,7029,7027,1,0,0,0,7029,7030,
        1,0,0,0,7030,669,1,0,0,0,7031,7029,1,0,0,0,7032,7035,6,335,-1,0,
        7033,7034,5,1153,0,0,7034,7036,5,1101,0,0,7035,7033,1,0,0,0,7035,
        7036,1,0,0,0,7036,7037,1,0,0,0,7037,7038,3,672,336,0,7038,7103,1,
        0,0,0,7039,7040,10,8,0,0,7040,7041,3,676,338,0,7041,7042,3,670,335,
        9,7042,7102,1,0,0,0,7043,7045,10,6,0,0,7044,7046,5,113,0,0,7045,
        7044,1,0,0,0,7045,7046,1,0,0,0,7046,7047,1,0,0,0,7047,7048,5,16,
        0,0,7048,7049,3,670,335,0,7049,7050,5,10,0,0,7050,7051,3,670,335,
        7,7051,7102,1,0,0,0,7052,7053,10,5,0,0,7053,7054,5,618,0,0,7054,
        7055,5,97,0,0,7055,7102,3,670,335,6,7056,7058,10,3,0,0,7057,7059,
        5,113,0,0,7058,7057,1,0,0,0,7058,7059,1,0,0,0,7059,7060,1,0,0,0,
        7060,7061,7,129,0,0,7061,7102,3,670,335,4,7062,7064,10,10,0,0,7063,
        7065,5,113,0,0,7064,7063,1,0,0,0,7064,7065,1,0,0,0,7065,7066,1,0,
        0,0,7066,7067,5,79,0,0,7067,7070,5,1126,0,0,7068,7071,3,196,98,0,
        7069,7071,3,604,302,0,7070,7068,1,0,0,0,7070,7069,1,0,0,0,7071,7072,
        1,0,0,0,7072,7073,5,1127,0,0,7073,7102,1,0,0,0,7074,7075,10,9,0,
        0,7075,7076,5,87,0,0,7076,7102,3,580,290,0,7077,7078,10,7,0,0,7078,
        7079,3,676,338,0,7079,7080,7,130,0,0,7080,7081,5,1126,0,0,7081,7082,
        3,196,98,0,7082,7083,5,1127,0,0,7083,7102,1,0,0,0,7084,7086,10,4,
        0,0,7085,7087,5,113,0,0,7086,7085,1,0,0,0,7086,7087,1,0,0,0,7087,
        7088,1,0,0,0,7088,7089,5,97,0,0,7089,7092,3,670,335,0,7090,7091,
        5,411,0,0,7091,7093,5,1141,0,0,7092,7090,1,0,0,0,7092,7093,1,0,0,
        0,7093,7102,1,0,0,0,7094,7095,10,1,0,0,7095,7096,5,503,0,0,7096,
        7097,5,531,0,0,7097,7098,5,1126,0,0,7098,7099,3,670,335,0,7099,7100,
        5,1127,0,0,7100,7102,1,0,0,0,7101,7039,1,0,0,0,7101,7043,1,0,0,0,
        7101,7052,1,0,0,0,7101,7056,1,0,0,0,7101,7062,1,0,0,0,7101,7074,
        1,0,0,0,7101,7077,1,0,0,0,7101,7084,1,0,0,0,7101,7094,1,0,0,0,7102,
        7105,1,0,0,0,7103,7101,1,0,0,0,7103,7104,1,0,0,0,7104,671,1,0,0,
        0,7105,7103,1,0,0,0,7106,7107,6,336,-1,0,7107,7152,3,582,291,0,7108,
        7152,3,542,271,0,7109,7152,3,628,314,0,7110,7152,3,548,274,0,7111,
        7112,3,674,337,0,7112,7113,3,672,336,10,7113,7152,1,0,0,0,7114,7115,
        5,224,0,0,7115,7152,3,672,336,9,7116,7117,5,1126,0,0,7117,7122,3,
        668,334,0,7118,7119,5,1128,0,0,7119,7121,3,668,334,0,7120,7118,1,
        0,0,0,7121,7124,1,0,0,0,7122,7120,1,0,0,0,7122,7123,1,0,0,0,7123,
        7125,1,0,0,0,7124,7122,1,0,0,0,7125,7126,5,1127,0,0,7126,7152,1,
        0,0,0,7127,7128,5,598,0,0,7128,7129,5,1126,0,0,7129,7132,3,668,334,
        0,7130,7131,5,1128,0,0,7131,7133,3,668,334,0,7132,7130,1,0,0,0,7133,
        7134,1,0,0,0,7134,7132,1,0,0,0,7134,7135,1,0,0,0,7135,7136,1,0,0,
        0,7136,7137,5,1127,0,0,7137,7152,1,0,0,0,7138,7139,5,59,0,0,7139,
        7140,5,1126,0,0,7140,7141,3,196,98,0,7141,7142,5,1127,0,0,7142,7152,
        1,0,0,0,7143,7144,5,1126,0,0,7144,7145,3,196,98,0,7145,7146,5,1127,
        0,0,7146,7152,1,0,0,0,7147,7148,5,85,0,0,7148,7149,3,668,334,0,7149,
        7150,3,70,35,0,7150,7152,1,0,0,0,7151,7106,1,0,0,0,7151,7108,1,0,
        0,0,7151,7109,1,0,0,0,7151,7110,1,0,0,0,7151,7111,1,0,0,0,7151,7114,
        1,0,0,0,7151,7116,1,0,0,0,7151,7127,1,0,0,0,7151,7138,1,0,0,0,7151,
        7143,1,0,0,0,7151,7147,1,0,0,0,7152,7170,1,0,0,0,7153,7154,10,3,
        0,0,7154,7155,3,680,340,0,7155,7156,3,672,336,4,7156,7169,1,0,0,
        0,7157,7158,10,2,0,0,7158,7159,3,682,341,0,7159,7160,3,672,336,3,
        7160,7169,1,0,0,0,7161,7162,10,1,0,0,7162,7163,3,684,342,0,7163,
        7164,3,672,336,2,7164,7169,1,0,0,0,7165,7166,10,12,0,0,7166,7167,
        5,27,0,0,7167,7169,3,552,276,0,7168,7153,1,0,0,0,7168,7157,1,0,0,
        0,7168,7161,1,0,0,0,7168,7165,1,0,0,0,7169,7172,1,0,0,0,7170,7168,
        1,0,0,0,7170,7171,1,0,0,0,7171,673,1,0,0,0,7172,7170,1,0,0,0,7173,
        7174,7,131,0,0,7174,675,1,0,0,0,7175,7190,5,1117,0,0,7176,7190,5,
        1118,0,0,7177,7190,5,1119,0,0,7178,7179,5,1119,0,0,7179,7190,5,1117,
        0,0,7180,7181,5,1118,0,0,7181,7190,5,1117,0,0,7182,7183,5,1119,0,
        0,7183,7190,5,1118,0,0,7184,7185,5,1120,0,0,7185,7190,5,1117,0,0,
        7186,7187,5,1119,0,0,7187,7188,5,1117,0,0,7188,7190,5,1118,0,0,7189,
        7175,1,0,0,0,7189,7176,1,0,0,0,7189,7177,1,0,0,0,7189,7178,1,0,0,
        0,7189,7180,1,0,0,0,7189,7182,1,0,0,0,7189,7184,1,0,0,0,7189,7186,
        1,0,0,0,7190,677,1,0,0,0,7191,7199,5,10,0,0,7192,7193,5,1123,0,0,
        7193,7199,5,1123,0,0,7194,7199,5,192,0,0,7195,7199,5,122,0,0,7196,
        7197,5,1122,0,0,7197,7199,5,1122,0,0,7198,7191,1,0,0,0,7198,7192,
        1,0,0,0,7198,7194,1,0,0,0,7198,7195,1,0,0,0,7198,7196,1,0,0,0,7199,
        679,1,0,0,0,7200,7201,5,1119,0,0,7201,7208,5,1119,0,0,7202,7203,
        5,1118,0,0,7203,7208,5,1118,0,0,7204,7208,5,1123,0,0,7205,7208,5,
        1124,0,0,7206,7208,5,1122,0,0,7207,7200,1,0,0,0,7207,7202,1,0,0,
        0,7207,7204,1,0,0,0,7207,7205,1,0,0,0,7207,7206,1,0,0,0,7208,681,
        1,0,0,0,7209,7210,7,132,0,0,7210,683,1,0,0,0,7211,7212,5,1114,0,
        0,7212,7217,5,1118,0,0,7213,7214,5,1114,0,0,7214,7215,5,1118,0,0,
        7215,7217,5,1118,0,0,7216,7211,1,0,0,0,7216,7213,1,0,0,0,7217,685,
        1,0,0,0,7218,7219,7,133,0,0,7219,687,1,0,0,0,7220,7221,7,134,0,0,
        7221,689,1,0,0,0,7222,7223,7,135,0,0,7223,691,1,0,0,0,7224,7225,
        7,136,0,0,7225,693,1,0,0,0,7226,7227,7,137,0,0,7227,695,1,0,0,0,
        7228,7229,7,138,0,0,7229,697,1,0,0,0,7230,7231,7,139,0,0,7231,699,
        1,0,0,0,1052,701,705,712,715,718,720,726,729,732,741,783,795,806,
        823,828,840,867,876,881,887,892,896,905,908,911,915,922,925,930,
        938,943,948,951,953,965,968,972,975,979,982,986,989,992,996,999,
        1003,1009,1015,1021,1028,1035,1038,1042,1047,1053,1062,1067,1072,
        1079,1096,1103,1107,1117,1121,1125,1129,1133,1138,1141,1144,1147,
        1150,1156,1160,1166,1171,1174,1177,1179,1190,1194,1197,1211,1214,
        1218,1221,1225,1228,1232,1235,1239,1242,1245,1249,1252,1256,1262,
        1275,1281,1292,1297,1305,1313,1318,1321,1326,1334,1339,1345,1350,
        1354,1356,1359,1363,1367,1370,1374,1378,1382,1388,1391,1398,1406,
        1408,1415,1421,1429,1432,1439,1442,1444,1450,1456,1473,1480,1487,
        1499,1504,1507,1510,1523,1536,1541,1557,1565,1575,1581,1593,1596,
        1601,1614,1621,1628,1630,1637,1641,1643,1648,1651,1657,1662,1664,
        1668,1671,1674,1680,1685,1687,1692,1699,1701,1708,1713,1717,1720,
        1728,1736,1738,1746,1750,1753,1759,1764,1767,1773,1776,1780,1783,
        1787,1792,1797,1802,1806,1810,1814,1818,1822,1826,1831,1836,1841,
        1847,1852,1857,1862,1867,1872,1878,1883,1888,1893,1898,1903,1908,
        1913,1920,1925,1930,1935,1939,1944,1952,1957,1963,1975,1982,1984,
        1992,1997,2000,2008,2014,2030,2042,2044,2047,2055,2061,2067,2080,
        2087,2096,2101,2112,2121,2126,2138,2145,2154,2159,2171,2178,2187,
        2192,2199,2208,2213,2215,2220,2228,2237,2241,2244,2248,2253,2259,
        2265,2270,2275,2280,2285,2288,2293,2298,2308,2312,2319,2324,2327,
        2332,2335,2339,2343,2351,2370,2373,2376,2380,2390,2403,2410,2413,
        2418,2425,2428,2431,2442,2445,2449,2457,2460,2465,2473,2479,2483,
        2487,2492,2497,2504,2508,2519,2527,2530,2536,2542,2544,2549,2552,
        2558,2564,2566,2570,2573,2576,2582,2588,2591,2597,2603,2605,2610,
        2618,2620,2629,2634,2642,2646,2654,2664,2669,2676,2680,2684,2716,
        2720,2732,2735,2744,2761,2773,2780,2787,2802,2815,2821,2827,2833,
        2839,2845,2853,2861,2866,2871,2878,2885,2892,2897,2900,2902,2916,
        2923,2930,2936,2940,2944,2951,2954,2959,2966,2973,2977,2982,2989,
        3002,3005,3010,3015,3019,3025,3034,3043,3052,3055,3059,3068,3072,
        3075,3078,3084,3087,3093,3102,3105,3116,3119,3124,3127,3132,3142,
        3147,3153,3155,3161,3163,3169,3177,3182,3190,3193,3198,3201,3206,
        3214,3222,3228,3236,3241,3249,3252,3256,3259,3267,3273,3282,3285,
        3289,3293,3299,3303,3307,3309,3312,3315,3318,3324,3328,3331,3334,
        3337,3340,3347,3349,3353,3359,3365,3370,3373,3379,3383,3391,3395,
        3398,3401,3410,3414,3417,3421,3425,3428,3431,3436,3442,3446,3456,
        3462,3466,3472,3476,3482,3485,3497,3501,3505,3513,3517,3525,3528,
        3532,3535,3543,3548,3551,3554,3558,3561,3570,3575,3584,3589,3596,
        3603,3611,3617,3625,3628,3631,3638,3641,3648,3651,3659,3665,3676,
        3679,3683,3693,3699,3703,3707,3717,3722,3724,3728,3738,3748,3754,
        3759,3762,3765,3768,3771,3774,3777,3783,3788,3791,3794,3797,3800,
        3803,3806,3808,3814,3819,3822,3825,3828,3831,3834,3838,3844,3848,
        3856,3860,3863,3865,3878,3881,3888,3898,3901,3906,3908,3912,3920,
        3926,3935,3948,3952,3958,3967,3970,3974,3977,3981,3985,3988,3990,
        3998,4010,4016,4018,4024,4026,4028,4034,4042,4050,4054,4058,4067,
        4072,4092,4097,4103,4110,4115,4124,4127,4131,4135,4139,4142,4145,
        4148,4152,4156,4159,4162,4165,4172,4176,4191,4195,4207,4215,4225,
        4229,4232,4238,4241,4244,4253,4262,4272,4276,4286,4296,4304,4307,
        4316,4319,4323,4328,4332,4341,4344,4375,4378,4381,4437,4442,4470,
        4484,4491,4495,4501,4509,4511,4522,4532,4539,4545,4553,4558,4566,
        4574,4582,4590,4596,4599,4603,4608,4613,4619,4621,4632,4637,4644,
        4646,4660,4666,4671,4676,4682,4689,4697,4705,4710,4716,4719,4727,
        4734,4743,4746,4763,4771,4779,4783,4790,4796,4804,4813,4819,4826,
        4833,4838,4841,4843,4849,4851,4855,4857,4864,4869,4873,4879,4888,
        4894,4901,4907,4913,4918,4921,4923,4929,4931,4935,4937,4944,4946,
        4951,4958,4967,4972,4981,4988,4993,4996,4998,5004,5006,5009,5017,
        5022,5027,5031,5037,5042,5046,5052,5054,5065,5068,5075,5078,5090,
        5096,5105,5114,5119,5128,5134,5145,5151,5156,5160,5166,5171,5175,
        5178,5190,5197,5202,5220,5228,5233,5239,5249,5259,5269,5275,5284,
        5290,5297,5299,5309,5313,5317,5327,5332,5399,5417,5425,5437,5444,
        5446,5456,5459,5467,5474,5478,5485,5490,5493,5496,5505,5509,5513,
        5536,5543,5547,5554,5561,5564,5580,5583,5593,5597,5603,5606,5611,
        5615,5622,5625,5631,5655,5658,5670,5673,5683,5691,5695,5702,5705,
        5714,5720,5726,5736,5738,5744,5747,5750,5762,5765,5771,5774,5782,
        5790,5796,5800,5814,5826,5833,5836,5843,5850,5855,5868,5879,5885,
        5890,5903,5905,5910,5914,5917,5919,5926,5933,5936,5939,5945,5949,
        5955,5961,5974,5979,5987,5990,5995,6000,6008,6011,6019,6023,6036,
        6042,6054,6057,6066,6071,6077,6083,6088,6090,6093,6097,6099,6103,
        6109,6112,6115,6122,6130,6134,6154,6161,6163,6170,6172,6176,6181,
        6192,6197,6203,6206,6210,6215,6218,6222,6226,6228,6233,6238,6251,
        6254,6258,6261,6264,6269,6274,6279,6282,6287,6290,6296,6299,6303,
        6308,6313,6318,6323,6326,6331,6336,6341,6347,6352,6357,6362,6365,
        6370,6374,6378,6386,6393,6397,6402,6407,6411,6413,6416,6432,6441,
        6449,6457,6466,6476,6484,6492,6500,6508,6520,6527,6537,6542,6545,
        6550,6553,6557,6572,6580,6587,6592,6597,6630,6634,6642,6646,6655,
        6663,6668,6676,6681,6686,6688,6697,6702,6710,6715,6723,6731,6734,
        6744,6762,6765,6768,6772,6785,6793,6797,6802,6807,6813,6818,6822,
        6827,6832,6837,6847,6850,6854,6858,6865,6869,6898,6903,6907,6910,
        6913,6916,6919,6930,6944,6953,6979,6990,6997,7001,7008,7016,7021,
        7029,7035,7045,7058,7064,7070,7086,7092,7101,7103,7122,7134,7151,
        7168,7170,7189,7198,7207,7216
    ]

class MySqlParser ( Parser ):

    grammarFileName = "MySqlParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ADD'", "'ALL'", "'ALTER'", "'ALWAYS'", 
                     "'ANALYZE'", "'AND'", "'ARRAY'", "'AS'", "'ASC'", "'ATTRIBUTE'", 
                     "'BEFORE'", "'BETWEEN'", "'BOTH'", "'BUCKETS'", "'BY'", 
                     "'CALL'", "'CASCADE'", "'CASE'", "'CAST'", "'CHANGE'", 
                     "'CHARACTER'", "'CHECK'", "'COLLATE'", "'COLUMN'", 
                     "'CONDITION'", "'CONSTRAINT'", "'CONTINUE'", "'CONVERT'", 
                     "'CREATE'", "'CROSS'", "'CURRENT'", "'CURRENT_ROLE'", 
                     "'CURRENT_USER'", "'CURSOR'", "'DATABASE'", "'DATABASES'", 
                     "'DECLARE'", "'DEFAULT'", "'DELAYED'", "'DELETE'", 
                     "'DESC'", "'DESCRIBE'", "'DETERMINISTIC'", "'DIAGNOSTICS'", 
                     "'DISTINCT'", "'DISTINCTROW'", "'DROP'", "'EACH'", 
                     "'ELSE'", "'ELSEIF'", "'EMPTY'", "'ENCLOSED'", "'ESCAPED'", 
                     "'EXCEPT'", "'EXISTS'", "'EXIT'", "'EXPLAIN'", "'FALSE'", 
                     "'FETCH'", "'FOR'", "'FORCE'", "'FOREIGN'", "'FROM'", 
                     "'FULLTEXT'", "'GENERATED'", "'GET'", "'GRANT'", "'GROUP'", 
                     "'HAVING'", "'HIGH_PRIORITY'", "'HISTOGRAM'", "'IF'", 
                     "'IGNORE'", "'IGNORED'", "'IN'", "'INDEX'", "'INFILE'", 
                     "'INNER'", "'INOUT'", "'INSERT'", "'INTERVAL'", "'INTO'", 
                     "'IS'", "'ITERATE'", "'JOIN'", "'KEY'", "'KEYS'", "'KILL'", 
                     "'LATERAL'", "'LEADING'", "'LEAVE'", "'LEFT'", "'LIKE'", 
                     "'LIMIT'", "'LINEAR'", "'LINES'", "'LOAD'", "'LOCK'", 
                     "'LOCKED'", "'LOOP'", "'LOW_PRIORITY'", "'MASTER_BIND'", 
                     "'MASTER_SSL_VERIFY_SERVER_CERT'", "'MATCH'", "'MAXVALUE'", 
                     "'MINVALUE'", "'MODIFIES'", "'NATURAL'", "'NOT'", "'NO_WRITE_TO_BINLOG'", 
                     "'NULL'", "'NUMBER'", "'ON'", "'OPTIMIZE'", "'OPTION'", 
                     "'OPTIONAL'", "'OPTIONALLY'", "'OR'", "'ORDER'", "'OUT'", 
                     "'OUTER'", "'OUTFILE'", "'OVER'", "'PARTITION'", "'PRIMARY'", 
                     "'PROCEDURE'", "'PURGE'", "'RANGE'", "'READ'", "'READS'", 
                     "'REFERENCES'", "'REGEXP'", "'RELEASE'", "'RENAME'", 
                     "'REPEAT'", "'REPLACE'", "'REQUIRE'", "'RESIGNAL'", 
                     "'RESTRICT'", "'RETAIN'", "'RETURN'", "'REVOKE'", "'RIGHT'", 
                     "'RLIKE'", "'SCHEMA'", "'SCHEMAS'", "'SELECT'", "'SET'", 
                     "'SEPARATOR'", "'SHOW'", "'SIGNAL'", "'SKIP'", "'SPATIAL'", 
                     "'SQL'", "'SQLEXCEPTION'", "'SQLSTATE'", "'SQLWARNING'", 
                     "'SQL_BIG_RESULT'", "'SQL_CALC_FOUND_ROWS'", "'SQL_SMALL_RESULT'", 
                     "'SSL'", "'STACKED'", "'STARTING'", "'STATEMENT'", 
                     "'STRAIGHT_JOIN'", "'TABLE'", "'TERMINATED'", "'THEN'", 
                     "'TO'", "'TRAILING'", "'TRIGGER'", "'TRUE'", "'UNDO'", 
                     "'UNION'", "'UNIQUE'", "'UNLOCK'", "'UNSIGNED'", "'UPDATE'", 
                     "'USAGE'", "'USE'", "'USING'", "'VALUES'", "'WHEN'", 
                     "'WHERE'", "'WHILE'", "'WITH'", "'WRITE'", "'XOR'", 
                     "'ZEROFILL'", "'TINYINT'", "'SMALLINT'", "'MEDIUMINT'", 
                     "'MIDDLEINT'", "'INT'", "'INT1'", "'INT2'", "'INT3'", 
                     "'INT4'", "'INT8'", "'INTEGER'", "'BIGINT'", "'REAL'", 
                     "'DOUBLE'", "'PRECISION'", "'FLOAT'", "'FLOAT4'", "'FLOAT8'", 
                     "'DECIMAL'", "'DEC'", "'NUMERIC'", "'DATE'", "'TIME'", 
                     "'TIMESTAMP'", "'DATETIME'", "'YEAR'", "'CHAR'", "'VARCHAR'", 
                     "'NVARCHAR'", "'NATIONAL'", "'BINARY'", "'VARBINARY'", 
                     "'TINYBLOB'", "'BLOB'", "'MEDIUMBLOB'", "'LONG'", "'LONGBLOB'", 
                     "'TINYTEXT'", "'TEXT'", "'MEDIUMTEXT'", "'LONGTEXT'", 
                     "'ENUM'", "'VARYING'", "'SERIAL'", "'YEAR_MONTH'", 
                     "'DAY_HOUR'", "'DAY_MINUTE'", "'DAY_SECOND'", "'HOUR_MINUTE'", 
                     "'HOUR_SECOND'", "'MINUTE_SECOND'", "'SECOND_MICROSECOND'", 
                     "'MINUTE_MICROSECOND'", "'HOUR_MICROSECOND'", "'DAY_MICROSECOND'", 
                     "'JSON_ARRAY'", "'JSON_ARRAYAGG'", "'JSON_ARRAY_APPEND'", 
                     "'JSON_ARRAY_INSERT'", "'JSON_CONTAINS'", "'JSON_CONTAINS_PATH'", 
                     "'JSON_DEPTH'", "'JSON_EXTRACT'", "'JSON_INSERT'", 
                     "'JSON_KEYS'", "'JSON_LENGTH'", "'JSON_MERGE'", "'JSON_MERGE_PATCH'", 
                     "'JSON_MERGE_PRESERVE'", "'JSON_OBJECT'", "'JSON_OBJECTAGG'", 
                     "'JSON_OVERLAPS'", "'JSON_PRETTY'", "'JSON_QUOTE'", 
                     "'JSON_REMOVE'", "'JSON_REPLACE'", "'JSON_SCHEMA_VALID'", 
                     "'JSON_SCHEMA_VALIDATION_REPORT'", "'JSON_SEARCH'", 
                     "'JSON_SET'", "'JSON_STORAGE_FREE'", "'JSON_STORAGE_SIZE'", 
                     "'JSON_TABLE'", "'JSON_TYPE'", "'JSON_UNQUOTE'", "'JSON_VALID'", 
                     "'JSON_VALUE'", "'NESTED'", "'ORDINALITY'", "'PATH'", 
                     "'AVG'", "'BIT_AND'", "'BIT_OR'", "'BIT_XOR'", "'COUNT'", 
                     "'CUME_DIST'", "'DENSE_RANK'", "'FIRST_VALUE'", "'GROUP_CONCAT'", 
                     "'LAG'", "'LAST_VALUE'", "'LEAD'", "'MAX'", "'MIN'", 
                     "'NTILE'", "'NTH_VALUE'", "'PERCENT_RANK'", "'RANK'", 
                     "'ROW_NUMBER'", "'STD'", "'STDDEV'", "'STDDEV_POP'", 
                     "'STDDEV_SAMP'", "'SUM'", "'VAR_POP'", "'VAR_SAMP'", 
                     "'VARIANCE'", "'CURRENT_DATE'", "'CURRENT_TIME'", "'CURRENT_TIMESTAMP'", 
                     "'LOCALTIME'", "'CURDATE'", "'CURTIME'", "'DATE_ADD'", 
                     "'DATE_SUB'", "'EXTRACT'", "'LOCALTIMESTAMP'", "'NOW'", 
                     "'POSITION'", "'SUBSTR'", "'SUBSTRING'", "'SYSDATE'", 
                     "'TRIM'", "'UTC_DATE'", "'UTC_TIME'", "'UTC_TIMESTAMP'", 
                     "'ACCOUNT'", "'ACTION'", "'AFTER'", "'AGGREGATE'", 
                     "'ALGORITHM'", "'ANY'", "'AT'", "'AUTHORS'", "'AUTOCOMMIT'", 
                     "'AUTOEXTEND_SIZE'", "'AUTO_INCREMENT'", "'AVG_ROW_LENGTH'", 
                     "'BEGIN'", "'BINLOG'", "'BIT'", "'BLOCK'", "'BOOL'", 
                     "'BOOLEAN'", "'BTREE'", "'CACHE'", "'CASCADED'", "'CHAIN'", 
                     "'CHANGED'", "'CHANNEL'", "'CHECKSUM'", "'PAGE_CHECKSUM'", 
                     "'CIPHER'", "'CLASS_ORIGIN'", "'CLIENT'", "'CLOSE'", 
                     "'CLUSTERING'", "'COALESCE'", "'CODE'", "'COLUMNS'", 
                     "'COLUMN_FORMAT'", "'COLUMN_NAME'", "'COMMENT'", "'COMMIT'", 
                     "'COMPACT'", "'COMPLETION'", "'COMPRESSED'", "<INVALID>", 
                     "'CONCURRENT'", "'CONNECT'", "'CONNECTION'", "'CONSISTENT'", 
                     "'CONSTRAINT_CATALOG'", "'CONSTRAINT_SCHEMA'", "'CONSTRAINT_NAME'", 
                     "'CONTAINS'", "'CONTEXT'", "'CONTRIBUTORS'", "'COPY'", 
                     "'CPU'", "'CYCLE'", "'CURSOR_NAME'", "'DATA'", "'DATAFILE'", 
                     "'DEALLOCATE'", "'DEFAULT_AUTH'", "'DEFINER'", "'DELAY_KEY_WRITE'", 
                     "'DES_KEY_FILE'", "'DIRECTORY'", "'DISABLE'", "'DISCARD'", 
                     "'DISK'", "'DO'", "'DUMPFILE'", "'DUPLICATE'", "'DYNAMIC'", 
                     "'ENABLE'", "'ENCRYPTED'", "'ENCRYPTION'", "'ENCRYPTION_KEY_ID'", 
                     "'END'", "'ENDS'", "'ENGINE'", "'ENGINES'", "'ERROR'", 
                     "'ERRORS'", "'ESCAPE'", "'EVEN'", "'EVENT'", "'EVENTS'", 
                     "'EVERY'", "'EXCHANGE'", "'EXCLUSIVE'", "'EXPIRE'", 
                     "'EXPORT'", "'EXTENDED'", "'EXTENT_SIZE'", "'FAILED_LOGIN_ATTEMPTS'", 
                     "'FAST'", "'FAULTS'", "'FIELDS'", "'FILE_BLOCK_SIZE'", 
                     "'FILTER'", "'FIRST'", "'FIXED'", "'FLUSH'", "'FOLLOWING'", 
                     "'FOLLOWS'", "'FOUND'", "'FULL'", "'FUNCTION'", "'GENERAL'", 
                     "'GLOBAL'", "'GRANTS'", "'GROUP_REPLICATION'", "'HANDLER'", 
                     "'HASH'", "'HELP'", "'HISTORY'", "'HOST'", "'HOSTS'", 
                     "'IDENTIFIED'", "'IGNORE_SERVER_IDS'", "'IMPORT'", 
                     "'INCREMENT'", "'INDEXES'", "'INITIAL_SIZE'", "'INPLACE'", 
                     "'INSERT_METHOD'", "'INSTALL'", "'INSTANCE'", "'INSTANT'", 
                     "'INVISIBLE'", "'INVOKER'", "'IO'", "'IO_THREAD'", 
                     "'IPC'", "'ISOLATION'", "'ISSUER'", "'JSON'", "'KEY_BLOCK_SIZE'", 
                     "'LANGUAGE'", "'LAST'", "'LEAVES'", "'LESS'", "'LEVEL'", 
                     "'LIST'", "'LOCAL'", "'LOGFILE'", "'LOGS'", "'MASTER'", 
                     "'MASTER_AUTO_POSITION'", "'MASTER_CONNECT_RETRY'", 
                     "'MASTER_DELAY'", "'MASTER_HEARTBEAT_PERIOD'", "'MASTER_HOST'", 
                     "'MASTER_LOG_FILE'", "'MASTER_LOG_POS'", "'MASTER_PASSWORD'", 
                     "'MASTER_PORT'", "'MASTER_RETRY_COUNT'", "'MASTER_SSL'", 
                     "'MASTER_SSL_CA'", "'MASTER_SSL_CAPATH'", "'MASTER_SSL_CERT'", 
                     "'MASTER_SSL_CIPHER'", "'MASTER_SSL_CRL'", "'MASTER_SSL_CRLPATH'", 
                     "'MASTER_SSL_KEY'", "'MASTER_TLS_VERSION'", "'MASTER_USER'", 
                     "'MAX_CONNECTIONS_PER_HOUR'", "'MAX_QUERIES_PER_HOUR'", 
                     "'MAX_ROWS'", "'MAX_SIZE'", "'MAX_UPDATES_PER_HOUR'", 
                     "'MAX_USER_CONNECTIONS'", "'MEDIUM'", "'MEMBER'", "'MERGE'", 
                     "'MESSAGE_TEXT'", "'MID'", "'MIGRATE'", "'MIN_ROWS'", 
                     "'MODE'", "'MODIFY'", "'MUTEX'", "'MYSQL'", "'MYSQL_ERRNO'", 
                     "'NAME'", "'NAMES'", "'NCHAR'", "'NEVER'", "'NEXT'", 
                     "'NO'", "'NOCACHE'", "'NOCOPY'", "'NOCYCLE'", "'NOMAXVALUE'", 
                     "'NOMINVALUE'", "'NOWAIT'", "'NODEGROUP'", "'NONE'", 
                     "'ODBC'", "'OFFLINE'", "'OFFSET'", "'OF'", "'OJ'", 
                     "'OLD_PASSWORD'", "'ONE'", "'ONLINE'", "'ONLY'", "'OPEN'", 
                     "'OPTIMIZER_COSTS'", "'OPTIONS'", "'OWNER'", "'PACK_KEYS'", 
                     "'PAGE'", "'PAGE_COMPRESSED'", "'PAGE_COMPRESSION_LEVEL'", 
                     "'PARSER'", "'PARTIAL'", "'PARTITIONING'", "'PARTITIONS'", 
                     "'PASSWORD'", "'PASSWORD_LOCK_TIME'", "'PHASE'", "'PLUGIN'", 
                     "'PLUGIN_DIR'", "'PLUGINS'", "'PORT'", "'PRECEDES'", 
                     "'PRECEDING'", "'PREPARE'", "'PRESERVE'", "'PREV'", 
                     "'PROCESSLIST'", "'PROFILE'", "'PROFILES'", "'PROXY'", 
                     "'QUERY'", "'QUICK'", "'REBUILD'", "'RECOVER'", "'RECURSIVE'", 
                     "'REDO_BUFFER_SIZE'", "'REDUNDANT'", "'RELAY'", "'RELAY_LOG_FILE'", 
                     "'RELAY_LOG_POS'", "'RELAYLOG'", "'REMOVE'", "'REORGANIZE'", 
                     "'REPAIR'", "'REPLICATE_DO_DB'", "'REPLICATE_DO_TABLE'", 
                     "'REPLICATE_IGNORE_DB'", "'REPLICATE_IGNORE_TABLE'", 
                     "'REPLICATE_REWRITE_DB'", "'REPLICATE_WILD_DO_TABLE'", 
                     "'REPLICATE_WILD_IGNORE_TABLE'", "'REPLICATION'", "'RESET'", 
                     "'RESTART'", "'RESUME'", "'RETURNED_SQLSTATE'", "'RETURNING'", 
                     "'RETURNS'", "'REUSE'", "'ROLE'", "'ROLLBACK'", "'ROLLUP'", 
                     "'ROTATE'", "'ROW'", "'ROWS'", "'ROW_FORMAT'", "'RTREE'", 
                     "'SAVEPOINT'", "'SCHEDULE'", "'SECURITY'", "'SEQUENCE'", 
                     "'SERVER'", "'SESSION'", "'SHARE'", "'SHARED'", "'SIGNED'", 
                     "'SIMPLE'", "'SLAVE'", "'SLOW'", "'SNAPSHOT'", "'SOCKET'", 
                     "'SOME'", "'SONAME'", "'SOUNDS'", "'SOURCE'", "'SQL_AFTER_GTIDS'", 
                     "'SQL_AFTER_MTS_GAPS'", "'SQL_BEFORE_GTIDS'", "'SQL_BUFFER_RESULT'", 
                     "'SQL_CACHE'", "'SQL_NO_CACHE'", "'SQL_THREAD'", "'START'", 
                     "'STARTS'", "'STATS_AUTO_RECALC'", "'STATS_PERSISTENT'", 
                     "'STATS_SAMPLE_PAGES'", "'STATUS'", "'STOP'", "'STORAGE'", 
                     "'STORED'", "'STRING'", "'SUBCLASS_ORIGIN'", "'SUBJECT'", 
                     "'SUBPARTITION'", "'SUBPARTITIONS'", "'SUSPEND'", "'SWAPS'", 
                     "'SWITCHES'", "'TABLE_NAME'", "'TABLESPACE'", "'TABLE_TYPE'", 
                     "'TEMPORARY'", "'TEMPTABLE'", "'THAN'", "'TRADITIONAL'", 
                     "'TRANSACTION'", "'TRANSACTIONAL'", "'TRIGGERS'", "'TRUNCATE'", 
                     "'UNBOUNDED'", "'UNDEFINED'", "'UNDOFILE'", "'UNDO_BUFFER_SIZE'", 
                     "'UNINSTALL'", "'UNKNOWN'", "'UNTIL'", "'UPGRADE'", 
                     "'USER'", "'USE_FRM'", "'USER_RESOURCES'", "'VALIDATION'", 
                     "'VALUE'", "'VARIABLES'", "'VIEW'", "'VIRTUAL'", "'VISIBLE'", 
                     "'WAIT'", "'WARNINGS'", "'WINDOW'", "'WITHOUT'", "'WORK'", 
                     "'WRAPPER'", "'X509'", "'XA'", "'XML'", "'YES'", "'EUR'", 
                     "'USA'", "'JIS'", "'ISO'", "'INTERNAL'", "'QUARTER'", 
                     "'MONTH'", "'DAY'", "'HOUR'", "'MINUTE'", "'WEEK'", 
                     "'SECOND'", "'MICROSECOND'", "'ADMIN'", "'APPLICATION_PASSWORD_ADMIN'", 
                     "'AUDIT_ADMIN'", "'BACKUP_ADMIN'", "'BINLOG_ADMIN'", 
                     "'BINLOG_ENCRYPTION_ADMIN'", "'CLONE_ADMIN'", "'CONNECTION_ADMIN'", 
                     "'ENCRYPTION_KEY_ADMIN'", "'EXECUTE'", "'FILE'", "'FIREWALL_ADMIN'", 
                     "'FIREWALL_USER'", "'FLUSH_OPTIMIZER_COSTS'", "'FLUSH_STATUS'", 
                     "'FLUSH_TABLES'", "'FLUSH_USER_RESOURCES'", "'GROUP_REPLICATION_ADMIN'", 
                     "'INNODB_REDO_LOG_ARCHIVE'", "'INNODB_REDO_LOG_ENABLE'", 
                     "'INVOKE'", "'LAMBDA'", "'NDB_STORED_USER'", "'PASSWORDLESS_USER_ADMIN'", 
                     "'PERSIST_RO_VARIABLES_ADMIN'", "'PRIVILEGES'", "'PROCESS'", 
                     "'RELOAD'", "'REPLICATION_APPLIER'", "'REPLICATION_SLAVE_ADMIN'", 
                     "'RESOURCE_GROUP_ADMIN'", "'RESOURCE_GROUP_USER'", 
                     "'ROLE_ADMIN'", "'ROUTINE'", "'S3'", "'SERVICE_CONNECTION_ADMIN'", 
                     "<INVALID>", "'SET_USER_ID'", "'SHOW_ROUTINE'", "'SHUTDOWN'", 
                     "'SUPER'", "'SYSTEM_VARIABLES_ADMIN'", "'TABLES'", 
                     "'TABLE_ENCRYPTION_ADMIN'", "'VERSION_TOKEN_ADMIN'", 
                     "'XA_RECOVER_ADMIN'", "'ARMSCII8'", "'ASCII'", "'BIG5'", 
                     "'CP1250'", "'CP1251'", "'CP1256'", "'CP1257'", "'CP850'", 
                     "'CP852'", "'CP866'", "'CP932'", "'DEC8'", "'EUCJPMS'", 
                     "'EUCKR'", "'GB18030'", "'GB2312'", "'GBK'", "'GEOSTD8'", 
                     "'GREEK'", "'HEBREW'", "'HP8'", "'KEYBCS2'", "'KOI8R'", 
                     "'KOI8U'", "'LATIN1'", "'LATIN2'", "'LATIN5'", "'LATIN7'", 
                     "'MACCE'", "'MACROMAN'", "'SJIS'", "'SWE7'", "'TIS620'", 
                     "'UCS2'", "'UJIS'", "'UTF16'", "'UTF16LE'", "'UTF32'", 
                     "'UTF8'", "'UTF8MB3'", "'UTF8MB4'", "'ARCHIVE'", "'BLACKHOLE'", 
                     "'CSV'", "'FEDERATED'", "'INNODB'", "'MEMORY'", "'MRG_MYISAM'", 
                     "'MYISAM'", "'NDB'", "'NDBCLUSTER'", "'PERFORMANCE_SCHEMA'", 
                     "'TOKUDB'", "'REPEATABLE'", "'COMMITTED'", "'UNCOMMITTED'", 
                     "'SERIALIZABLE'", "'GEOMETRYCOLLECTION'", "'GEOMCOLLECTION'", 
                     "'GEOMETRY'", "'LINESTRING'", "'MULTILINESTRING'", 
                     "'MULTIPOINT'", "'MULTIPOLYGON'", "'POINT'", "'POLYGON'", 
                     "'ABS'", "'ACOS'", "'ADDDATE'", "'ADDTIME'", "'AES_DECRYPT'", 
                     "'AES_ENCRYPT'", "'AREA'", "'ASBINARY'", "'ASIN'", 
                     "'ASTEXT'", "'ASWKB'", "'ASWKT'", "'ASYMMETRIC_DECRYPT'", 
                     "'ASYMMETRIC_DERIVE'", "'ASYMMETRIC_ENCRYPT'", "'ASYMMETRIC_SIGN'", 
                     "'ASYMMETRIC_VERIFY'", "'ATAN'", "'ATAN2'", "'BENCHMARK'", 
                     "'BIN'", "'BIT_COUNT'", "'BIT_LENGTH'", "'BUFFER'", 
                     "'CATALOG_NAME'", "'CEIL'", "'CEILING'", "'CENTROID'", 
                     "'CHARACTER_LENGTH'", "'CHARSET'", "'CHAR_LENGTH'", 
                     "'COERCIBILITY'", "'COLLATION'", "'COMPRESS'", "'CONCAT'", 
                     "'CONCAT_WS'", "'CONNECTION_ID'", "'CONV'", "'CONVERT_TZ'", 
                     "'COS'", "'COT'", "'CRC32'", "'CREATE_ASYMMETRIC_PRIV_KEY'", 
                     "'CREATE_ASYMMETRIC_PUB_KEY'", "'CREATE_DH_PARAMETERS'", 
                     "'CREATE_DIGEST'", "'CROSSES'", "'DATEDIFF'", "'DATE_FORMAT'", 
                     "'DAYNAME'", "'DAYOFMONTH'", "'DAYOFWEEK'", "'DAYOFYEAR'", 
                     "'DECODE'", "'DEGREES'", "'DES_DECRYPT'", "'DES_ENCRYPT'", 
                     "'DIMENSION'", "'DISJOINT'", "'ELT'", "'ENCODE'", "'ENCRYPT'", 
                     "'ENDPOINT'", "'ENGINE_ATTRIBUTE'", "'ENVELOPE'", "'EQUALS'", 
                     "'EXP'", "'EXPORT_SET'", "'EXTERIORRING'", "'EXTRACTVALUE'", 
                     "'FIELD'", "'FIND_IN_SET'", "'FLOOR'", "'FORMAT'", 
                     "'FOUND_ROWS'", "'FROM_BASE64'", "'FROM_DAYS'", "'FROM_UNIXTIME'", 
                     "'GEOMCOLLFROMTEXT'", "'GEOMCOLLFROMWKB'", "'GEOMETRYCOLLECTIONFROMTEXT'", 
                     "'GEOMETRYCOLLECTIONFROMWKB'", "'GEOMETRYFROMTEXT'", 
                     "'GEOMETRYFROMWKB'", "'GEOMETRYN'", "'GEOMETRYTYPE'", 
                     "'GEOMFROMTEXT'", "'GEOMFROMWKB'", "'GET_FORMAT'", 
                     "'GET_LOCK'", "'GLENGTH'", "'GREATEST'", "'GTID_SUBSET'", 
                     "'GTID_SUBTRACT'", "'HEX'", "'IFNULL'", "'INET6_ATON'", 
                     "'INET6_NTOA'", "'INET_ATON'", "'INET_NTOA'", "'INSTR'", 
                     "'INTERIORRINGN'", "'INTERSECTS'", "'ISCLOSED'", "'ISEMPTY'", 
                     "'ISNULL'", "'ISSIMPLE'", "'IS_FREE_LOCK'", "'IS_IPV4'", 
                     "'IS_IPV4_COMPAT'", "'IS_IPV4_MAPPED'", "'IS_IPV6'", 
                     "'IS_USED_LOCK'", "'LAST_INSERT_ID'", "'LCASE'", "'LEAST'", 
                     "'LENGTH'", "'LINEFROMTEXT'", "'LINEFROMWKB'", "'LINESTRINGFROMTEXT'", 
                     "'LINESTRINGFROMWKB'", "'LN'", "'LOAD_FILE'", "'LOCATE'", 
                     "'LOG'", "'LOG10'", "'LOG2'", "'LOWER'", "'LPAD'", 
                     "'LTRIM'", "'MAKEDATE'", "'MAKETIME'", "'MAKE_SET'", 
                     "'MASTER_POS_WAIT'", "'MBRCONTAINS'", "'MBRDISJOINT'", 
                     "'MBREQUAL'", "'MBRINTERSECTS'", "'MBROVERLAPS'", "'MBRTOUCHES'", 
                     "'MBRWITHIN'", "'MD5'", "'MLINEFROMTEXT'", "'MLINEFROMWKB'", 
                     "'MONTHNAME'", "'MPOINTFROMTEXT'", "'MPOINTFROMWKB'", 
                     "'MPOLYFROMTEXT'", "'MPOLYFROMWKB'", "'MULTILINESTRINGFROMTEXT'", 
                     "'MULTILINESTRINGFROMWKB'", "'MULTIPOINTFROMTEXT'", 
                     "'MULTIPOINTFROMWKB'", "'MULTIPOLYGONFROMTEXT'", "'MULTIPOLYGONFROMWKB'", 
                     "'NAME_CONST'", "'NULLIF'", "'NUMGEOMETRIES'", "'NUMINTERIORRINGS'", 
                     "'NUMPOINTS'", "'OCT'", "'OCTET_LENGTH'", "'ORD'", 
                     "'OVERLAPS'", "'PERIOD_ADD'", "'PERIOD_DIFF'", "'PI'", 
                     "'POINTFROMTEXT'", "'POINTFROMWKB'", "'POINTN'", "'POLYFROMTEXT'", 
                     "'POLYFROMWKB'", "'POLYGONFROMTEXT'", "'POLYGONFROMWKB'", 
                     "'POW'", "'POWER'", "'QUOTE'", "'RADIANS'", "'RAND'", 
                     "'RANDOM_BYTES'", "'RELEASE_LOCK'", "'REVERSE'", "'ROUND'", 
                     "'ROW_COUNT'", "'RPAD'", "'RTRIM'", "'SEC_TO_TIME'", 
                     "'SECONDARY_ENGINE_ATTRIBUTE'", "'SESSION_USER'", "'SHA'", 
                     "'SHA1'", "'SHA2'", "'SCHEMA_NAME'", "'SIGN'", "'SIN'", 
                     "'SLEEP'", "'SOUNDEX'", "'SQL_THREAD_WAIT_AFTER_GTIDS'", 
                     "'SQRT'", "'SRID'", "'STARTPOINT'", "'STRCMP'", "'STR_TO_DATE'", 
                     "'ST_AREA'", "'ST_ASBINARY'", "'ST_ASTEXT'", "'ST_ASWKB'", 
                     "'ST_ASWKT'", "'ST_BUFFER'", "'ST_CENTROID'", "'ST_CONTAINS'", 
                     "'ST_CROSSES'", "'ST_DIFFERENCE'", "'ST_DIMENSION'", 
                     "'ST_DISJOINT'", "'ST_DISTANCE'", "'ST_ENDPOINT'", 
                     "'ST_ENVELOPE'", "'ST_EQUALS'", "'ST_EXTERIORRING'", 
                     "'ST_GEOMCOLLFROMTEXT'", "'ST_GEOMCOLLFROMTXT'", "'ST_GEOMCOLLFROMWKB'", 
                     "'ST_GEOMETRYCOLLECTIONFROMTEXT'", "'ST_GEOMETRYCOLLECTIONFROMWKB'", 
                     "'ST_GEOMETRYFROMTEXT'", "'ST_GEOMETRYFROMWKB'", "'ST_GEOMETRYN'", 
                     "'ST_GEOMETRYTYPE'", "'ST_GEOMFROMTEXT'", "'ST_GEOMFROMWKB'", 
                     "'ST_INTERIORRINGN'", "'ST_INTERSECTION'", "'ST_INTERSECTS'", 
                     "'ST_ISCLOSED'", "'ST_ISEMPTY'", "'ST_ISSIMPLE'", "'ST_LINEFROMTEXT'", 
                     "'ST_LINEFROMWKB'", "'ST_LINESTRINGFROMTEXT'", "'ST_LINESTRINGFROMWKB'", 
                     "'ST_NUMGEOMETRIES'", "'ST_NUMINTERIORRING'", "'ST_NUMINTERIORRINGS'", 
                     "'ST_NUMPOINTS'", "'ST_OVERLAPS'", "'ST_POINTFROMTEXT'", 
                     "'ST_POINTFROMWKB'", "'ST_POINTN'", "'ST_POLYFROMTEXT'", 
                     "'ST_POLYFROMWKB'", "'ST_POLYGONFROMTEXT'", "'ST_POLYGONFROMWKB'", 
                     "'ST_SRID'", "'ST_STARTPOINT'", "'ST_SYMDIFFERENCE'", 
                     "'ST_TOUCHES'", "'ST_UNION'", "'ST_WITHIN'", "'ST_X'", 
                     "'ST_Y'", "'SUBDATE'", "'SUBSTRING_INDEX'", "'SUBTIME'", 
                     "'SYSTEM_USER'", "'TAN'", "'TIMEDIFF'", "'TIMESTAMPADD'", 
                     "'TIMESTAMPDIFF'", "'TIME_FORMAT'", "'TIME_TO_SEC'", 
                     "'TOUCHES'", "'TO_BASE64'", "'TO_DAYS'", "'TO_SECONDS'", 
                     "'UCASE'", "'UNCOMPRESS'", "'UNCOMPRESSED_LENGTH'", 
                     "'UNHEX'", "'UNIX_TIMESTAMP'", "'UPDATEXML'", "'UPPER'", 
                     "'UUID'", "'UUID_SHORT'", "'VALIDATE_PASSWORD_STRENGTH'", 
                     "'VERSION'", "'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS'", 
                     "'WEEKDAY'", "'WEEKOFYEAR'", "'WEIGHT_STRING'", "'WITHIN'", 
                     "'YEARWEEK'", "'Y'", "'X'", "':='", "'+='", "'-='", 
                     "'*='", "'/='", "'%='", "'&='", "'^='", "'|='", "'*'", 
                     "'/'", "'%'", "'+'", "'-'", "'DIV'", "'MOD'", "'='", 
                     "'>'", "'<'", "'!'", "'~'", "'|'", "'&'", "'^'", "'.'", 
                     "'('", "')'", "','", "';'", "'@'", "'0'", "'1'", "'2'", 
                     "'''", "'\"'", "'`'", "':'" ]

    symbolicNames = [ "<INVALID>", "SPACE", "SPEC_MYSQL_COMMENT", "COMMENT_INPUT", 
                      "LINE_COMMENT", "ADD", "ALL", "ALTER", "ALWAYS", "ANALYZE", 
                      "AND", "ARRAY", "AS", "ASC", "ATTRIBUTE", "BEFORE", 
                      "BETWEEN", "BOTH", "BUCKETS", "BY", "CALL", "CASCADE", 
                      "CASE", "CAST", "CHANGE", "CHARACTER", "CHECK", "COLLATE", 
                      "COLUMN", "CONDITION", "CONSTRAINT", "CONTINUE", "CONVERT", 
                      "CREATE", "CROSS", "CURRENT", "CURRENT_ROLE", "CURRENT_USER", 
                      "CURSOR", "DATABASE", "DATABASES", "DECLARE", "DEFAULT", 
                      "DELAYED", "DELETE", "DESC", "DESCRIBE", "DETERMINISTIC", 
                      "DIAGNOSTICS", "DISTINCT", "DISTINCTROW", "DROP", 
                      "EACH", "ELSE", "ELSEIF", "EMPTY", "ENCLOSED", "ESCAPED", 
                      "EXCEPT", "EXISTS", "EXIT", "EXPLAIN", "FALSE", "FETCH", 
                      "FOR", "FORCE", "FOREIGN", "FROM", "FULLTEXT", "GENERATED", 
                      "GET", "GRANT", "GROUP", "HAVING", "HIGH_PRIORITY", 
                      "HISTOGRAM", "IF", "IGNORE", "IGNORED", "IN", "INDEX", 
                      "INFILE", "INNER", "INOUT", "INSERT", "INTERVAL", 
                      "INTO", "IS", "ITERATE", "JOIN", "KEY", "KEYS", "KILL", 
                      "LATERAL", "LEADING", "LEAVE", "LEFT", "LIKE", "LIMIT", 
                      "LINEAR", "LINES", "LOAD", "LOCK", "LOCKED", "LOOP", 
                      "LOW_PRIORITY", "MASTER_BIND", "MASTER_SSL_VERIFY_SERVER_CERT", 
                      "MATCH", "MAXVALUE", "MINVALUE", "MODIFIES", "NATURAL", 
                      "NOT", "NO_WRITE_TO_BINLOG", "NULL_LITERAL", "NUMBER", 
                      "ON", "OPTIMIZE", "OPTION", "OPTIONAL", "OPTIONALLY", 
                      "OR", "ORDER", "OUT", "OUTER", "OUTFILE", "OVER", 
                      "PARTITION", "PRIMARY", "PROCEDURE", "PURGE", "RANGE", 
                      "READ", "READS", "REFERENCES", "REGEXP", "RELEASE", 
                      "RENAME", "REPEAT", "REPLACE", "REQUIRE", "RESIGNAL", 
                      "RESTRICT", "RETAIN", "RETURN", "REVOKE", "RIGHT", 
                      "RLIKE", "SCHEMA", "SCHEMAS", "SELECT", "SET", "SEPARATOR", 
                      "SHOW", "SIGNAL", "SKIP_", "SPATIAL", "SQL", "SQLEXCEPTION", 
                      "SQLSTATE", "SQLWARNING", "SQL_BIG_RESULT", "SQL_CALC_FOUND_ROWS", 
                      "SQL_SMALL_RESULT", "SSL", "STACKED", "STARTING", 
                      "STATEMENT", "STRAIGHT_JOIN", "TABLE", "TERMINATED", 
                      "THEN", "TO", "TRAILING", "TRIGGER", "TRUE", "UNDO", 
                      "UNION", "UNIQUE", "UNLOCK", "UNSIGNED", "UPDATE", 
                      "USAGE", "USE", "USING", "VALUES", "WHEN", "WHERE", 
                      "WHILE", "WITH", "WRITE", "XOR", "ZEROFILL", "TINYINT", 
                      "SMALLINT", "MEDIUMINT", "MIDDLEINT", "INT", "INT1", 
                      "INT2", "INT3", "INT4", "INT8", "INTEGER", "BIGINT", 
                      "REAL", "DOUBLE", "PRECISION", "FLOAT", "FLOAT4", 
                      "FLOAT8", "DECIMAL", "DEC", "NUMERIC", "DATE", "TIME", 
                      "TIMESTAMP", "DATETIME", "YEAR", "CHAR", "VARCHAR", 
                      "NVARCHAR", "NATIONAL", "BINARY", "VARBINARY", "TINYBLOB", 
                      "BLOB", "MEDIUMBLOB", "LONG", "LONGBLOB", "TINYTEXT", 
                      "TEXT", "MEDIUMTEXT", "LONGTEXT", "ENUM", "VARYING", 
                      "SERIAL", "YEAR_MONTH", "DAY_HOUR", "DAY_MINUTE", 
                      "DAY_SECOND", "HOUR_MINUTE", "HOUR_SECOND", "MINUTE_SECOND", 
                      "SECOND_MICROSECOND", "MINUTE_MICROSECOND", "HOUR_MICROSECOND", 
                      "DAY_MICROSECOND", "JSON_ARRAY", "JSON_ARRAYAGG", 
                      "JSON_ARRAY_APPEND", "JSON_ARRAY_INSERT", "JSON_CONTAINS", 
                      "JSON_CONTAINS_PATH", "JSON_DEPTH", "JSON_EXTRACT", 
                      "JSON_INSERT", "JSON_KEYS", "JSON_LENGTH", "JSON_MERGE", 
                      "JSON_MERGE_PATCH", "JSON_MERGE_PRESERVE", "JSON_OBJECT", 
                      "JSON_OBJECTAGG", "JSON_OVERLAPS", "JSON_PRETTY", 
                      "JSON_QUOTE", "JSON_REMOVE", "JSON_REPLACE", "JSON_SCHEMA_VALID", 
                      "JSON_SCHEMA_VALIDATION_REPORT", "JSON_SEARCH", "JSON_SET", 
                      "JSON_STORAGE_FREE", "JSON_STORAGE_SIZE", "JSON_TABLE", 
                      "JSON_TYPE", "JSON_UNQUOTE", "JSON_VALID", "JSON_VALUE", 
                      "NESTED", "ORDINALITY", "PATH", "AVG", "BIT_AND", 
                      "BIT_OR", "BIT_XOR", "COUNT", "CUME_DIST", "DENSE_RANK", 
                      "FIRST_VALUE", "GROUP_CONCAT", "LAG", "LAST_VALUE", 
                      "LEAD", "MAX", "MIN", "NTILE", "NTH_VALUE", "PERCENT_RANK", 
                      "RANK", "ROW_NUMBER", "STD", "STDDEV", "STDDEV_POP", 
                      "STDDEV_SAMP", "SUM", "VAR_POP", "VAR_SAMP", "VARIANCE", 
                      "CURRENT_DATE", "CURRENT_TIME", "CURRENT_TIMESTAMP", 
                      "LOCALTIME", "CURDATE", "CURTIME", "DATE_ADD", "DATE_SUB", 
                      "EXTRACT", "LOCALTIMESTAMP", "NOW", "POSITION", "SUBSTR", 
                      "SUBSTRING", "SYSDATE", "TRIM", "UTC_DATE", "UTC_TIME", 
                      "UTC_TIMESTAMP", "ACCOUNT", "ACTION", "AFTER", "AGGREGATE", 
                      "ALGORITHM", "ANY", "AT", "AUTHORS", "AUTOCOMMIT", 
                      "AUTOEXTEND_SIZE", "AUTO_INCREMENT", "AVG_ROW_LENGTH", 
                      "BEGIN", "BINLOG", "BIT", "BLOCK", "BOOL", "BOOLEAN", 
                      "BTREE", "CACHE", "CASCADED", "CHAIN", "CHANGED", 
                      "CHANNEL", "CHECKSUM", "PAGE_CHECKSUM", "CIPHER", 
                      "CLASS_ORIGIN", "CLIENT", "CLOSE", "CLUSTERING", "COALESCE", 
                      "CODE", "COLUMNS", "COLUMN_FORMAT", "COLUMN_NAME", 
                      "COMMENT", "COMMIT", "COMPACT", "COMPLETION", "COMPRESSED", 
                      "COMPRESSION", "CONCURRENT", "CONNECT", "CONNECTION", 
                      "CONSISTENT", "CONSTRAINT_CATALOG", "CONSTRAINT_SCHEMA", 
                      "CONSTRAINT_NAME", "CONTAINS", "CONTEXT", "CONTRIBUTORS", 
                      "COPY", "CPU", "CYCLE", "CURSOR_NAME", "DATA", "DATAFILE", 
                      "DEALLOCATE", "DEFAULT_AUTH", "DEFINER", "DELAY_KEY_WRITE", 
                      "DES_KEY_FILE", "DIRECTORY", "DISABLE", "DISCARD", 
                      "DISK", "DO", "DUMPFILE", "DUPLICATE", "DYNAMIC", 
                      "ENABLE", "ENCRYPTED", "ENCRYPTION", "ENCRYPTION_KEY_ID", 
                      "END", "ENDS", "ENGINE", "ENGINES", "ERROR", "ERRORS", 
                      "ESCAPE", "EVEN", "EVENT", "EVENTS", "EVERY", "EXCHANGE", 
                      "EXCLUSIVE", "EXPIRE", "EXPORT", "EXTENDED", "EXTENT_SIZE", 
                      "FAILED_LOGIN_ATTEMPTS", "FAST", "FAULTS", "FIELDS", 
                      "FILE_BLOCK_SIZE", "FILTER", "FIRST", "FIXED", "FLUSH", 
                      "FOLLOWING", "FOLLOWS", "FOUND", "FULL", "FUNCTION", 
                      "GENERAL", "GLOBAL", "GRANTS", "GROUP_REPLICATION", 
                      "HANDLER", "HASH", "HELP", "HISTORY", "HOST", "HOSTS", 
                      "IDENTIFIED", "IGNORE_SERVER_IDS", "IMPORT", "INCREMENT", 
                      "INDEXES", "INITIAL_SIZE", "INPLACE", "INSERT_METHOD", 
                      "INSTALL", "INSTANCE", "INSTANT", "INVISIBLE", "INVOKER", 
                      "IO", "IO_THREAD", "IPC", "ISOLATION", "ISSUER", "JSON", 
                      "KEY_BLOCK_SIZE", "LANGUAGE", "LAST", "LEAVES", "LESS", 
                      "LEVEL", "LIST", "LOCAL", "LOGFILE", "LOGS", "MASTER", 
                      "MASTER_AUTO_POSITION", "MASTER_CONNECT_RETRY", "MASTER_DELAY", 
                      "MASTER_HEARTBEAT_PERIOD", "MASTER_HOST", "MASTER_LOG_FILE", 
                      "MASTER_LOG_POS", "MASTER_PASSWORD", "MASTER_PORT", 
                      "MASTER_RETRY_COUNT", "MASTER_SSL", "MASTER_SSL_CA", 
                      "MASTER_SSL_CAPATH", "MASTER_SSL_CERT", "MASTER_SSL_CIPHER", 
                      "MASTER_SSL_CRL", "MASTER_SSL_CRLPATH", "MASTER_SSL_KEY", 
                      "MASTER_TLS_VERSION", "MASTER_USER", "MAX_CONNECTIONS_PER_HOUR", 
                      "MAX_QUERIES_PER_HOUR", "MAX_ROWS", "MAX_SIZE", "MAX_UPDATES_PER_HOUR", 
                      "MAX_USER_CONNECTIONS", "MEDIUM", "MEMBER", "MERGE", 
                      "MESSAGE_TEXT", "MID", "MIGRATE", "MIN_ROWS", "MODE", 
                      "MODIFY", "MUTEX", "MYSQL", "MYSQL_ERRNO", "NAME", 
                      "NAMES", "NCHAR", "NEVER", "NEXT", "NO", "NOCACHE", 
                      "NOCOPY", "NOCYCLE", "NOMAXVALUE", "NOMINVALUE", "NOWAIT", 
                      "NODEGROUP", "NONE", "ODBC", "OFFLINE", "OFFSET", 
                      "OF", "OJ", "OLD_PASSWORD", "ONE", "ONLINE", "ONLY", 
                      "OPEN", "OPTIMIZER_COSTS", "OPTIONS", "OWNER", "PACK_KEYS", 
                      "PAGE", "PAGE_COMPRESSED", "PAGE_COMPRESSION_LEVEL", 
                      "PARSER", "PARTIAL", "PARTITIONING", "PARTITIONS", 
                      "PASSWORD", "PASSWORD_LOCK_TIME", "PHASE", "PLUGIN", 
                      "PLUGIN_DIR", "PLUGINS", "PORT", "PRECEDES", "PRECEDING", 
                      "PREPARE", "PRESERVE", "PREV", "PROCESSLIST", "PROFILE", 
                      "PROFILES", "PROXY", "QUERY", "QUICK", "REBUILD", 
                      "RECOVER", "RECURSIVE", "REDO_BUFFER_SIZE", "REDUNDANT", 
                      "RELAY", "RELAY_LOG_FILE", "RELAY_LOG_POS", "RELAYLOG", 
                      "REMOVE", "REORGANIZE", "REPAIR", "REPLICATE_DO_DB", 
                      "REPLICATE_DO_TABLE", "REPLICATE_IGNORE_DB", "REPLICATE_IGNORE_TABLE", 
                      "REPLICATE_REWRITE_DB", "REPLICATE_WILD_DO_TABLE", 
                      "REPLICATE_WILD_IGNORE_TABLE", "REPLICATION", "RESET", 
                      "RESTART", "RESUME", "RETURNED_SQLSTATE", "RETURNING", 
                      "RETURNS", "REUSE", "ROLE", "ROLLBACK", "ROLLUP", 
                      "ROTATE", "ROW", "ROWS", "ROW_FORMAT", "RTREE", "SAVEPOINT", 
                      "SCHEDULE", "SECURITY", "SEQUENCE", "SERVER", "SESSION", 
                      "SHARE", "SHARED", "SIGNED", "SIMPLE", "SLAVE", "SLOW", 
                      "SNAPSHOT", "SOCKET", "SOME", "SONAME", "SOUNDS", 
                      "SOURCE", "SQL_AFTER_GTIDS", "SQL_AFTER_MTS_GAPS", 
                      "SQL_BEFORE_GTIDS", "SQL_BUFFER_RESULT", "SQL_CACHE", 
                      "SQL_NO_CACHE", "SQL_THREAD", "START", "STARTS", "STATS_AUTO_RECALC", 
                      "STATS_PERSISTENT", "STATS_SAMPLE_PAGES", "STATUS", 
                      "STOP", "STORAGE", "STORED", "STRING", "SUBCLASS_ORIGIN", 
                      "SUBJECT", "SUBPARTITION", "SUBPARTITIONS", "SUSPEND", 
                      "SWAPS", "SWITCHES", "TABLE_NAME", "TABLESPACE", "TABLE_TYPE", 
                      "TEMPORARY", "TEMPTABLE", "THAN", "TRADITIONAL", "TRANSACTION", 
                      "TRANSACTIONAL", "TRIGGERS", "TRUNCATE", "UNBOUNDED", 
                      "UNDEFINED", "UNDOFILE", "UNDO_BUFFER_SIZE", "UNINSTALL", 
                      "UNKNOWN", "UNTIL", "UPGRADE", "USER", "USE_FRM", 
                      "USER_RESOURCES", "VALIDATION", "VALUE", "VARIABLES", 
                      "VIEW", "VIRTUAL", "VISIBLE", "WAIT", "WARNINGS", 
                      "WINDOW", "WITHOUT", "WORK", "WRAPPER", "X509", "XA", 
                      "XML", "YES", "EUR", "USA", "JIS", "ISO", "INTERNAL", 
                      "QUARTER", "MONTH", "DAY", "HOUR", "MINUTE", "WEEK", 
                      "SECOND", "MICROSECOND", "ADMIN", "APPLICATION_PASSWORD_ADMIN", 
                      "AUDIT_ADMIN", "BACKUP_ADMIN", "BINLOG_ADMIN", "BINLOG_ENCRYPTION_ADMIN", 
                      "CLONE_ADMIN", "CONNECTION_ADMIN", "ENCRYPTION_KEY_ADMIN", 
                      "EXECUTE", "FILE", "FIREWALL_ADMIN", "FIREWALL_USER", 
                      "FLUSH_OPTIMIZER_COSTS", "FLUSH_STATUS", "FLUSH_TABLES", 
                      "FLUSH_USER_RESOURCES", "GROUP_REPLICATION_ADMIN", 
                      "INNODB_REDO_LOG_ARCHIVE", "INNODB_REDO_LOG_ENABLE", 
                      "INVOKE", "LAMBDA", "NDB_STORED_USER", "PASSWORDLESS_USER_ADMIN", 
                      "PERSIST_RO_VARIABLES_ADMIN", "PRIVILEGES", "PROCESS", 
                      "RELOAD", "REPLICATION_APPLIER", "REPLICATION_SLAVE_ADMIN", 
                      "RESOURCE_GROUP_ADMIN", "RESOURCE_GROUP_USER", "ROLE_ADMIN", 
                      "ROUTINE", "S3", "SERVICE_CONNECTION_ADMIN", "SESSION_VARIABLES_ADMIN", 
                      "SET_USER_ID", "SHOW_ROUTINE", "SHUTDOWN", "SUPER", 
                      "SYSTEM_VARIABLES_ADMIN", "TABLES", "TABLE_ENCRYPTION_ADMIN", 
                      "VERSION_TOKEN_ADMIN", "XA_RECOVER_ADMIN", "ARMSCII8", 
                      "ASCII", "BIG5", "CP1250", "CP1251", "CP1256", "CP1257", 
                      "CP850", "CP852", "CP866", "CP932", "DEC8", "EUCJPMS", 
                      "EUCKR", "GB18030", "GB2312", "GBK", "GEOSTD8", "GREEK", 
                      "HEBREW", "HP8", "KEYBCS2", "KOI8R", "KOI8U", "LATIN1", 
                      "LATIN2", "LATIN5", "LATIN7", "MACCE", "MACROMAN", 
                      "SJIS", "SWE7", "TIS620", "UCS2", "UJIS", "UTF16", 
                      "UTF16LE", "UTF32", "UTF8", "UTF8MB3", "UTF8MB4", 
                      "ARCHIVE", "BLACKHOLE", "CSV", "FEDERATED", "INNODB", 
                      "MEMORY", "MRG_MYISAM", "MYISAM", "NDB", "NDBCLUSTER", 
                      "PERFORMANCE_SCHEMA", "TOKUDB", "REPEATABLE", "COMMITTED", 
                      "UNCOMMITTED", "SERIALIZABLE", "GEOMETRYCOLLECTION", 
                      "GEOMCOLLECTION", "GEOMETRY", "LINESTRING", "MULTILINESTRING", 
                      "MULTIPOINT", "MULTIPOLYGON", "POINT", "POLYGON", 
                      "ABS", "ACOS", "ADDDATE", "ADDTIME", "AES_DECRYPT", 
                      "AES_ENCRYPT", "AREA", "ASBINARY", "ASIN", "ASTEXT", 
                      "ASWKB", "ASWKT", "ASYMMETRIC_DECRYPT", "ASYMMETRIC_DERIVE", 
                      "ASYMMETRIC_ENCRYPT", "ASYMMETRIC_SIGN", "ASYMMETRIC_VERIFY", 
                      "ATAN", "ATAN2", "BENCHMARK", "BIN", "BIT_COUNT", 
                      "BIT_LENGTH", "BUFFER", "CATALOG_NAME", "CEIL", "CEILING", 
                      "CENTROID", "CHARACTER_LENGTH", "CHARSET", "CHAR_LENGTH", 
                      "COERCIBILITY", "COLLATION", "COMPRESS", "CONCAT", 
                      "CONCAT_WS", "CONNECTION_ID", "CONV", "CONVERT_TZ", 
                      "COS", "COT", "CRC32", "CREATE_ASYMMETRIC_PRIV_KEY", 
                      "CREATE_ASYMMETRIC_PUB_KEY", "CREATE_DH_PARAMETERS", 
                      "CREATE_DIGEST", "CROSSES", "DATEDIFF", "DATE_FORMAT", 
                      "DAYNAME", "DAYOFMONTH", "DAYOFWEEK", "DAYOFYEAR", 
                      "DECODE", "DEGREES", "DES_DECRYPT", "DES_ENCRYPT", 
                      "DIMENSION", "DISJOINT", "ELT", "ENCODE", "ENCRYPT", 
                      "ENDPOINT", "ENGINE_ATTRIBUTE", "ENVELOPE", "EQUALS", 
                      "EXP", "EXPORT_SET", "EXTERIORRING", "EXTRACTVALUE", 
                      "FIELD", "FIND_IN_SET", "FLOOR", "FORMAT", "FOUND_ROWS", 
                      "FROM_BASE64", "FROM_DAYS", "FROM_UNIXTIME", "GEOMCOLLFROMTEXT", 
                      "GEOMCOLLFROMWKB", "GEOMETRYCOLLECTIONFROMTEXT", "GEOMETRYCOLLECTIONFROMWKB", 
                      "GEOMETRYFROMTEXT", "GEOMETRYFROMWKB", "GEOMETRYN", 
                      "GEOMETRYTYPE", "GEOMFROMTEXT", "GEOMFROMWKB", "GET_FORMAT", 
                      "GET_LOCK", "GLENGTH", "GREATEST", "GTID_SUBSET", 
                      "GTID_SUBTRACT", "HEX", "IFNULL", "INET6_ATON", "INET6_NTOA", 
                      "INET_ATON", "INET_NTOA", "INSTR", "INTERIORRINGN", 
                      "INTERSECTS", "ISCLOSED", "ISEMPTY", "ISNULL", "ISSIMPLE", 
                      "IS_FREE_LOCK", "IS_IPV4", "IS_IPV4_COMPAT", "IS_IPV4_MAPPED", 
                      "IS_IPV6", "IS_USED_LOCK", "LAST_INSERT_ID", "LCASE", 
                      "LEAST", "LENGTH", "LINEFROMTEXT", "LINEFROMWKB", 
                      "LINESTRINGFROMTEXT", "LINESTRINGFROMWKB", "LN", "LOAD_FILE", 
                      "LOCATE", "LOG", "LOG10", "LOG2", "LOWER", "LPAD", 
                      "LTRIM", "MAKEDATE", "MAKETIME", "MAKE_SET", "MASTER_POS_WAIT", 
                      "MBRCONTAINS", "MBRDISJOINT", "MBREQUAL", "MBRINTERSECTS", 
                      "MBROVERLAPS", "MBRTOUCHES", "MBRWITHIN", "MD5", "MLINEFROMTEXT", 
                      "MLINEFROMWKB", "MONTHNAME", "MPOINTFROMTEXT", "MPOINTFROMWKB", 
                      "MPOLYFROMTEXT", "MPOLYFROMWKB", "MULTILINESTRINGFROMTEXT", 
                      "MULTILINESTRINGFROMWKB", "MULTIPOINTFROMTEXT", "MULTIPOINTFROMWKB", 
                      "MULTIPOLYGONFROMTEXT", "MULTIPOLYGONFROMWKB", "NAME_CONST", 
                      "NULLIF", "NUMGEOMETRIES", "NUMINTERIORRINGS", "NUMPOINTS", 
                      "OCT", "OCTET_LENGTH", "ORD", "OVERLAPS", "PERIOD_ADD", 
                      "PERIOD_DIFF", "PI", "POINTFROMTEXT", "POINTFROMWKB", 
                      "POINTN", "POLYFROMTEXT", "POLYFROMWKB", "POLYGONFROMTEXT", 
                      "POLYGONFROMWKB", "POW", "POWER", "QUOTE", "RADIANS", 
                      "RAND", "RANDOM_BYTES", "RELEASE_LOCK", "REVERSE", 
                      "ROUND", "ROW_COUNT", "RPAD", "RTRIM", "SEC_TO_TIME", 
                      "SECONDARY_ENGINE_ATTRIBUTE", "SESSION_USER", "SHA", 
                      "SHA1", "SHA2", "SCHEMA_NAME", "SIGN", "SIN", "SLEEP", 
                      "SOUNDEX", "SQL_THREAD_WAIT_AFTER_GTIDS", "SQRT", 
                      "SRID", "STARTPOINT", "STRCMP", "STR_TO_DATE", "ST_AREA", 
                      "ST_ASBINARY", "ST_ASTEXT", "ST_ASWKB", "ST_ASWKT", 
                      "ST_BUFFER", "ST_CENTROID", "ST_CONTAINS", "ST_CROSSES", 
                      "ST_DIFFERENCE", "ST_DIMENSION", "ST_DISJOINT", "ST_DISTANCE", 
                      "ST_ENDPOINT", "ST_ENVELOPE", "ST_EQUALS", "ST_EXTERIORRING", 
                      "ST_GEOMCOLLFROMTEXT", "ST_GEOMCOLLFROMTXT", "ST_GEOMCOLLFROMWKB", 
                      "ST_GEOMETRYCOLLECTIONFROMTEXT", "ST_GEOMETRYCOLLECTIONFROMWKB", 
                      "ST_GEOMETRYFROMTEXT", "ST_GEOMETRYFROMWKB", "ST_GEOMETRYN", 
                      "ST_GEOMETRYTYPE", "ST_GEOMFROMTEXT", "ST_GEOMFROMWKB", 
                      "ST_INTERIORRINGN", "ST_INTERSECTION", "ST_INTERSECTS", 
                      "ST_ISCLOSED", "ST_ISEMPTY", "ST_ISSIMPLE", "ST_LINEFROMTEXT", 
                      "ST_LINEFROMWKB", "ST_LINESTRINGFROMTEXT", "ST_LINESTRINGFROMWKB", 
                      "ST_NUMGEOMETRIES", "ST_NUMINTERIORRING", "ST_NUMINTERIORRINGS", 
                      "ST_NUMPOINTS", "ST_OVERLAPS", "ST_POINTFROMTEXT", 
                      "ST_POINTFROMWKB", "ST_POINTN", "ST_POLYFROMTEXT", 
                      "ST_POLYFROMWKB", "ST_POLYGONFROMTEXT", "ST_POLYGONFROMWKB", 
                      "ST_SRID", "ST_STARTPOINT", "ST_SYMDIFFERENCE", "ST_TOUCHES", 
                      "ST_UNION", "ST_WITHIN", "ST_X", "ST_Y", "SUBDATE", 
                      "SUBSTRING_INDEX", "SUBTIME", "SYSTEM_USER", "TAN", 
                      "TIMEDIFF", "TIMESTAMPADD", "TIMESTAMPDIFF", "TIME_FORMAT", 
                      "TIME_TO_SEC", "TOUCHES", "TO_BASE64", "TO_DAYS", 
                      "TO_SECONDS", "UCASE", "UNCOMPRESS", "UNCOMPRESSED_LENGTH", 
                      "UNHEX", "UNIX_TIMESTAMP", "UPDATEXML", "UPPER", "UUID", 
                      "UUID_SHORT", "VALIDATE_PASSWORD_STRENGTH", "VERSION", 
                      "WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS", "WEEKDAY", "WEEKOFYEAR", 
                      "WEIGHT_STRING", "WITHIN", "YEARWEEK", "Y_FUNCTION", 
                      "X_FUNCTION", "VAR_ASSIGN", "PLUS_ASSIGN", "MINUS_ASSIGN", 
                      "MULT_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "AND_ASSIGN", 
                      "XOR_ASSIGN", "OR_ASSIGN", "STAR", "DIVIDE", "MODULE", 
                      "PLUS", "MINUS", "DIV", "MOD", "EQUAL_SYMBOL", "GREATER_SYMBOL", 
                      "LESS_SYMBOL", "EXCLAMATION_SYMBOL", "BIT_NOT_OP", 
                      "BIT_OR_OP", "BIT_AND_OP", "BIT_XOR_OP", "DOT", "LR_BRACKET", 
                      "RR_BRACKET", "COMMA", "SEMI", "AT_SIGN", "ZERO_DECIMAL", 
                      "ONE_DECIMAL", "TWO_DECIMAL", "SINGLE_QUOTE_SYMB", 
                      "DOUBLE_QUOTE_SYMB", "REVERSE_QUOTE_SYMB", "COLON_SYMB", 
                      "CHARSET_REVERSE_QOUTE_STRING", "FILESIZE_LITERAL", 
                      "START_NATIONAL_STRING_LITERAL", "STRING_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "REAL_LITERAL", 
                      "NULL_SPEC_LITERAL", "BIT_STRING", "STRING_CHARSET_NAME", 
                      "DOT_ID", "ID", "REVERSE_QUOTE_ID", "STRING_USER_NAME", 
                      "IP_ADDRESS", "LOCAL_ID", "GLOBAL_ID", "ERROR_RECONGNIGION" ]

    RULE_root = 0
    RULE_sqlStatements = 1
    RULE_sqlStatement = 2
    RULE_emptyStatement_ = 3
    RULE_ddlStatement = 4
    RULE_dmlStatement = 5
    RULE_transactionStatement = 6
    RULE_replicationStatement = 7
    RULE_preparedStatement = 8
    RULE_compoundStatement = 9
    RULE_administrationStatement = 10
    RULE_utilityStatement = 11
    RULE_createDatabase = 12
    RULE_createEvent = 13
    RULE_createIndex = 14
    RULE_createLogfileGroup = 15
    RULE_createProcedure = 16
    RULE_createFunction = 17
    RULE_createRole = 18
    RULE_createServer = 19
    RULE_createTable = 20
    RULE_createTablespaceInnodb = 21
    RULE_createTablespaceNdb = 22
    RULE_createTrigger = 23
    RULE_withClause = 24
    RULE_commonTableExpressions = 25
    RULE_cteName = 26
    RULE_cteColumnName = 27
    RULE_createView = 28
    RULE_createDatabaseOption = 29
    RULE_charSet = 30
    RULE_ownerStatement = 31
    RULE_scheduleExpression = 32
    RULE_timestampValue = 33
    RULE_intervalExpr = 34
    RULE_intervalType = 35
    RULE_enableType = 36
    RULE_indexType = 37
    RULE_indexOption = 38
    RULE_procedureParameter = 39
    RULE_functionParameter = 40
    RULE_routineOption = 41
    RULE_serverOption = 42
    RULE_createDefinitions = 43
    RULE_createDefinition = 44
    RULE_columnDefinition = 45
    RULE_columnConstraint = 46
    RULE_tableConstraint = 47
    RULE_referenceDefinition = 48
    RULE_referenceAction = 49
    RULE_referenceControlType = 50
    RULE_indexColumnDefinition = 51
    RULE_tableOption = 52
    RULE_tableType = 53
    RULE_tablespaceStorage = 54
    RULE_partitionDefinitions = 55
    RULE_partitionFunctionDefinition = 56
    RULE_subpartitionFunctionDefinition = 57
    RULE_partitionDefinition = 58
    RULE_partitionDefinerAtom = 59
    RULE_partitionDefinerVector = 60
    RULE_subpartitionDefinition = 61
    RULE_partitionOption = 62
    RULE_alterDatabase = 63
    RULE_alterEvent = 64
    RULE_alterFunction = 65
    RULE_alterInstance = 66
    RULE_alterLogfileGroup = 67
    RULE_alterProcedure = 68
    RULE_alterServer = 69
    RULE_alterTable = 70
    RULE_alterTablespace = 71
    RULE_alterView = 72
    RULE_alterSpecification = 73
    RULE_dropDatabase = 74
    RULE_dropEvent = 75
    RULE_dropIndex = 76
    RULE_dropLogfileGroup = 77
    RULE_dropProcedure = 78
    RULE_dropFunction = 79
    RULE_dropServer = 80
    RULE_dropTable = 81
    RULE_dropTablespace = 82
    RULE_dropTrigger = 83
    RULE_dropView = 84
    RULE_dropRole = 85
    RULE_setRole = 86
    RULE_renameTable = 87
    RULE_renameTableClause = 88
    RULE_truncateTable = 89
    RULE_callStatement = 90
    RULE_deleteStatement = 91
    RULE_doStatement = 92
    RULE_handlerStatement = 93
    RULE_insertStatement = 94
    RULE_loadDataStatement = 95
    RULE_loadXmlStatement = 96
    RULE_replaceStatement = 97
    RULE_selectStatement = 98
    RULE_updateStatement = 99
    RULE_insertStatementValue = 100
    RULE_updatedElement = 101
    RULE_assignmentField = 102
    RULE_lockClause = 103
    RULE_singleDeleteStatement = 104
    RULE_multipleDeleteStatement = 105
    RULE_handlerOpenStatement = 106
    RULE_handlerReadIndexStatement = 107
    RULE_handlerReadStatement = 108
    RULE_handlerCloseStatement = 109
    RULE_singleUpdateStatement = 110
    RULE_multipleUpdateStatement = 111
    RULE_orderByClause = 112
    RULE_orderByExpression = 113
    RULE_tableSources = 114
    RULE_tableSource = 115
    RULE_tableSourceItem = 116
    RULE_indexHint = 117
    RULE_indexHintType = 118
    RULE_joinPart = 119
    RULE_queryExpression = 120
    RULE_queryExpressionNointo = 121
    RULE_querySpecification = 122
    RULE_querySpecificationNointo = 123
    RULE_unionParenthesis = 124
    RULE_unionStatement = 125
    RULE_lateralStatement = 126
    RULE_jsonTable = 127
    RULE_jsonColumnList = 128
    RULE_jsonColumn = 129
    RULE_jsonOnEmpty = 130
    RULE_jsonOnError = 131
    RULE_selectSpec = 132
    RULE_selectElements = 133
    RULE_selectElement = 134
    RULE_selectIntoExpression = 135
    RULE_selectFieldsInto = 136
    RULE_selectLinesInto = 137
    RULE_fromClause = 138
    RULE_groupByClause = 139
    RULE_havingClause = 140
    RULE_windowClause = 141
    RULE_groupByItem = 142
    RULE_limitClause = 143
    RULE_limitClauseAtom = 144
    RULE_startTransaction = 145
    RULE_beginWork = 146
    RULE_commitWork = 147
    RULE_rollbackWork = 148
    RULE_savepointStatement = 149
    RULE_rollbackStatement = 150
    RULE_releaseStatement = 151
    RULE_lockTables = 152
    RULE_unlockTables = 153
    RULE_setAutocommitStatement = 154
    RULE_setTransactionStatement = 155
    RULE_transactionMode = 156
    RULE_lockTableElement = 157
    RULE_lockAction = 158
    RULE_transactionOption = 159
    RULE_transactionLevel = 160
    RULE_changeMaster = 161
    RULE_changeReplicationFilter = 162
    RULE_purgeBinaryLogs = 163
    RULE_resetMaster = 164
    RULE_resetSlave = 165
    RULE_startSlave = 166
    RULE_stopSlave = 167
    RULE_startGroupReplication = 168
    RULE_stopGroupReplication = 169
    RULE_masterOption = 170
    RULE_stringMasterOption = 171
    RULE_decimalMasterOption = 172
    RULE_boolMasterOption = 173
    RULE_channelOption = 174
    RULE_replicationFilter = 175
    RULE_tablePair = 176
    RULE_threadType = 177
    RULE_untilOption = 178
    RULE_connectionOption = 179
    RULE_gtuidSet = 180
    RULE_xaStartTransaction = 181
    RULE_xaEndTransaction = 182
    RULE_xaPrepareStatement = 183
    RULE_xaCommitWork = 184
    RULE_xaRollbackWork = 185
    RULE_xaRecoverWork = 186
    RULE_prepareStatement = 187
    RULE_executeStatement = 188
    RULE_deallocatePrepare = 189
    RULE_routineBody = 190
    RULE_blockStatement = 191
    RULE_caseStatement = 192
    RULE_ifStatement = 193
    RULE_iterateStatement = 194
    RULE_leaveStatement = 195
    RULE_loopStatement = 196
    RULE_repeatStatement = 197
    RULE_returnStatement = 198
    RULE_whileStatement = 199
    RULE_cursorStatement = 200
    RULE_declareVariable = 201
    RULE_declareCondition = 202
    RULE_declareCursor = 203
    RULE_declareHandler = 204
    RULE_handlerConditionValue = 205
    RULE_procedureSqlStatement = 206
    RULE_caseAlternative = 207
    RULE_elifAlternative = 208
    RULE_alterUser = 209
    RULE_createUser = 210
    RULE_dropUser = 211
    RULE_grantStatement = 212
    RULE_roleOption = 213
    RULE_grantProxy = 214
    RULE_renameUser = 215
    RULE_revokeStatement = 216
    RULE_revokeProxy = 217
    RULE_setPasswordStatement = 218
    RULE_userSpecification = 219
    RULE_userAuthOption = 220
    RULE_authenticationRule = 221
    RULE_tlsOption = 222
    RULE_userResourceOption = 223
    RULE_userPasswordOption = 224
    RULE_userLockOption = 225
    RULE_privelegeClause = 226
    RULE_privilege = 227
    RULE_privilegeLevel = 228
    RULE_renameUserClause = 229
    RULE_analyzeTable = 230
    RULE_checkTable = 231
    RULE_checksumTable = 232
    RULE_optimizeTable = 233
    RULE_repairTable = 234
    RULE_checkTableOption = 235
    RULE_createUdfunction = 236
    RULE_installPlugin = 237
    RULE_uninstallPlugin = 238
    RULE_setStatement = 239
    RULE_showStatement = 240
    RULE_variableClause = 241
    RULE_showCommonEntity = 242
    RULE_showFilter = 243
    RULE_showGlobalInfoClause = 244
    RULE_showSchemaEntity = 245
    RULE_showProfileType = 246
    RULE_binlogStatement = 247
    RULE_cacheIndexStatement = 248
    RULE_flushStatement = 249
    RULE_killStatement = 250
    RULE_loadIndexIntoCache = 251
    RULE_resetStatement = 252
    RULE_shutdownStatement = 253
    RULE_tableIndexes = 254
    RULE_flushOption = 255
    RULE_flushTableOption = 256
    RULE_loadedTableIndexes = 257
    RULE_simpleDescribeStatement = 258
    RULE_fullDescribeStatement = 259
    RULE_helpStatement = 260
    RULE_useStatement = 261
    RULE_signalStatement = 262
    RULE_resignalStatement = 263
    RULE_signalConditionInformation = 264
    RULE_diagnosticsStatement = 265
    RULE_diagnosticsConditionInformationName = 266
    RULE_describeObjectClause = 267
    RULE_fullId = 268
    RULE_tableName = 269
    RULE_roleName = 270
    RULE_fullColumnName = 271
    RULE_indexColumnName = 272
    RULE_userName = 273
    RULE_mysqlVariable = 274
    RULE_charsetName = 275
    RULE_collationName = 276
    RULE_engineName = 277
    RULE_uuidSet = 278
    RULE_xid = 279
    RULE_xuidStringId = 280
    RULE_authPlugin = 281
    RULE_uid = 282
    RULE_simpleId = 283
    RULE_dottedId = 284
    RULE_decimalLiteral = 285
    RULE_fileSizeLiteral = 286
    RULE_stringLiteral = 287
    RULE_booleanLiteral = 288
    RULE_hexadecimalLiteral = 289
    RULE_nullNotnull = 290
    RULE_constant = 291
    RULE_dataType = 292
    RULE_collectionOptions = 293
    RULE_convertedDataType = 294
    RULE_lengthOneDimension = 295
    RULE_lengthTwoDimension = 296
    RULE_lengthTwoOptionalDimension = 297
    RULE_uidList = 298
    RULE_fullColumnNameList = 299
    RULE_tables = 300
    RULE_indexColumnNames = 301
    RULE_expressions = 302
    RULE_expressionsWithDefaults = 303
    RULE_constants = 304
    RULE_simpleStrings = 305
    RULE_userVariables = 306
    RULE_defaultValue = 307
    RULE_currentTimestamp = 308
    RULE_expressionOrDefault = 309
    RULE_ifExists = 310
    RULE_ifNotExists = 311
    RULE_orReplace = 312
    RULE_waitNowaitClause = 313
    RULE_functionCall = 314
    RULE_specificFunction = 315
    RULE_caseFuncAlternative = 316
    RULE_levelsInWeightString = 317
    RULE_levelInWeightListElement = 318
    RULE_aggregateWindowedFunction = 319
    RULE_nonAggregateWindowedFunction = 320
    RULE_overClause = 321
    RULE_windowSpec = 322
    RULE_windowName = 323
    RULE_frameClause = 324
    RULE_frameUnits = 325
    RULE_frameExtent = 326
    RULE_frameBetween = 327
    RULE_frameRange = 328
    RULE_partitionClause = 329
    RULE_scalarFunctionName = 330
    RULE_passwordFunctionClause = 331
    RULE_functionArgs = 332
    RULE_functionArg = 333
    RULE_expression = 334
    RULE_predicate = 335
    RULE_expressionAtom = 336
    RULE_unaryOperator = 337
    RULE_comparisonOperator = 338
    RULE_logicalOperator = 339
    RULE_bitOperator = 340
    RULE_mathOperator = 341
    RULE_jsonOperator = 342
    RULE_charsetNameBase = 343
    RULE_transactionLevelBase = 344
    RULE_privilegesBase = 345
    RULE_intervalTypeBase = 346
    RULE_dataTypeBase = 347
    RULE_keywordsCanBeId = 348
    RULE_functionNameBase = 349

    ruleNames =  [ "root", "sqlStatements", "sqlStatement", "emptyStatement_", 
                   "ddlStatement", "dmlStatement", "transactionStatement", 
                   "replicationStatement", "preparedStatement", "compoundStatement", 
                   "administrationStatement", "utilityStatement", "createDatabase", 
                   "createEvent", "createIndex", "createLogfileGroup", "createProcedure", 
                   "createFunction", "createRole", "createServer", "createTable", 
                   "createTablespaceInnodb", "createTablespaceNdb", "createTrigger", 
                   "withClause", "commonTableExpressions", "cteName", "cteColumnName", 
                   "createView", "createDatabaseOption", "charSet", "ownerStatement", 
                   "scheduleExpression", "timestampValue", "intervalExpr", 
                   "intervalType", "enableType", "indexType", "indexOption", 
                   "procedureParameter", "functionParameter", "routineOption", 
                   "serverOption", "createDefinitions", "createDefinition", 
                   "columnDefinition", "columnConstraint", "tableConstraint", 
                   "referenceDefinition", "referenceAction", "referenceControlType", 
                   "indexColumnDefinition", "tableOption", "tableType", 
                   "tablespaceStorage", "partitionDefinitions", "partitionFunctionDefinition", 
                   "subpartitionFunctionDefinition", "partitionDefinition", 
                   "partitionDefinerAtom", "partitionDefinerVector", "subpartitionDefinition", 
                   "partitionOption", "alterDatabase", "alterEvent", "alterFunction", 
                   "alterInstance", "alterLogfileGroup", "alterProcedure", 
                   "alterServer", "alterTable", "alterTablespace", "alterView", 
                   "alterSpecification", "dropDatabase", "dropEvent", "dropIndex", 
                   "dropLogfileGroup", "dropProcedure", "dropFunction", 
                   "dropServer", "dropTable", "dropTablespace", "dropTrigger", 
                   "dropView", "dropRole", "setRole", "renameTable", "renameTableClause", 
                   "truncateTable", "callStatement", "deleteStatement", 
                   "doStatement", "handlerStatement", "insertStatement", 
                   "loadDataStatement", "loadXmlStatement", "replaceStatement", 
                   "selectStatement", "updateStatement", "insertStatementValue", 
                   "updatedElement", "assignmentField", "lockClause", "singleDeleteStatement", 
                   "multipleDeleteStatement", "handlerOpenStatement", "handlerReadIndexStatement", 
                   "handlerReadStatement", "handlerCloseStatement", "singleUpdateStatement", 
                   "multipleUpdateStatement", "orderByClause", "orderByExpression", 
                   "tableSources", "tableSource", "tableSourceItem", "indexHint", 
                   "indexHintType", "joinPart", "queryExpression", "queryExpressionNointo", 
                   "querySpecification", "querySpecificationNointo", "unionParenthesis", 
                   "unionStatement", "lateralStatement", "jsonTable", "jsonColumnList", 
                   "jsonColumn", "jsonOnEmpty", "jsonOnError", "selectSpec", 
                   "selectElements", "selectElement", "selectIntoExpression", 
                   "selectFieldsInto", "selectLinesInto", "fromClause", 
                   "groupByClause", "havingClause", "windowClause", "groupByItem", 
                   "limitClause", "limitClauseAtom", "startTransaction", 
                   "beginWork", "commitWork", "rollbackWork", "savepointStatement", 
                   "rollbackStatement", "releaseStatement", "lockTables", 
                   "unlockTables", "setAutocommitStatement", "setTransactionStatement", 
                   "transactionMode", "lockTableElement", "lockAction", 
                   "transactionOption", "transactionLevel", "changeMaster", 
                   "changeReplicationFilter", "purgeBinaryLogs", "resetMaster", 
                   "resetSlave", "startSlave", "stopSlave", "startGroupReplication", 
                   "stopGroupReplication", "masterOption", "stringMasterOption", 
                   "decimalMasterOption", "boolMasterOption", "channelOption", 
                   "replicationFilter", "tablePair", "threadType", "untilOption", 
                   "connectionOption", "gtuidSet", "xaStartTransaction", 
                   "xaEndTransaction", "xaPrepareStatement", "xaCommitWork", 
                   "xaRollbackWork", "xaRecoverWork", "prepareStatement", 
                   "executeStatement", "deallocatePrepare", "routineBody", 
                   "blockStatement", "caseStatement", "ifStatement", "iterateStatement", 
                   "leaveStatement", "loopStatement", "repeatStatement", 
                   "returnStatement", "whileStatement", "cursorStatement", 
                   "declareVariable", "declareCondition", "declareCursor", 
                   "declareHandler", "handlerConditionValue", "procedureSqlStatement", 
                   "caseAlternative", "elifAlternative", "alterUser", "createUser", 
                   "dropUser", "grantStatement", "roleOption", "grantProxy", 
                   "renameUser", "revokeStatement", "revokeProxy", "setPasswordStatement", 
                   "userSpecification", "userAuthOption", "authenticationRule", 
                   "tlsOption", "userResourceOption", "userPasswordOption", 
                   "userLockOption", "privelegeClause", "privilege", "privilegeLevel", 
                   "renameUserClause", "analyzeTable", "checkTable", "checksumTable", 
                   "optimizeTable", "repairTable", "checkTableOption", "createUdfunction", 
                   "installPlugin", "uninstallPlugin", "setStatement", "showStatement", 
                   "variableClause", "showCommonEntity", "showFilter", "showGlobalInfoClause", 
                   "showSchemaEntity", "showProfileType", "binlogStatement", 
                   "cacheIndexStatement", "flushStatement", "killStatement", 
                   "loadIndexIntoCache", "resetStatement", "shutdownStatement", 
                   "tableIndexes", "flushOption", "flushTableOption", "loadedTableIndexes", 
                   "simpleDescribeStatement", "fullDescribeStatement", "helpStatement", 
                   "useStatement", "signalStatement", "resignalStatement", 
                   "signalConditionInformation", "diagnosticsStatement", 
                   "diagnosticsConditionInformationName", "describeObjectClause", 
                   "fullId", "tableName", "roleName", "fullColumnName", 
                   "indexColumnName", "userName", "mysqlVariable", "charsetName", 
                   "collationName", "engineName", "uuidSet", "xid", "xuidStringId", 
                   "authPlugin", "uid", "simpleId", "dottedId", "decimalLiteral", 
                   "fileSizeLiteral", "stringLiteral", "booleanLiteral", 
                   "hexadecimalLiteral", "nullNotnull", "constant", "dataType", 
                   "collectionOptions", "convertedDataType", "lengthOneDimension", 
                   "lengthTwoDimension", "lengthTwoOptionalDimension", "uidList", 
                   "fullColumnNameList", "tables", "indexColumnNames", "expressions", 
                   "expressionsWithDefaults", "constants", "simpleStrings", 
                   "userVariables", "defaultValue", "currentTimestamp", 
                   "expressionOrDefault", "ifExists", "ifNotExists", "orReplace", 
                   "waitNowaitClause", "functionCall", "specificFunction", 
                   "caseFuncAlternative", "levelsInWeightString", "levelInWeightListElement", 
                   "aggregateWindowedFunction", "nonAggregateWindowedFunction", 
                   "overClause", "windowSpec", "windowName", "frameClause", 
                   "frameUnits", "frameExtent", "frameBetween", "frameRange", 
                   "partitionClause", "scalarFunctionName", "passwordFunctionClause", 
                   "functionArgs", "functionArg", "expression", "predicate", 
                   "expressionAtom", "unaryOperator", "comparisonOperator", 
                   "logicalOperator", "bitOperator", "mathOperator", "jsonOperator", 
                   "charsetNameBase", "transactionLevelBase", "privilegesBase", 
                   "intervalTypeBase", "dataTypeBase", "keywordsCanBeId", 
                   "functionNameBase" ]

    EOF = Token.EOF
    SPACE=1
    SPEC_MYSQL_COMMENT=2
    COMMENT_INPUT=3
    LINE_COMMENT=4
    ADD=5
    ALL=6
    ALTER=7
    ALWAYS=8
    ANALYZE=9
    AND=10
    ARRAY=11
    AS=12
    ASC=13
    ATTRIBUTE=14
    BEFORE=15
    BETWEEN=16
    BOTH=17
    BUCKETS=18
    BY=19
    CALL=20
    CASCADE=21
    CASE=22
    CAST=23
    CHANGE=24
    CHARACTER=25
    CHECK=26
    COLLATE=27
    COLUMN=28
    CONDITION=29
    CONSTRAINT=30
    CONTINUE=31
    CONVERT=32
    CREATE=33
    CROSS=34
    CURRENT=35
    CURRENT_ROLE=36
    CURRENT_USER=37
    CURSOR=38
    DATABASE=39
    DATABASES=40
    DECLARE=41
    DEFAULT=42
    DELAYED=43
    DELETE=44
    DESC=45
    DESCRIBE=46
    DETERMINISTIC=47
    DIAGNOSTICS=48
    DISTINCT=49
    DISTINCTROW=50
    DROP=51
    EACH=52
    ELSE=53
    ELSEIF=54
    EMPTY=55
    ENCLOSED=56
    ESCAPED=57
    EXCEPT=58
    EXISTS=59
    EXIT=60
    EXPLAIN=61
    FALSE=62
    FETCH=63
    FOR=64
    FORCE=65
    FOREIGN=66
    FROM=67
    FULLTEXT=68
    GENERATED=69
    GET=70
    GRANT=71
    GROUP=72
    HAVING=73
    HIGH_PRIORITY=74
    HISTOGRAM=75
    IF=76
    IGNORE=77
    IGNORED=78
    IN=79
    INDEX=80
    INFILE=81
    INNER=82
    INOUT=83
    INSERT=84
    INTERVAL=85
    INTO=86
    IS=87
    ITERATE=88
    JOIN=89
    KEY=90
    KEYS=91
    KILL=92
    LATERAL=93
    LEADING=94
    LEAVE=95
    LEFT=96
    LIKE=97
    LIMIT=98
    LINEAR=99
    LINES=100
    LOAD=101
    LOCK=102
    LOCKED=103
    LOOP=104
    LOW_PRIORITY=105
    MASTER_BIND=106
    MASTER_SSL_VERIFY_SERVER_CERT=107
    MATCH=108
    MAXVALUE=109
    MINVALUE=110
    MODIFIES=111
    NATURAL=112
    NOT=113
    NO_WRITE_TO_BINLOG=114
    NULL_LITERAL=115
    NUMBER=116
    ON=117
    OPTIMIZE=118
    OPTION=119
    OPTIONAL=120
    OPTIONALLY=121
    OR=122
    ORDER=123
    OUT=124
    OUTER=125
    OUTFILE=126
    OVER=127
    PARTITION=128
    PRIMARY=129
    PROCEDURE=130
    PURGE=131
    RANGE=132
    READ=133
    READS=134
    REFERENCES=135
    REGEXP=136
    RELEASE=137
    RENAME=138
    REPEAT=139
    REPLACE=140
    REQUIRE=141
    RESIGNAL=142
    RESTRICT=143
    RETAIN=144
    RETURN=145
    REVOKE=146
    RIGHT=147
    RLIKE=148
    SCHEMA=149
    SCHEMAS=150
    SELECT=151
    SET=152
    SEPARATOR=153
    SHOW=154
    SIGNAL=155
    SKIP_=156
    SPATIAL=157
    SQL=158
    SQLEXCEPTION=159
    SQLSTATE=160
    SQLWARNING=161
    SQL_BIG_RESULT=162
    SQL_CALC_FOUND_ROWS=163
    SQL_SMALL_RESULT=164
    SSL=165
    STACKED=166
    STARTING=167
    STATEMENT=168
    STRAIGHT_JOIN=169
    TABLE=170
    TERMINATED=171
    THEN=172
    TO=173
    TRAILING=174
    TRIGGER=175
    TRUE=176
    UNDO=177
    UNION=178
    UNIQUE=179
    UNLOCK=180
    UNSIGNED=181
    UPDATE=182
    USAGE=183
    USE=184
    USING=185
    VALUES=186
    WHEN=187
    WHERE=188
    WHILE=189
    WITH=190
    WRITE=191
    XOR=192
    ZEROFILL=193
    TINYINT=194
    SMALLINT=195
    MEDIUMINT=196
    MIDDLEINT=197
    INT=198
    INT1=199
    INT2=200
    INT3=201
    INT4=202
    INT8=203
    INTEGER=204
    BIGINT=205
    REAL=206
    DOUBLE=207
    PRECISION=208
    FLOAT=209
    FLOAT4=210
    FLOAT8=211
    DECIMAL=212
    DEC=213
    NUMERIC=214
    DATE=215
    TIME=216
    TIMESTAMP=217
    DATETIME=218
    YEAR=219
    CHAR=220
    VARCHAR=221
    NVARCHAR=222
    NATIONAL=223
    BINARY=224
    VARBINARY=225
    TINYBLOB=226
    BLOB=227
    MEDIUMBLOB=228
    LONG=229
    LONGBLOB=230
    TINYTEXT=231
    TEXT=232
    MEDIUMTEXT=233
    LONGTEXT=234
    ENUM=235
    VARYING=236
    SERIAL=237
    YEAR_MONTH=238
    DAY_HOUR=239
    DAY_MINUTE=240
    DAY_SECOND=241
    HOUR_MINUTE=242
    HOUR_SECOND=243
    MINUTE_SECOND=244
    SECOND_MICROSECOND=245
    MINUTE_MICROSECOND=246
    HOUR_MICROSECOND=247
    DAY_MICROSECOND=248
    JSON_ARRAY=249
    JSON_ARRAYAGG=250
    JSON_ARRAY_APPEND=251
    JSON_ARRAY_INSERT=252
    JSON_CONTAINS=253
    JSON_CONTAINS_PATH=254
    JSON_DEPTH=255
    JSON_EXTRACT=256
    JSON_INSERT=257
    JSON_KEYS=258
    JSON_LENGTH=259
    JSON_MERGE=260
    JSON_MERGE_PATCH=261
    JSON_MERGE_PRESERVE=262
    JSON_OBJECT=263
    JSON_OBJECTAGG=264
    JSON_OVERLAPS=265
    JSON_PRETTY=266
    JSON_QUOTE=267
    JSON_REMOVE=268
    JSON_REPLACE=269
    JSON_SCHEMA_VALID=270
    JSON_SCHEMA_VALIDATION_REPORT=271
    JSON_SEARCH=272
    JSON_SET=273
    JSON_STORAGE_FREE=274
    JSON_STORAGE_SIZE=275
    JSON_TABLE=276
    JSON_TYPE=277
    JSON_UNQUOTE=278
    JSON_VALID=279
    JSON_VALUE=280
    NESTED=281
    ORDINALITY=282
    PATH=283
    AVG=284
    BIT_AND=285
    BIT_OR=286
    BIT_XOR=287
    COUNT=288
    CUME_DIST=289
    DENSE_RANK=290
    FIRST_VALUE=291
    GROUP_CONCAT=292
    LAG=293
    LAST_VALUE=294
    LEAD=295
    MAX=296
    MIN=297
    NTILE=298
    NTH_VALUE=299
    PERCENT_RANK=300
    RANK=301
    ROW_NUMBER=302
    STD=303
    STDDEV=304
    STDDEV_POP=305
    STDDEV_SAMP=306
    SUM=307
    VAR_POP=308
    VAR_SAMP=309
    VARIANCE=310
    CURRENT_DATE=311
    CURRENT_TIME=312
    CURRENT_TIMESTAMP=313
    LOCALTIME=314
    CURDATE=315
    CURTIME=316
    DATE_ADD=317
    DATE_SUB=318
    EXTRACT=319
    LOCALTIMESTAMP=320
    NOW=321
    POSITION=322
    SUBSTR=323
    SUBSTRING=324
    SYSDATE=325
    TRIM=326
    UTC_DATE=327
    UTC_TIME=328
    UTC_TIMESTAMP=329
    ACCOUNT=330
    ACTION=331
    AFTER=332
    AGGREGATE=333
    ALGORITHM=334
    ANY=335
    AT=336
    AUTHORS=337
    AUTOCOMMIT=338
    AUTOEXTEND_SIZE=339
    AUTO_INCREMENT=340
    AVG_ROW_LENGTH=341
    BEGIN=342
    BINLOG=343
    BIT=344
    BLOCK=345
    BOOL=346
    BOOLEAN=347
    BTREE=348
    CACHE=349
    CASCADED=350
    CHAIN=351
    CHANGED=352
    CHANNEL=353
    CHECKSUM=354
    PAGE_CHECKSUM=355
    CIPHER=356
    CLASS_ORIGIN=357
    CLIENT=358
    CLOSE=359
    CLUSTERING=360
    COALESCE=361
    CODE=362
    COLUMNS=363
    COLUMN_FORMAT=364
    COLUMN_NAME=365
    COMMENT=366
    COMMIT=367
    COMPACT=368
    COMPLETION=369
    COMPRESSED=370
    COMPRESSION=371
    CONCURRENT=372
    CONNECT=373
    CONNECTION=374
    CONSISTENT=375
    CONSTRAINT_CATALOG=376
    CONSTRAINT_SCHEMA=377
    CONSTRAINT_NAME=378
    CONTAINS=379
    CONTEXT=380
    CONTRIBUTORS=381
    COPY=382
    CPU=383
    CYCLE=384
    CURSOR_NAME=385
    DATA=386
    DATAFILE=387
    DEALLOCATE=388
    DEFAULT_AUTH=389
    DEFINER=390
    DELAY_KEY_WRITE=391
    DES_KEY_FILE=392
    DIRECTORY=393
    DISABLE=394
    DISCARD=395
    DISK=396
    DO=397
    DUMPFILE=398
    DUPLICATE=399
    DYNAMIC=400
    ENABLE=401
    ENCRYPTED=402
    ENCRYPTION=403
    ENCRYPTION_KEY_ID=404
    END=405
    ENDS=406
    ENGINE=407
    ENGINES=408
    ERROR=409
    ERRORS=410
    ESCAPE=411
    EVEN=412
    EVENT=413
    EVENTS=414
    EVERY=415
    EXCHANGE=416
    EXCLUSIVE=417
    EXPIRE=418
    EXPORT=419
    EXTENDED=420
    EXTENT_SIZE=421
    FAILED_LOGIN_ATTEMPTS=422
    FAST=423
    FAULTS=424
    FIELDS=425
    FILE_BLOCK_SIZE=426
    FILTER=427
    FIRST=428
    FIXED=429
    FLUSH=430
    FOLLOWING=431
    FOLLOWS=432
    FOUND=433
    FULL=434
    FUNCTION=435
    GENERAL=436
    GLOBAL=437
    GRANTS=438
    GROUP_REPLICATION=439
    HANDLER=440
    HASH=441
    HELP=442
    HISTORY=443
    HOST=444
    HOSTS=445
    IDENTIFIED=446
    IGNORE_SERVER_IDS=447
    IMPORT=448
    INCREMENT=449
    INDEXES=450
    INITIAL_SIZE=451
    INPLACE=452
    INSERT_METHOD=453
    INSTALL=454
    INSTANCE=455
    INSTANT=456
    INVISIBLE=457
    INVOKER=458
    IO=459
    IO_THREAD=460
    IPC=461
    ISOLATION=462
    ISSUER=463
    JSON=464
    KEY_BLOCK_SIZE=465
    LANGUAGE=466
    LAST=467
    LEAVES=468
    LESS=469
    LEVEL=470
    LIST=471
    LOCAL=472
    LOGFILE=473
    LOGS=474
    MASTER=475
    MASTER_AUTO_POSITION=476
    MASTER_CONNECT_RETRY=477
    MASTER_DELAY=478
    MASTER_HEARTBEAT_PERIOD=479
    MASTER_HOST=480
    MASTER_LOG_FILE=481
    MASTER_LOG_POS=482
    MASTER_PASSWORD=483
    MASTER_PORT=484
    MASTER_RETRY_COUNT=485
    MASTER_SSL=486
    MASTER_SSL_CA=487
    MASTER_SSL_CAPATH=488
    MASTER_SSL_CERT=489
    MASTER_SSL_CIPHER=490
    MASTER_SSL_CRL=491
    MASTER_SSL_CRLPATH=492
    MASTER_SSL_KEY=493
    MASTER_TLS_VERSION=494
    MASTER_USER=495
    MAX_CONNECTIONS_PER_HOUR=496
    MAX_QUERIES_PER_HOUR=497
    MAX_ROWS=498
    MAX_SIZE=499
    MAX_UPDATES_PER_HOUR=500
    MAX_USER_CONNECTIONS=501
    MEDIUM=502
    MEMBER=503
    MERGE=504
    MESSAGE_TEXT=505
    MID=506
    MIGRATE=507
    MIN_ROWS=508
    MODE=509
    MODIFY=510
    MUTEX=511
    MYSQL=512
    MYSQL_ERRNO=513
    NAME=514
    NAMES=515
    NCHAR=516
    NEVER=517
    NEXT=518
    NO=519
    NOCACHE=520
    NOCOPY=521
    NOCYCLE=522
    NOMAXVALUE=523
    NOMINVALUE=524
    NOWAIT=525
    NODEGROUP=526
    NONE=527
    ODBC=528
    OFFLINE=529
    OFFSET=530
    OF=531
    OJ=532
    OLD_PASSWORD=533
    ONE=534
    ONLINE=535
    ONLY=536
    OPEN=537
    OPTIMIZER_COSTS=538
    OPTIONS=539
    OWNER=540
    PACK_KEYS=541
    PAGE=542
    PAGE_COMPRESSED=543
    PAGE_COMPRESSION_LEVEL=544
    PARSER=545
    PARTIAL=546
    PARTITIONING=547
    PARTITIONS=548
    PASSWORD=549
    PASSWORD_LOCK_TIME=550
    PHASE=551
    PLUGIN=552
    PLUGIN_DIR=553
    PLUGINS=554
    PORT=555
    PRECEDES=556
    PRECEDING=557
    PREPARE=558
    PRESERVE=559
    PREV=560
    PROCESSLIST=561
    PROFILE=562
    PROFILES=563
    PROXY=564
    QUERY=565
    QUICK=566
    REBUILD=567
    RECOVER=568
    RECURSIVE=569
    REDO_BUFFER_SIZE=570
    REDUNDANT=571
    RELAY=572
    RELAY_LOG_FILE=573
    RELAY_LOG_POS=574
    RELAYLOG=575
    REMOVE=576
    REORGANIZE=577
    REPAIR=578
    REPLICATE_DO_DB=579
    REPLICATE_DO_TABLE=580
    REPLICATE_IGNORE_DB=581
    REPLICATE_IGNORE_TABLE=582
    REPLICATE_REWRITE_DB=583
    REPLICATE_WILD_DO_TABLE=584
    REPLICATE_WILD_IGNORE_TABLE=585
    REPLICATION=586
    RESET=587
    RESTART=588
    RESUME=589
    RETURNED_SQLSTATE=590
    RETURNING=591
    RETURNS=592
    REUSE=593
    ROLE=594
    ROLLBACK=595
    ROLLUP=596
    ROTATE=597
    ROW=598
    ROWS=599
    ROW_FORMAT=600
    RTREE=601
    SAVEPOINT=602
    SCHEDULE=603
    SECURITY=604
    SEQUENCE=605
    SERVER=606
    SESSION=607
    SHARE=608
    SHARED=609
    SIGNED=610
    SIMPLE=611
    SLAVE=612
    SLOW=613
    SNAPSHOT=614
    SOCKET=615
    SOME=616
    SONAME=617
    SOUNDS=618
    SOURCE=619
    SQL_AFTER_GTIDS=620
    SQL_AFTER_MTS_GAPS=621
    SQL_BEFORE_GTIDS=622
    SQL_BUFFER_RESULT=623
    SQL_CACHE=624
    SQL_NO_CACHE=625
    SQL_THREAD=626
    START=627
    STARTS=628
    STATS_AUTO_RECALC=629
    STATS_PERSISTENT=630
    STATS_SAMPLE_PAGES=631
    STATUS=632
    STOP=633
    STORAGE=634
    STORED=635
    STRING=636
    SUBCLASS_ORIGIN=637
    SUBJECT=638
    SUBPARTITION=639
    SUBPARTITIONS=640
    SUSPEND=641
    SWAPS=642
    SWITCHES=643
    TABLE_NAME=644
    TABLESPACE=645
    TABLE_TYPE=646
    TEMPORARY=647
    TEMPTABLE=648
    THAN=649
    TRADITIONAL=650
    TRANSACTION=651
    TRANSACTIONAL=652
    TRIGGERS=653
    TRUNCATE=654
    UNBOUNDED=655
    UNDEFINED=656
    UNDOFILE=657
    UNDO_BUFFER_SIZE=658
    UNINSTALL=659
    UNKNOWN=660
    UNTIL=661
    UPGRADE=662
    USER=663
    USE_FRM=664
    USER_RESOURCES=665
    VALIDATION=666
    VALUE=667
    VARIABLES=668
    VIEW=669
    VIRTUAL=670
    VISIBLE=671
    WAIT=672
    WARNINGS=673
    WINDOW=674
    WITHOUT=675
    WORK=676
    WRAPPER=677
    X509=678
    XA=679
    XML=680
    YES=681
    EUR=682
    USA=683
    JIS=684
    ISO=685
    INTERNAL=686
    QUARTER=687
    MONTH=688
    DAY=689
    HOUR=690
    MINUTE=691
    WEEK=692
    SECOND=693
    MICROSECOND=694
    ADMIN=695
    APPLICATION_PASSWORD_ADMIN=696
    AUDIT_ADMIN=697
    BACKUP_ADMIN=698
    BINLOG_ADMIN=699
    BINLOG_ENCRYPTION_ADMIN=700
    CLONE_ADMIN=701
    CONNECTION_ADMIN=702
    ENCRYPTION_KEY_ADMIN=703
    EXECUTE=704
    FILE=705
    FIREWALL_ADMIN=706
    FIREWALL_USER=707
    FLUSH_OPTIMIZER_COSTS=708
    FLUSH_STATUS=709
    FLUSH_TABLES=710
    FLUSH_USER_RESOURCES=711
    GROUP_REPLICATION_ADMIN=712
    INNODB_REDO_LOG_ARCHIVE=713
    INNODB_REDO_LOG_ENABLE=714
    INVOKE=715
    LAMBDA=716
    NDB_STORED_USER=717
    PASSWORDLESS_USER_ADMIN=718
    PERSIST_RO_VARIABLES_ADMIN=719
    PRIVILEGES=720
    PROCESS=721
    RELOAD=722
    REPLICATION_APPLIER=723
    REPLICATION_SLAVE_ADMIN=724
    RESOURCE_GROUP_ADMIN=725
    RESOURCE_GROUP_USER=726
    ROLE_ADMIN=727
    ROUTINE=728
    S3=729
    SERVICE_CONNECTION_ADMIN=730
    SESSION_VARIABLES_ADMIN=731
    SET_USER_ID=732
    SHOW_ROUTINE=733
    SHUTDOWN=734
    SUPER=735
    SYSTEM_VARIABLES_ADMIN=736
    TABLES=737
    TABLE_ENCRYPTION_ADMIN=738
    VERSION_TOKEN_ADMIN=739
    XA_RECOVER_ADMIN=740
    ARMSCII8=741
    ASCII=742
    BIG5=743
    CP1250=744
    CP1251=745
    CP1256=746
    CP1257=747
    CP850=748
    CP852=749
    CP866=750
    CP932=751
    DEC8=752
    EUCJPMS=753
    EUCKR=754
    GB18030=755
    GB2312=756
    GBK=757
    GEOSTD8=758
    GREEK=759
    HEBREW=760
    HP8=761
    KEYBCS2=762
    KOI8R=763
    KOI8U=764
    LATIN1=765
    LATIN2=766
    LATIN5=767
    LATIN7=768
    MACCE=769
    MACROMAN=770
    SJIS=771
    SWE7=772
    TIS620=773
    UCS2=774
    UJIS=775
    UTF16=776
    UTF16LE=777
    UTF32=778
    UTF8=779
    UTF8MB3=780
    UTF8MB4=781
    ARCHIVE=782
    BLACKHOLE=783
    CSV=784
    FEDERATED=785
    INNODB=786
    MEMORY=787
    MRG_MYISAM=788
    MYISAM=789
    NDB=790
    NDBCLUSTER=791
    PERFORMANCE_SCHEMA=792
    TOKUDB=793
    REPEATABLE=794
    COMMITTED=795
    UNCOMMITTED=796
    SERIALIZABLE=797
    GEOMETRYCOLLECTION=798
    GEOMCOLLECTION=799
    GEOMETRY=800
    LINESTRING=801
    MULTILINESTRING=802
    MULTIPOINT=803
    MULTIPOLYGON=804
    POINT=805
    POLYGON=806
    ABS=807
    ACOS=808
    ADDDATE=809
    ADDTIME=810
    AES_DECRYPT=811
    AES_ENCRYPT=812
    AREA=813
    ASBINARY=814
    ASIN=815
    ASTEXT=816
    ASWKB=817
    ASWKT=818
    ASYMMETRIC_DECRYPT=819
    ASYMMETRIC_DERIVE=820
    ASYMMETRIC_ENCRYPT=821
    ASYMMETRIC_SIGN=822
    ASYMMETRIC_VERIFY=823
    ATAN=824
    ATAN2=825
    BENCHMARK=826
    BIN=827
    BIT_COUNT=828
    BIT_LENGTH=829
    BUFFER=830
    CATALOG_NAME=831
    CEIL=832
    CEILING=833
    CENTROID=834
    CHARACTER_LENGTH=835
    CHARSET=836
    CHAR_LENGTH=837
    COERCIBILITY=838
    COLLATION=839
    COMPRESS=840
    CONCAT=841
    CONCAT_WS=842
    CONNECTION_ID=843
    CONV=844
    CONVERT_TZ=845
    COS=846
    COT=847
    CRC32=848
    CREATE_ASYMMETRIC_PRIV_KEY=849
    CREATE_ASYMMETRIC_PUB_KEY=850
    CREATE_DH_PARAMETERS=851
    CREATE_DIGEST=852
    CROSSES=853
    DATEDIFF=854
    DATE_FORMAT=855
    DAYNAME=856
    DAYOFMONTH=857
    DAYOFWEEK=858
    DAYOFYEAR=859
    DECODE=860
    DEGREES=861
    DES_DECRYPT=862
    DES_ENCRYPT=863
    DIMENSION=864
    DISJOINT=865
    ELT=866
    ENCODE=867
    ENCRYPT=868
    ENDPOINT=869
    ENGINE_ATTRIBUTE=870
    ENVELOPE=871
    EQUALS=872
    EXP=873
    EXPORT_SET=874
    EXTERIORRING=875
    EXTRACTVALUE=876
    FIELD=877
    FIND_IN_SET=878
    FLOOR=879
    FORMAT=880
    FOUND_ROWS=881
    FROM_BASE64=882
    FROM_DAYS=883
    FROM_UNIXTIME=884
    GEOMCOLLFROMTEXT=885
    GEOMCOLLFROMWKB=886
    GEOMETRYCOLLECTIONFROMTEXT=887
    GEOMETRYCOLLECTIONFROMWKB=888
    GEOMETRYFROMTEXT=889
    GEOMETRYFROMWKB=890
    GEOMETRYN=891
    GEOMETRYTYPE=892
    GEOMFROMTEXT=893
    GEOMFROMWKB=894
    GET_FORMAT=895
    GET_LOCK=896
    GLENGTH=897
    GREATEST=898
    GTID_SUBSET=899
    GTID_SUBTRACT=900
    HEX=901
    IFNULL=902
    INET6_ATON=903
    INET6_NTOA=904
    INET_ATON=905
    INET_NTOA=906
    INSTR=907
    INTERIORRINGN=908
    INTERSECTS=909
    ISCLOSED=910
    ISEMPTY=911
    ISNULL=912
    ISSIMPLE=913
    IS_FREE_LOCK=914
    IS_IPV4=915
    IS_IPV4_COMPAT=916
    IS_IPV4_MAPPED=917
    IS_IPV6=918
    IS_USED_LOCK=919
    LAST_INSERT_ID=920
    LCASE=921
    LEAST=922
    LENGTH=923
    LINEFROMTEXT=924
    LINEFROMWKB=925
    LINESTRINGFROMTEXT=926
    LINESTRINGFROMWKB=927
    LN=928
    LOAD_FILE=929
    LOCATE=930
    LOG=931
    LOG10=932
    LOG2=933
    LOWER=934
    LPAD=935
    LTRIM=936
    MAKEDATE=937
    MAKETIME=938
    MAKE_SET=939
    MASTER_POS_WAIT=940
    MBRCONTAINS=941
    MBRDISJOINT=942
    MBREQUAL=943
    MBRINTERSECTS=944
    MBROVERLAPS=945
    MBRTOUCHES=946
    MBRWITHIN=947
    MD5=948
    MLINEFROMTEXT=949
    MLINEFROMWKB=950
    MONTHNAME=951
    MPOINTFROMTEXT=952
    MPOINTFROMWKB=953
    MPOLYFROMTEXT=954
    MPOLYFROMWKB=955
    MULTILINESTRINGFROMTEXT=956
    MULTILINESTRINGFROMWKB=957
    MULTIPOINTFROMTEXT=958
    MULTIPOINTFROMWKB=959
    MULTIPOLYGONFROMTEXT=960
    MULTIPOLYGONFROMWKB=961
    NAME_CONST=962
    NULLIF=963
    NUMGEOMETRIES=964
    NUMINTERIORRINGS=965
    NUMPOINTS=966
    OCT=967
    OCTET_LENGTH=968
    ORD=969
    OVERLAPS=970
    PERIOD_ADD=971
    PERIOD_DIFF=972
    PI=973
    POINTFROMTEXT=974
    POINTFROMWKB=975
    POINTN=976
    POLYFROMTEXT=977
    POLYFROMWKB=978
    POLYGONFROMTEXT=979
    POLYGONFROMWKB=980
    POW=981
    POWER=982
    QUOTE=983
    RADIANS=984
    RAND=985
    RANDOM_BYTES=986
    RELEASE_LOCK=987
    REVERSE=988
    ROUND=989
    ROW_COUNT=990
    RPAD=991
    RTRIM=992
    SEC_TO_TIME=993
    SECONDARY_ENGINE_ATTRIBUTE=994
    SESSION_USER=995
    SHA=996
    SHA1=997
    SHA2=998
    SCHEMA_NAME=999
    SIGN=1000
    SIN=1001
    SLEEP=1002
    SOUNDEX=1003
    SQL_THREAD_WAIT_AFTER_GTIDS=1004
    SQRT=1005
    SRID=1006
    STARTPOINT=1007
    STRCMP=1008
    STR_TO_DATE=1009
    ST_AREA=1010
    ST_ASBINARY=1011
    ST_ASTEXT=1012
    ST_ASWKB=1013
    ST_ASWKT=1014
    ST_BUFFER=1015
    ST_CENTROID=1016
    ST_CONTAINS=1017
    ST_CROSSES=1018
    ST_DIFFERENCE=1019
    ST_DIMENSION=1020
    ST_DISJOINT=1021
    ST_DISTANCE=1022
    ST_ENDPOINT=1023
    ST_ENVELOPE=1024
    ST_EQUALS=1025
    ST_EXTERIORRING=1026
    ST_GEOMCOLLFROMTEXT=1027
    ST_GEOMCOLLFROMTXT=1028
    ST_GEOMCOLLFROMWKB=1029
    ST_GEOMETRYCOLLECTIONFROMTEXT=1030
    ST_GEOMETRYCOLLECTIONFROMWKB=1031
    ST_GEOMETRYFROMTEXT=1032
    ST_GEOMETRYFROMWKB=1033
    ST_GEOMETRYN=1034
    ST_GEOMETRYTYPE=1035
    ST_GEOMFROMTEXT=1036
    ST_GEOMFROMWKB=1037
    ST_INTERIORRINGN=1038
    ST_INTERSECTION=1039
    ST_INTERSECTS=1040
    ST_ISCLOSED=1041
    ST_ISEMPTY=1042
    ST_ISSIMPLE=1043
    ST_LINEFROMTEXT=1044
    ST_LINEFROMWKB=1045
    ST_LINESTRINGFROMTEXT=1046
    ST_LINESTRINGFROMWKB=1047
    ST_NUMGEOMETRIES=1048
    ST_NUMINTERIORRING=1049
    ST_NUMINTERIORRINGS=1050
    ST_NUMPOINTS=1051
    ST_OVERLAPS=1052
    ST_POINTFROMTEXT=1053
    ST_POINTFROMWKB=1054
    ST_POINTN=1055
    ST_POLYFROMTEXT=1056
    ST_POLYFROMWKB=1057
    ST_POLYGONFROMTEXT=1058
    ST_POLYGONFROMWKB=1059
    ST_SRID=1060
    ST_STARTPOINT=1061
    ST_SYMDIFFERENCE=1062
    ST_TOUCHES=1063
    ST_UNION=1064
    ST_WITHIN=1065
    ST_X=1066
    ST_Y=1067
    SUBDATE=1068
    SUBSTRING_INDEX=1069
    SUBTIME=1070
    SYSTEM_USER=1071
    TAN=1072
    TIMEDIFF=1073
    TIMESTAMPADD=1074
    TIMESTAMPDIFF=1075
    TIME_FORMAT=1076
    TIME_TO_SEC=1077
    TOUCHES=1078
    TO_BASE64=1079
    TO_DAYS=1080
    TO_SECONDS=1081
    UCASE=1082
    UNCOMPRESS=1083
    UNCOMPRESSED_LENGTH=1084
    UNHEX=1085
    UNIX_TIMESTAMP=1086
    UPDATEXML=1087
    UPPER=1088
    UUID=1089
    UUID_SHORT=1090
    VALIDATE_PASSWORD_STRENGTH=1091
    VERSION=1092
    WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS=1093
    WEEKDAY=1094
    WEEKOFYEAR=1095
    WEIGHT_STRING=1096
    WITHIN=1097
    YEARWEEK=1098
    Y_FUNCTION=1099
    X_FUNCTION=1100
    VAR_ASSIGN=1101
    PLUS_ASSIGN=1102
    MINUS_ASSIGN=1103
    MULT_ASSIGN=1104
    DIV_ASSIGN=1105
    MOD_ASSIGN=1106
    AND_ASSIGN=1107
    XOR_ASSIGN=1108
    OR_ASSIGN=1109
    STAR=1110
    DIVIDE=1111
    MODULE=1112
    PLUS=1113
    MINUS=1114
    DIV=1115
    MOD=1116
    EQUAL_SYMBOL=1117
    GREATER_SYMBOL=1118
    LESS_SYMBOL=1119
    EXCLAMATION_SYMBOL=1120
    BIT_NOT_OP=1121
    BIT_OR_OP=1122
    BIT_AND_OP=1123
    BIT_XOR_OP=1124
    DOT=1125
    LR_BRACKET=1126
    RR_BRACKET=1127
    COMMA=1128
    SEMI=1129
    AT_SIGN=1130
    ZERO_DECIMAL=1131
    ONE_DECIMAL=1132
    TWO_DECIMAL=1133
    SINGLE_QUOTE_SYMB=1134
    DOUBLE_QUOTE_SYMB=1135
    REVERSE_QUOTE_SYMB=1136
    COLON_SYMB=1137
    CHARSET_REVERSE_QOUTE_STRING=1138
    FILESIZE_LITERAL=1139
    START_NATIONAL_STRING_LITERAL=1140
    STRING_LITERAL=1141
    DECIMAL_LITERAL=1142
    HEXADECIMAL_LITERAL=1143
    REAL_LITERAL=1144
    NULL_SPEC_LITERAL=1145
    BIT_STRING=1146
    STRING_CHARSET_NAME=1147
    DOT_ID=1148
    ID=1149
    REVERSE_QUOTE_ID=1150
    STRING_USER_NAME=1151
    IP_ADDRESS=1152
    LOCAL_ID=1153
    GLOBAL_ID=1154
    ERROR_RECONGNIGION=1155

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class RootContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(MySqlParser.EOF, 0)

        def sqlStatements(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementsContext,0)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_root

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoot" ):
                listener.enterRoot(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoot" ):
                listener.exitRoot(self)




    def root(self):

        localctx = MySqlParser.RootContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_root)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 701
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 2308217963004560000) != 0 or (((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 2306124490637066243) != 0 or (((_la - 137)) & ~0x3f) == 0 and ((1 << (_la - 137)) & 184717953909291) != 0 or (((_la - 342)) & ~0x3f) == 0 and ((1 << (_la - 342)) & 36099165796700291) != 0 or (((_la - 430)) & ~0x3f) == 0 and ((1 << (_la - 430)) & 16782337) != 0 or (((_la - 558)) & ~0x3f) == 0 and ((1 << (_la - 558)) & 17730162917377) != 0 or (((_la - 627)) & ~0x3f) == 0 and ((1 << (_la - 627)) & 4503604056555585) != 0 or _la==704 or _la==734 or _la==1126 or _la==1129:
                self.state = 700
                self.sqlStatements()


            self.state = 705
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1114:
                self.state = 703
                self.match(MySqlParser.MINUS)
                self.state = 704
                self.match(MySqlParser.MINUS)


            self.state = 707
            self.match(MySqlParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SqlStatementContext,i)


        def emptyStatement_(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.EmptyStatement_Context)
            else:
                return self.getTypedRuleContext(MySqlParser.EmptyStatement_Context,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatements" ):
                listener.enterSqlStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatements" ):
                listener.exitSqlStatements(self)




    def sqlStatements(self):

        localctx = MySqlParser.SqlStatementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_sqlStatements)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 720
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,5,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 718
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1126]:
                        self.state = 709
                        self.sqlStatement()
                        self.state = 712
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1114:
                            self.state = 710
                            self.match(MySqlParser.MINUS)
                            self.state = 711
                            self.match(MySqlParser.MINUS)


                        self.state = 715
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
                        if la_ == 1:
                            self.state = 714
                            self.match(MySqlParser.SEMI)


                        pass
                    elif token in [1129]:
                        self.state = 717
                        self.emptyStatement_()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 722
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,5,self._ctx)

            self.state = 732
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1126]:
                self.state = 723
                self.sqlStatement()
                self.state = 729
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                if la_ == 1:
                    self.state = 726
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1114:
                        self.state = 724
                        self.match(MySqlParser.MINUS)
                        self.state = 725
                        self.match(MySqlParser.MINUS)


                    self.state = 728
                    self.match(MySqlParser.SEMI)


                pass
            elif token in [1129]:
                self.state = 731
                self.emptyStatement_()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ddlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DdlStatementContext,0)


        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def transactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.TransactionStatementContext,0)


        def replicationStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplicationStatementContext,0)


        def preparedStatement(self):
            return self.getTypedRuleContext(MySqlParser.PreparedStatementContext,0)


        def administrationStatement(self):
            return self.getTypedRuleContext(MySqlParser.AdministrationStatementContext,0)


        def utilityStatement(self):
            return self.getTypedRuleContext(MySqlParser.UtilityStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_sqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlStatement" ):
                listener.enterSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlStatement" ):
                listener.exitSqlStatement(self)




    def sqlStatement(self):

        localctx = MySqlParser.SqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_sqlStatement)
        try:
            self.state = 741
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,9,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 734
                self.ddlStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 735
                self.dmlStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 736
                self.transactionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 737
                self.replicationStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 738
                self.preparedStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 739
                self.administrationStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 740
                self.utilityStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EmptyStatement_Context(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_emptyStatement_

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEmptyStatement_" ):
                listener.enterEmptyStatement_(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEmptyStatement_" ):
                listener.exitEmptyStatement_(self)




    def emptyStatement_(self):

        localctx = MySqlParser.EmptyStatement_Context(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_emptyStatement_)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 743
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DdlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def createDatabase(self):
            return self.getTypedRuleContext(MySqlParser.CreateDatabaseContext,0)


        def createEvent(self):
            return self.getTypedRuleContext(MySqlParser.CreateEventContext,0)


        def createIndex(self):
            return self.getTypedRuleContext(MySqlParser.CreateIndexContext,0)


        def createLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.CreateLogfileGroupContext,0)


        def createProcedure(self):
            return self.getTypedRuleContext(MySqlParser.CreateProcedureContext,0)


        def createFunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateFunctionContext,0)


        def createServer(self):
            return self.getTypedRuleContext(MySqlParser.CreateServerContext,0)


        def createTable(self):
            return self.getTypedRuleContext(MySqlParser.CreateTableContext,0)


        def createTablespaceInnodb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceInnodbContext,0)


        def createTablespaceNdb(self):
            return self.getTypedRuleContext(MySqlParser.CreateTablespaceNdbContext,0)


        def createTrigger(self):
            return self.getTypedRuleContext(MySqlParser.CreateTriggerContext,0)


        def createView(self):
            return self.getTypedRuleContext(MySqlParser.CreateViewContext,0)


        def createRole(self):
            return self.getTypedRuleContext(MySqlParser.CreateRoleContext,0)


        def alterDatabase(self):
            return self.getTypedRuleContext(MySqlParser.AlterDatabaseContext,0)


        def alterEvent(self):
            return self.getTypedRuleContext(MySqlParser.AlterEventContext,0)


        def alterFunction(self):
            return self.getTypedRuleContext(MySqlParser.AlterFunctionContext,0)


        def alterInstance(self):
            return self.getTypedRuleContext(MySqlParser.AlterInstanceContext,0)


        def alterLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.AlterLogfileGroupContext,0)


        def alterProcedure(self):
            return self.getTypedRuleContext(MySqlParser.AlterProcedureContext,0)


        def alterServer(self):
            return self.getTypedRuleContext(MySqlParser.AlterServerContext,0)


        def alterTable(self):
            return self.getTypedRuleContext(MySqlParser.AlterTableContext,0)


        def alterTablespace(self):
            return self.getTypedRuleContext(MySqlParser.AlterTablespaceContext,0)


        def alterView(self):
            return self.getTypedRuleContext(MySqlParser.AlterViewContext,0)


        def dropDatabase(self):
            return self.getTypedRuleContext(MySqlParser.DropDatabaseContext,0)


        def dropEvent(self):
            return self.getTypedRuleContext(MySqlParser.DropEventContext,0)


        def dropIndex(self):
            return self.getTypedRuleContext(MySqlParser.DropIndexContext,0)


        def dropLogfileGroup(self):
            return self.getTypedRuleContext(MySqlParser.DropLogfileGroupContext,0)


        def dropProcedure(self):
            return self.getTypedRuleContext(MySqlParser.DropProcedureContext,0)


        def dropFunction(self):
            return self.getTypedRuleContext(MySqlParser.DropFunctionContext,0)


        def dropServer(self):
            return self.getTypedRuleContext(MySqlParser.DropServerContext,0)


        def dropTable(self):
            return self.getTypedRuleContext(MySqlParser.DropTableContext,0)


        def dropTablespace(self):
            return self.getTypedRuleContext(MySqlParser.DropTablespaceContext,0)


        def dropTrigger(self):
            return self.getTypedRuleContext(MySqlParser.DropTriggerContext,0)


        def dropView(self):
            return self.getTypedRuleContext(MySqlParser.DropViewContext,0)


        def dropRole(self):
            return self.getTypedRuleContext(MySqlParser.DropRoleContext,0)


        def setRole(self):
            return self.getTypedRuleContext(MySqlParser.SetRoleContext,0)


        def renameTable(self):
            return self.getTypedRuleContext(MySqlParser.RenameTableContext,0)


        def truncateTable(self):
            return self.getTypedRuleContext(MySqlParser.TruncateTableContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_ddlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDdlStatement" ):
                listener.enterDdlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDdlStatement" ):
                listener.exitDdlStatement(self)




    def ddlStatement(self):

        localctx = MySqlParser.DdlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_ddlStatement)
        try:
            self.state = 783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 745
                self.createDatabase()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 746
                self.createEvent()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 747
                self.createIndex()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 748
                self.createLogfileGroup()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 749
                self.createProcedure()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 750
                self.createFunction()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 751
                self.createServer()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 752
                self.createTable()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 753
                self.createTablespaceInnodb()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 754
                self.createTablespaceNdb()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 755
                self.createTrigger()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 756
                self.createView()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 757
                self.createRole()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 758
                self.alterDatabase()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 759
                self.alterEvent()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 760
                self.alterFunction()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 761
                self.alterInstance()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 762
                self.alterLogfileGroup()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 763
                self.alterProcedure()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 764
                self.alterServer()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 765
                self.alterTable()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 766
                self.alterTablespace()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 767
                self.alterView()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 768
                self.dropDatabase()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 769
                self.dropEvent()
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 770
                self.dropIndex()
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 771
                self.dropLogfileGroup()
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 772
                self.dropProcedure()
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 773
                self.dropFunction()
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 774
                self.dropServer()
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 775
                self.dropTable()
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 776
                self.dropTablespace()
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 777
                self.dropTrigger()
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 778
                self.dropView()
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 779
                self.dropRole()
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 780
                self.setRole()
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 781
                self.renameTable()
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 782
                self.truncateTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)


        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)


        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)


        def callStatement(self):
            return self.getTypedRuleContext(MySqlParser.CallStatementContext,0)


        def loadDataStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadDataStatementContext,0)


        def loadXmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoadXmlStatementContext,0)


        def doStatement(self):
            return self.getTypedRuleContext(MySqlParser.DoStatementContext,0)


        def handlerStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDmlStatement" ):
                listener.enterDmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDmlStatement" ):
                listener.exitDmlStatement(self)




    def dmlStatement(self):

        localctx = MySqlParser.DmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_dmlStatement)
        try:
            self.state = 795
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,11,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 785
                self.selectStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 786
                self.insertStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 787
                self.updateStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 788
                self.deleteStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 789
                self.replaceStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 790
                self.callStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 791
                self.loadDataStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 792
                self.loadXmlStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 793
                self.doStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 794
                self.handlerStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def startTransaction(self):
            return self.getTypedRuleContext(MySqlParser.StartTransactionContext,0)


        def beginWork(self):
            return self.getTypedRuleContext(MySqlParser.BeginWorkContext,0)


        def commitWork(self):
            return self.getTypedRuleContext(MySqlParser.CommitWorkContext,0)


        def rollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.RollbackWorkContext,0)


        def savepointStatement(self):
            return self.getTypedRuleContext(MySqlParser.SavepointStatementContext,0)


        def rollbackStatement(self):
            return self.getTypedRuleContext(MySqlParser.RollbackStatementContext,0)


        def releaseStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReleaseStatementContext,0)


        def lockTables(self):
            return self.getTypedRuleContext(MySqlParser.LockTablesContext,0)


        def unlockTables(self):
            return self.getTypedRuleContext(MySqlParser.UnlockTablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_transactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionStatement" ):
                listener.enterTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionStatement" ):
                listener.exitTransactionStatement(self)




    def transactionStatement(self):

        localctx = MySqlParser.TransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_transactionStatement)
        try:
            self.state = 806
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 797
                self.startTransaction()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 798
                self.beginWork()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 799
                self.commitWork()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 800
                self.rollbackWork()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 801
                self.savepointStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 802
                self.rollbackStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 803
                self.releaseStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 804
                self.lockTables()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 805
                self.unlockTables()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def changeMaster(self):
            return self.getTypedRuleContext(MySqlParser.ChangeMasterContext,0)


        def changeReplicationFilter(self):
            return self.getTypedRuleContext(MySqlParser.ChangeReplicationFilterContext,0)


        def purgeBinaryLogs(self):
            return self.getTypedRuleContext(MySqlParser.PurgeBinaryLogsContext,0)


        def resetMaster(self):
            return self.getTypedRuleContext(MySqlParser.ResetMasterContext,0)


        def resetSlave(self):
            return self.getTypedRuleContext(MySqlParser.ResetSlaveContext,0)


        def startSlave(self):
            return self.getTypedRuleContext(MySqlParser.StartSlaveContext,0)


        def stopSlave(self):
            return self.getTypedRuleContext(MySqlParser.StopSlaveContext,0)


        def startGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StartGroupReplicationContext,0)


        def stopGroupReplication(self):
            return self.getTypedRuleContext(MySqlParser.StopGroupReplicationContext,0)


        def xaStartTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaStartTransactionContext,0)


        def xaEndTransaction(self):
            return self.getTypedRuleContext(MySqlParser.XaEndTransactionContext,0)


        def xaPrepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.XaPrepareStatementContext,0)


        def xaCommitWork(self):
            return self.getTypedRuleContext(MySqlParser.XaCommitWorkContext,0)


        def xaRollbackWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRollbackWorkContext,0)


        def xaRecoverWork(self):
            return self.getTypedRuleContext(MySqlParser.XaRecoverWorkContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplicationStatement" ):
                listener.enterReplicationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplicationStatement" ):
                listener.exitReplicationStatement(self)




    def replicationStatement(self):

        localctx = MySqlParser.ReplicationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_replicationStatement)
        try:
            self.state = 823
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 808
                self.changeMaster()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 809
                self.changeReplicationFilter()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 810
                self.purgeBinaryLogs()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 811
                self.resetMaster()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 812
                self.resetSlave()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 813
                self.startSlave()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 814
                self.stopSlave()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 815
                self.startGroupReplication()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 816
                self.stopGroupReplication()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 817
                self.xaStartTransaction()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 818
                self.xaEndTransaction()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 819
                self.xaPrepareStatement()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 820
                self.xaCommitWork()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 821
                self.xaRollbackWork()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 822
                self.xaRecoverWork()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PreparedStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def prepareStatement(self):
            return self.getTypedRuleContext(MySqlParser.PrepareStatementContext,0)


        def executeStatement(self):
            return self.getTypedRuleContext(MySqlParser.ExecuteStatementContext,0)


        def deallocatePrepare(self):
            return self.getTypedRuleContext(MySqlParser.DeallocatePrepareContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_preparedStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreparedStatement" ):
                listener.enterPreparedStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreparedStatement" ):
                listener.exitPreparedStatement(self)




    def preparedStatement(self):

        localctx = MySqlParser.PreparedStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_preparedStatement)
        try:
            self.state = 828
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [558]:
                self.enterOuterAlt(localctx, 1)
                self.state = 825
                self.prepareStatement()
                pass
            elif token in [704]:
                self.enterOuterAlt(localctx, 2)
                self.state = 826
                self.executeStatement()
                pass
            elif token in [51, 388]:
                self.enterOuterAlt(localctx, 3)
                self.state = 827
                self.deallocatePrepare()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompoundStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def caseStatement(self):
            return self.getTypedRuleContext(MySqlParser.CaseStatementContext,0)


        def ifStatement(self):
            return self.getTypedRuleContext(MySqlParser.IfStatementContext,0)


        def leaveStatement(self):
            return self.getTypedRuleContext(MySqlParser.LeaveStatementContext,0)


        def loopStatement(self):
            return self.getTypedRuleContext(MySqlParser.LoopStatementContext,0)


        def repeatStatement(self):
            return self.getTypedRuleContext(MySqlParser.RepeatStatementContext,0)


        def whileStatement(self):
            return self.getTypedRuleContext(MySqlParser.WhileStatementContext,0)


        def iterateStatement(self):
            return self.getTypedRuleContext(MySqlParser.IterateStatementContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def cursorStatement(self):
            return self.getTypedRuleContext(MySqlParser.CursorStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_compoundStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCompoundStatement" ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCompoundStatement" ):
                listener.exitCompoundStatement(self)




    def compoundStatement(self):

        localctx = MySqlParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_compoundStatement)
        try:
            self.state = 840
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 830
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 831
                self.caseStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 832
                self.ifStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 833
                self.leaveStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 834
                self.loopStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 835
                self.repeatStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 836
                self.whileStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 837
                self.iterateStatement()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 838
                self.returnStatement()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 839
                self.cursorStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AdministrationStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def alterUser(self):
            return self.getTypedRuleContext(MySqlParser.AlterUserContext,0)


        def createUser(self):
            return self.getTypedRuleContext(MySqlParser.CreateUserContext,0)


        def dropUser(self):
            return self.getTypedRuleContext(MySqlParser.DropUserContext,0)


        def grantStatement(self):
            return self.getTypedRuleContext(MySqlParser.GrantStatementContext,0)


        def grantProxy(self):
            return self.getTypedRuleContext(MySqlParser.GrantProxyContext,0)


        def renameUser(self):
            return self.getTypedRuleContext(MySqlParser.RenameUserContext,0)


        def revokeStatement(self):
            return self.getTypedRuleContext(MySqlParser.RevokeStatementContext,0)


        def revokeProxy(self):
            return self.getTypedRuleContext(MySqlParser.RevokeProxyContext,0)


        def analyzeTable(self):
            return self.getTypedRuleContext(MySqlParser.AnalyzeTableContext,0)


        def checkTable(self):
            return self.getTypedRuleContext(MySqlParser.CheckTableContext,0)


        def checksumTable(self):
            return self.getTypedRuleContext(MySqlParser.ChecksumTableContext,0)


        def optimizeTable(self):
            return self.getTypedRuleContext(MySqlParser.OptimizeTableContext,0)


        def repairTable(self):
            return self.getTypedRuleContext(MySqlParser.RepairTableContext,0)


        def createUdfunction(self):
            return self.getTypedRuleContext(MySqlParser.CreateUdfunctionContext,0)


        def installPlugin(self):
            return self.getTypedRuleContext(MySqlParser.InstallPluginContext,0)


        def uninstallPlugin(self):
            return self.getTypedRuleContext(MySqlParser.UninstallPluginContext,0)


        def setStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetStatementContext,0)


        def showStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShowStatementContext,0)


        def binlogStatement(self):
            return self.getTypedRuleContext(MySqlParser.BinlogStatementContext,0)


        def cacheIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.CacheIndexStatementContext,0)


        def flushStatement(self):
            return self.getTypedRuleContext(MySqlParser.FlushStatementContext,0)


        def killStatement(self):
            return self.getTypedRuleContext(MySqlParser.KillStatementContext,0)


        def loadIndexIntoCache(self):
            return self.getTypedRuleContext(MySqlParser.LoadIndexIntoCacheContext,0)


        def resetStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResetStatementContext,0)


        def shutdownStatement(self):
            return self.getTypedRuleContext(MySqlParser.ShutdownStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_administrationStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAdministrationStatement" ):
                listener.enterAdministrationStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAdministrationStatement" ):
                listener.exitAdministrationStatement(self)




    def administrationStatement(self):

        localctx = MySqlParser.AdministrationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_administrationStatement)
        try:
            self.state = 867
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,16,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 842
                self.alterUser()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 843
                self.createUser()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 844
                self.dropUser()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 845
                self.grantStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 846
                self.grantProxy()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 847
                self.renameUser()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 848
                self.revokeStatement()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 849
                self.revokeProxy()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 850
                self.analyzeTable()
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 851
                self.checkTable()
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 852
                self.checksumTable()
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 853
                self.optimizeTable()
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 854
                self.repairTable()
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 855
                self.createUdfunction()
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 856
                self.installPlugin()
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 857
                self.uninstallPlugin()
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 858
                self.setStatement()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 859
                self.showStatement()
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 860
                self.binlogStatement()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 861
                self.cacheIndexStatement()
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 862
                self.flushStatement()
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 863
                self.killStatement()
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 864
                self.loadIndexIntoCache()
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 865
                self.resetStatement()
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 866
                self.shutdownStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UtilityStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.SimpleDescribeStatementContext,0)


        def fullDescribeStatement(self):
            return self.getTypedRuleContext(MySqlParser.FullDescribeStatementContext,0)


        def helpStatement(self):
            return self.getTypedRuleContext(MySqlParser.HelpStatementContext,0)


        def useStatement(self):
            return self.getTypedRuleContext(MySqlParser.UseStatementContext,0)


        def signalStatement(self):
            return self.getTypedRuleContext(MySqlParser.SignalStatementContext,0)


        def resignalStatement(self):
            return self.getTypedRuleContext(MySqlParser.ResignalStatementContext,0)


        def diagnosticsStatement(self):
            return self.getTypedRuleContext(MySqlParser.DiagnosticsStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_utilityStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUtilityStatement" ):
                listener.enterUtilityStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUtilityStatement" ):
                listener.exitUtilityStatement(self)




    def utilityStatement(self):

        localctx = MySqlParser.UtilityStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_utilityStatement)
        try:
            self.state = 876
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 869
                self.simpleDescribeStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 870
                self.fullDescribeStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 871
                self.helpStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 872
                self.useStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 873
                self.signalStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 874
                self.resignalStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 875
                self.diagnosticsStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabase" ):
                listener.enterCreateDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabase" ):
                listener.exitCreateDatabase(self)




    def createDatabase(self):

        localctx = MySqlParser.CreateDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_createDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 878
            self.match(MySqlParser.CREATE)
            self.state = 879
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==39 or _la==149):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,18,self._ctx)
            if la_ == 1:
                self.state = 880
                self.ifNotExists()


            self.state = 883
            self.uid()
            self.state = 887
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 4398214283264) != 0 or _la==133 or _la==220 or _la==403 or _la==836:
                self.state = 884
                self.createDatabaseOption()
                self.state = 889
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateEvent" ):
                listener.enterCreateEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateEvent" ):
                listener.exitCreateEvent(self)




    def createEvent(self):

        localctx = MySqlParser.CreateEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_createEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 890
            self.match(MySqlParser.CREATE)
            self.state = 892
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 891
                self.ownerStatement()


            self.state = 894
            self.match(MySqlParser.EVENT)
            self.state = 896
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
            if la_ == 1:
                self.state = 895
                self.ifNotExists()


            self.state = 898
            self.fullId()
            self.state = 899
            self.match(MySqlParser.ON)
            self.state = 900
            self.match(MySqlParser.SCHEDULE)
            self.state = 901
            self.scheduleExpression()
            self.state = 908
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 902
                self.match(MySqlParser.ON)
                self.state = 903
                self.match(MySqlParser.COMPLETION)
                self.state = 905
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 904
                    self.match(MySqlParser.NOT)


                self.state = 907
                self.match(MySqlParser.PRESERVE)


            self.state = 911
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==394 or _la==401:
                self.state = 910
                self.enableType()


            self.state = 915
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 913
                self.match(MySqlParser.COMMENT)
                self.state = 914
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 917
            self.match(MySqlParser.DO)
            self.state = 918
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.indexCategory = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)

        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateIndex" ):
                listener.enterCreateIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateIndex" ):
                listener.exitCreateIndex(self)




    def createIndex(self):

        localctx = MySqlParser.CreateIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_createIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 920
            self.match(MySqlParser.CREATE)
            self.state = 922
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529 or _la==535:
                self.state = 921
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==529 or _la==535):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 925
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68 or _la==157 or _la==179:
                self.state = 924
                localctx.indexCategory = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==68 or _la==157 or _la==179):
                    localctx.indexCategory = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 927
            self.match(MySqlParser.INDEX)
            self.state = 928
            self.uid()
            self.state = 930
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==185:
                self.state = 929
                self.indexType()


            self.state = 932
            self.match(MySqlParser.ON)
            self.state = 933
            self.tableName()
            self.state = 934
            self.indexColumnNames()
            self.state = 938
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                self.state = 935
                self.indexOption()
                self.state = 940
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 953
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,33,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 951
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [334]:
                        self.state = 941
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 943
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1117:
                            self.state = 942
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 945
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==42 or _la==382 or _la==452):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [102]:
                        self.state = 946
                        self.match(MySqlParser.LOCK)
                        self.state = 948
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1117:
                            self.state = 947
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 950
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==42 or _la==417 or _la==527 or _la==609):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 955
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,33,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.undoFile = None # Token
            self.initSize = None # FileSizeLiteralContext
            self.undoSize = None # FileSizeLiteralContext
            self.redoSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateLogfileGroup" ):
                listener.enterCreateLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateLogfileGroup" ):
                listener.exitCreateLogfileGroup(self)




    def createLogfileGroup(self):

        localctx = MySqlParser.CreateLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_createLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 956
            self.match(MySqlParser.CREATE)
            self.state = 957
            self.match(MySqlParser.LOGFILE)
            self.state = 958
            self.match(MySqlParser.GROUP)
            self.state = 959
            self.uid()
            self.state = 960
            self.match(MySqlParser.ADD)
            self.state = 961
            self.match(MySqlParser.UNDOFILE)
            self.state = 962
            localctx.undoFile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 968
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==451:
                self.state = 963
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 965
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 964
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 967
                localctx.initSize = self.fileSizeLiteral()


            self.state = 975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==658:
                self.state = 970
                self.match(MySqlParser.UNDO_BUFFER_SIZE)
                self.state = 972
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 971
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 974
                localctx.undoSize = self.fileSizeLiteral()


            self.state = 982
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==570:
                self.state = 977
                self.match(MySqlParser.REDO_BUFFER_SIZE)
                self.state = 979
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 978
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 981
                localctx.redoSize = self.fileSizeLiteral()


            self.state = 989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==526:
                self.state = 984
                self.match(MySqlParser.NODEGROUP)
                self.state = 986
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 985
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 988
                self.uid()


            self.state = 992
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==672:
                self.state = 991
                self.match(MySqlParser.WAIT)


            self.state = 999
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 994
                self.match(MySqlParser.COMMENT)
                self.state = 996
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 995
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 998
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1001
            self.match(MySqlParser.ENGINE)
            self.state = 1003
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1117:
                self.state = 1002
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1005
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def procedureParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateProcedure" ):
                listener.enterCreateProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateProcedure" ):
                listener.exitCreateProcedure(self)




    def createProcedure(self):

        localctx = MySqlParser.CreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_createProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007
            self.match(MySqlParser.CREATE)
            self.state = 1009
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 1008
                self.ownerStatement()


            self.state = 1011
            self.match(MySqlParser.PROCEDURE)
            self.state = 1012
            self.fullId()
            self.state = 1013
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1015
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 151169654698547409) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 1014
                self.procedureParameter()


            self.state = 1021
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 1017
                self.match(MySqlParser.COMMA)
                self.state = 1018
                self.procedureParameter()
                self.state = 1023
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1024
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1028
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,49,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1025
                    self.routineOption() 
                self.state = 1030
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,49,self._ctx)

            self.state = 1031
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def returnStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReturnStatementContext,0)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def functionParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionParameterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionParameterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateFunction" ):
                listener.enterCreateFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateFunction" ):
                listener.exitCreateFunction(self)




    def createFunction(self):

        localctx = MySqlParser.CreateFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_createFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1033
            self.match(MySqlParser.CREATE)
            self.state = 1035
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 1034
                self.ownerStatement()


            self.state = 1038
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==333:
                self.state = 1037
                self.match(MySqlParser.AGGREGATE)


            self.state = 1040
            self.match(MySqlParser.FUNCTION)
            self.state = 1042
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,52,self._ctx)
            if la_ == 1:
                self.state = 1041
                self.ifNotExists()


            self.state = 1044
            self.fullId()
            self.state = 1045
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1047
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 1046
                self.functionParameter()


            self.state = 1053
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 1049
                self.match(MySqlParser.COMMA)
                self.state = 1050
                self.functionParameter()
                self.state = 1055
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1056
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1057
            self.match(MySqlParser.RETURNS)
            self.state = 1058
            self.dataType()
            self.state = 1062
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,55,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1059
                    self.routineOption() 
                self.state = 1064
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,55,self._ctx)

            self.state = 1067
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [7, 9, 14, 18, 20, 24, 26, 29, 33, 35, 37, 39, 42, 44, 45, 46, 48, 51, 55, 58, 61, 70, 71, 72, 76, 78, 84, 92, 93, 96, 101, 102, 116, 118, 120, 123, 129, 131, 137, 138, 140, 142, 146, 147, 149, 151, 152, 154, 155, 166, 180, 182, 184, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1126, 1138, 1141, 1149, 1150]:
                self.state = 1065
                self.routineBody()
                pass
            elif token in [145]:
                self.state = 1066
                self.returnStatement()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateRole" ):
                listener.enterCreateRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateRole" ):
                listener.exitCreateRole(self)




    def createRole(self):

        localctx = MySqlParser.CreateRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_createRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1069
            self.match(MySqlParser.CREATE)
            self.state = 1070
            self.match(MySqlParser.ROLE)
            self.state = 1072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,57,self._ctx)
            if la_ == 1:
                self.state = 1071
                self.ifNotExists()


            self.state = 1074
            self.roleName()
            self.state = 1079
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 1075
                self.match(MySqlParser.COMMA)
                self.state = 1076
                self.roleName()
                self.state = 1081
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.wrapperName = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateServer" ):
                listener.enterCreateServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateServer" ):
                listener.exitCreateServer(self)




    def createServer(self):

        localctx = MySqlParser.CreateServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_createServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1082
            self.match(MySqlParser.CREATE)
            self.state = 1083
            self.match(MySqlParser.SERVER)
            self.state = 1084
            self.uid()
            self.state = 1085
            self.match(MySqlParser.FOREIGN)
            self.state = 1086
            self.match(MySqlParser.DATA)
            self.state = 1087
            self.match(MySqlParser.WRAPPER)
            self.state = 1088
            localctx.wrapperName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==512 or _la==1141):
                localctx.wrapperName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1089
            self.match(MySqlParser.OPTIONS)
            self.state = 1090
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1091
            self.serverOption()
            self.state = 1096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 1092
                self.match(MySqlParser.COMMA)
                self.state = 1093
                self.serverOption()
                self.state = 1098
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1099
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createTable

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CopyCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.parenthesisTable = None # TableNameContext
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCopyCreateTable" ):
                listener.enterCopyCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCopyCreateTable" ):
                listener.exitCopyCreateTable(self)


    class ColumnCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnCreateTable" ):
                listener.enterColumnCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnCreateTable" ):
                listener.exitColumnCreateTable(self)


    class QueryCreateTableContext(CreateTableContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateTableContext
            super().__init__(parser)
            self.keyViolate = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def createDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.CreateDefinitionsContext,0)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)
        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryCreateTable" ):
                listener.enterQueryCreateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryCreateTable" ):
                listener.exitQueryCreateTable(self)



    def createTable(self):

        localctx = MySqlParser.CreateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_createTable)
        self._la = 0 # Token type
        try:
            self.state = 1179
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,78,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CopyCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1101
                self.match(MySqlParser.CREATE)
                self.state = 1103
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 1102
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1105
                self.match(MySqlParser.TABLE)
                self.state = 1107
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,61,self._ctx)
                if la_ == 1:
                    self.state = 1106
                    self.ifNotExists()


                self.state = 1109
                self.tableName()
                self.state = 1117
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [97]:
                    self.state = 1110
                    self.match(MySqlParser.LIKE)
                    self.state = 1111
                    self.tableName()
                    pass
                elif token in [1126]:
                    self.state = 1112
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1113
                    self.match(MySqlParser.LIKE)
                    self.state = 1114
                    localctx.parenthesisTable = self.tableName()
                    self.state = 1115
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.QueryCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1119
                self.match(MySqlParser.CREATE)
                self.state = 1121
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 1120
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1123
                self.match(MySqlParser.TABLE)
                self.state = 1125
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,64,self._ctx)
                if la_ == 1:
                    self.state = 1124
                    self.ifNotExists()


                self.state = 1127
                self.tableName()
                self.state = 1129
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                if la_ == 1:
                    self.state = 1128
                    self.createDefinitions()


                self.state = 1141
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 36028797019095045) != 0 or _la==178 or _la==220 or (((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 4644375904747527) != 0 or (((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & 4612811918334230547) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 2366149022974977) != 0 or (((_la - 600)) & ~0x3f) == 0 and ((1 << (_la - 600)) & 4609173815820289) != 0 or _la==836 or _la==870 or _la==994 or _la==1141:
                    self.state = 1131
                    self.tableOption()
                    self.state = 1138
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while (((_la - 25)) & ~0x3f) == 0 and ((1 << (_la - 25)) & 36028797019095045) != 0 or _la==178 or _la==220 or (((_la - 339)) & ~0x3f) == 0 and ((1 << (_la - 339)) & 4644375904747527) != 0 or (((_la - 403)) & ~0x3f) == 0 and ((1 << (_la - 403)) & 4612811918334230547) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 2366149022974977) != 0 or (((_la - 600)) & ~0x3f) == 0 and ((1 << (_la - 600)) & 4609173815820289) != 0 or _la==836 or _la==870 or _la==994 or _la==1128 or _la==1141:
                        self.state = 1133
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1128:
                            self.state = 1132
                            self.match(MySqlParser.COMMA)


                        self.state = 1135
                        self.tableOption()
                        self.state = 1140
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 1143
                    self.partitionDefinitions()


                self.state = 1147
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==77 or _la==140:
                    self.state = 1146
                    localctx.keyViolate = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==77 or _la==140):
                        localctx.keyViolate = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1150
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 1149
                    self.match(MySqlParser.AS)


                self.state = 1152
                self.selectStatement()
                pass

            elif la_ == 3:
                localctx = MySqlParser.ColumnCreateTableContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1154
                self.match(MySqlParser.CREATE)
                self.state = 1156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==647:
                    self.state = 1155
                    self.match(MySqlParser.TEMPORARY)


                self.state = 1158
                self.match(MySqlParser.TABLE)
                self.state = 1160
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,73,self._ctx)
                if la_ == 1:
                    self.state = 1159
                    self.ifNotExists()


                self.state = 1162
                self.tableName()
                self.state = 1163
                self.createDefinitions()
                self.state = 1174
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
                if la_ == 1:
                    self.state = 1164
                    self.tableOption()
                    self.state = 1171
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,75,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 1166
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==1128:
                                self.state = 1165
                                self.match(MySqlParser.COMMA)


                            self.state = 1168
                            self.tableOption() 
                        self.state = 1173
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,75,self._ctx)



                self.state = 1177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 1176
                    self.partitionDefinitions()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceInnodbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.fileBlockSize = None # FileSizeLiteralContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceInnodb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceInnodb" ):
                listener.enterCreateTablespaceInnodb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceInnodb" ):
                listener.exitCreateTablespaceInnodb(self)




    def createTablespaceInnodb(self):

        localctx = MySqlParser.CreateTablespaceInnodbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_createTablespaceInnodb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1181
            self.match(MySqlParser.CREATE)
            self.state = 1182
            self.match(MySqlParser.TABLESPACE)
            self.state = 1183
            self.uid()
            self.state = 1184
            self.match(MySqlParser.ADD)
            self.state = 1185
            self.match(MySqlParser.DATAFILE)
            self.state = 1186
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==426:
                self.state = 1187
                self.match(MySqlParser.FILE_BLOCK_SIZE)
                self.state = 1188
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1189
                localctx.fileBlockSize = self.fileSizeLiteral()


            self.state = 1197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==407:
                self.state = 1192
                self.match(MySqlParser.ENGINE)
                self.state = 1194
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1193
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1196
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTablespaceNdbContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.datafile = None # Token
            self.extentSize = None # FileSizeLiteralContext
            self.initialSize = None # FileSizeLiteralContext
            self.autoextendSize = None # FileSizeLiteralContext
            self.maxSize = None # FileSizeLiteralContext
            self.comment = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FileSizeLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_createTablespaceNdb

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTablespaceNdb" ):
                listener.enterCreateTablespaceNdb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTablespaceNdb" ):
                listener.exitCreateTablespaceNdb(self)




    def createTablespaceNdb(self):

        localctx = MySqlParser.CreateTablespaceNdbContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_createTablespaceNdb)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1199
            self.match(MySqlParser.CREATE)
            self.state = 1200
            self.match(MySqlParser.TABLESPACE)
            self.state = 1201
            self.uid()
            self.state = 1202
            self.match(MySqlParser.ADD)
            self.state = 1203
            self.match(MySqlParser.DATAFILE)
            self.state = 1204
            localctx.datafile = self.match(MySqlParser.STRING_LITERAL)
            self.state = 1205
            self.match(MySqlParser.USE)
            self.state = 1206
            self.match(MySqlParser.LOGFILE)
            self.state = 1207
            self.match(MySqlParser.GROUP)
            self.state = 1208
            self.uid()
            self.state = 1214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==421:
                self.state = 1209
                self.match(MySqlParser.EXTENT_SIZE)
                self.state = 1211
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1210
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1213
                localctx.extentSize = self.fileSizeLiteral()


            self.state = 1221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==451:
                self.state = 1216
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 1218
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1217
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1220
                localctx.initialSize = self.fileSizeLiteral()


            self.state = 1228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==339:
                self.state = 1223
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1225
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1224
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1227
                localctx.autoextendSize = self.fileSizeLiteral()


            self.state = 1235
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==499:
                self.state = 1230
                self.match(MySqlParser.MAX_SIZE)
                self.state = 1232
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1231
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1234
                localctx.maxSize = self.fileSizeLiteral()


            self.state = 1242
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==526:
                self.state = 1237
                self.match(MySqlParser.NODEGROUP)
                self.state = 1239
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1238
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1241
                self.uid()


            self.state = 1245
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==672:
                self.state = 1244
                self.match(MySqlParser.WAIT)


            self.state = 1252
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 1247
                self.match(MySqlParser.COMMENT)
                self.state = 1249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1248
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1251
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)


            self.state = 1254
            self.match(MySqlParser.ENGINE)
            self.state = 1256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1117:
                self.state = 1255
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 1258
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.thisTrigger = None # FullIdContext
            self.triggerTime = None # Token
            self.triggerEvent = None # Token
            self.triggerPlace = None # Token
            self.otherTrigger = None # FullIdContext

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EACH(self):
            return self.getToken(MySqlParser.EACH, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateTrigger" ):
                listener.enterCreateTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateTrigger" ):
                listener.exitCreateTrigger(self)




    def createTrigger(self):

        localctx = MySqlParser.CreateTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_createTrigger)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1260
            self.match(MySqlParser.CREATE)
            self.state = 1262
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 1261
                self.ownerStatement()


            self.state = 1264
            self.match(MySqlParser.TRIGGER)
            self.state = 1265
            localctx.thisTrigger = self.fullId()
            self.state = 1266
            localctx.triggerTime = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==15 or _la==332):
                localctx.triggerTime = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1267
            localctx.triggerEvent = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==44 or _la==84 or _la==182):
                localctx.triggerEvent = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 1268
            self.match(MySqlParser.ON)
            self.state = 1269
            self.tableName()
            self.state = 1270
            self.match(MySqlParser.FOR)
            self.state = 1271
            self.match(MySqlParser.EACH)
            self.state = 1272
            self.match(MySqlParser.ROW)
            self.state = 1275
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,97,self._ctx)
            if la_ == 1:
                self.state = 1273
                localctx.triggerPlace = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==432 or _la==556):
                    localctx.triggerPlace = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1274
                localctx.otherTrigger = self.fullId()


            self.state = 1277
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WithClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def commonTableExpressions(self):
            return self.getTypedRuleContext(MySqlParser.CommonTableExpressionsContext,0)


        def RECURSIVE(self):
            return self.getToken(MySqlParser.RECURSIVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_withClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithClause" ):
                listener.enterWithClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithClause" ):
                listener.exitWithClause(self)




    def withClause(self):

        localctx = MySqlParser.WithClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_withClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1279
            self.match(MySqlParser.WITH)
            self.state = 1281
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 1280
                self.match(MySqlParser.RECURSIVE)


            self.state = 1283
            self.commonTableExpressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommonTableExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def cteName(self):
            return self.getTypedRuleContext(MySqlParser.CteNameContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def dmlStatement(self):
            return self.getTypedRuleContext(MySqlParser.DmlStatementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def cteColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CteColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CteColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def commonTableExpressions(self):
            return self.getTypedRuleContext(MySqlParser.CommonTableExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_commonTableExpressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommonTableExpressions" ):
                listener.enterCommonTableExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommonTableExpressions" ):
                listener.exitCommonTableExpressions(self)




    def commonTableExpressions(self):

        localctx = MySqlParser.CommonTableExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_commonTableExpressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1285
            self.cteName()
            self.state = 1297
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1126:
                self.state = 1286
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1287
                self.cteColumnName()
                self.state = 1292
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 1288
                    self.match(MySqlParser.COMMA)
                    self.state = 1289
                    self.cteColumnName()
                    self.state = 1294
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1295
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1299
            self.match(MySqlParser.AS)
            self.state = 1300
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1301
            self.dmlStatement()
            self.state = 1302
            self.match(MySqlParser.RR_BRACKET)
            self.state = 1305
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1128:
                self.state = 1303
                self.match(MySqlParser.COMMA)
                self.state = 1304
                self.commonTableExpressions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_cteName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteName" ):
                listener.enterCteName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteName" ):
                listener.exitCteName(self)




    def cteName(self):

        localctx = MySqlParser.CteNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_cteName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1307
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CteColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_cteColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCteColumnName" ):
                listener.enterCteColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCteColumnName" ):
                listener.exitCteColumnName(self)




    def cteColumnName(self):

        localctx = MySqlParser.CteColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_cteColumnName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1309
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOption = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def orReplace(self):
            return self.getTypedRuleContext(MySqlParser.OrReplaceContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def withClause(self):
            return self.getTypedRuleContext(MySqlParser.WithClauseContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateView" ):
                listener.enterCreateView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateView" ):
                listener.exitCreateView(self)




    def createView(self):

        localctx = MySqlParser.CreateViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_createView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1311
            self.match(MySqlParser.CREATE)
            self.state = 1313
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==122:
                self.state = 1312
                self.orReplace()


            self.state = 1318
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==334:
                self.state = 1315
                self.match(MySqlParser.ALGORITHM)
                self.state = 1316
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1317
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==504 or _la==648 or _la==656):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1321
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 1320
                self.ownerStatement()


            self.state = 1326
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 1323
                self.match(MySqlParser.SQL)
                self.state = 1324
                self.match(MySqlParser.SECURITY)
                self.state = 1325
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==390 or _la==458):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1328
            self.match(MySqlParser.VIEW)
            self.state = 1329
            self.fullId()
            self.state = 1334
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1126:
                self.state = 1330
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1331
                self.uidList()
                self.state = 1332
                self.match(MySqlParser.RR_BRACKET)


            self.state = 1336
            self.match(MySqlParser.AS)
            self.state = 1356
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,111,self._ctx)
            if la_ == 1:
                self.state = 1337
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1339
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 1338
                    self.withClause()


                self.state = 1341
                self.selectStatement()
                self.state = 1342
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.state = 1345
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 1344
                    self.withClause()


                self.state = 1347
                self.selectStatement()
                self.state = 1354
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 1348
                    self.match(MySqlParser.WITH)
                    self.state = 1350
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==350 or _la==472:
                        self.state = 1349
                        localctx.checkOption = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==350 or _la==472):
                            localctx.checkOption = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 1352
                    self.match(MySqlParser.CHECK)
                    self.state = 1353
                    self.match(MySqlParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDatabaseOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_createDatabaseOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDatabaseOption" ):
                listener.enterCreateDatabaseOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDatabaseOption" ):
                listener.exitCreateDatabaseOption(self)




    def createDatabaseOption(self):

        localctx = MySqlParser.CreateDatabaseOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_createDatabaseOption)
        self._la = 0 # Token type
        try:
            self.state = 1391
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,120,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1359
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 1358
                    self.match(MySqlParser.DEFAULT)


                self.state = 1361
                self.charSet()
                self.state = 1363
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1362
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1367
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1138, 1141]:
                    self.state = 1365
                    self.charsetName()
                    pass
                elif token in [42]:
                    self.state = 1366
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 1369
                    self.match(MySqlParser.DEFAULT)


                self.state = 1372
                self.match(MySqlParser.COLLATE)
                self.state = 1374
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1373
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1376
                self.collationName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 1377
                    self.match(MySqlParser.DEFAULT)


                self.state = 1380
                self.match(MySqlParser.ENCRYPTION)
                self.state = 1382
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1381
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1384
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1385
                self.match(MySqlParser.READ)
                self.state = 1386
                self.match(MySqlParser.ONLY)
                self.state = 1388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1387
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1390
                _la = self._input.LA(1)
                if not(_la==42 or _la==1131 or _la==1132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharSet" ):
                listener.enterCharSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharSet" ):
                listener.exitCharSet(self)




    def charSet(self):

        localctx = MySqlParser.CharSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_charSet)
        try:
            self.state = 1398
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1393
                self.match(MySqlParser.CHARACTER)
                self.state = 1394
                self.match(MySqlParser.SET)
                pass
            elif token in [836]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1395
                self.match(MySqlParser.CHARSET)
                pass
            elif token in [220]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1396
                self.match(MySqlParser.CHAR)
                self.state = 1397
                self.match(MySqlParser.SET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OwnerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ownerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOwnerStatement" ):
                listener.enterOwnerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOwnerStatement" ):
                listener.exitOwnerStatement(self)




    def ownerStatement(self):

        localctx = MySqlParser.OwnerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_ownerStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1400
            self.match(MySqlParser.DEFINER)
            self.state = 1401
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 1408
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.state = 1402
                self.userName()
                pass

            elif la_ == 2:
                self.state = 1403
                self.match(MySqlParser.CURRENT_USER)
                self.state = 1406
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 1404
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 1405
                    self.match(MySqlParser.RR_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScheduleExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_scheduleExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PreciseScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)
        def timestampValue(self):
            return self.getTypedRuleContext(MySqlParser.TimestampValueContext,0)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPreciseSchedule" ):
                listener.enterPreciseSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPreciseSchedule" ):
                listener.exitPreciseSchedule(self)


    class IntervalScheduleContext(ScheduleExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ScheduleExpressionContext
            super().__init__(parser)
            self.startTimestamp = None # TimestampValueContext
            self._intervalExpr = None # IntervalExprContext
            self.startIntervals = list() # of IntervalExprContexts
            self.endTimestamp = None # TimestampValueContext
            self.endIntervals = list() # of IntervalExprContexts
            self.copyFrom(ctx)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)
        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)
        def timestampValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TimestampValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TimestampValueContext,i)

        def intervalExpr(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IntervalExprContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IntervalExprContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalSchedule" ):
                listener.enterIntervalSchedule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalSchedule" ):
                listener.exitIntervalSchedule(self)



    def scheduleExpression(self):

        localctx = MySqlParser.ScheduleExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_scheduleExpression)
        self._la = 0 # Token type
        try:
            self.state = 1444
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [336]:
                localctx = MySqlParser.PreciseScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1410
                self.match(MySqlParser.AT)
                self.state = 1411
                self.timestampValue()
                self.state = 1415
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1113:
                    self.state = 1412
                    self.intervalExpr()
                    self.state = 1417
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [415]:
                localctx = MySqlParser.IntervalScheduleContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1418
                self.match(MySqlParser.EVERY)
                self.state = 1421
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1419
                    self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 1420
                    self.expression(0)
                    pass


                self.state = 1423
                self.intervalType()
                self.state = 1432
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==628:
                    self.state = 1424
                    self.match(MySqlParser.STARTS)
                    self.state = 1425
                    localctx.startTimestamp = self.timestampValue()
                    self.state = 1429
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1113:
                        self.state = 1426
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.startIntervals.append(localctx._intervalExpr)
                        self.state = 1431
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1442
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==406:
                    self.state = 1434
                    self.match(MySqlParser.ENDS)
                    self.state = 1435
                    localctx.endTimestamp = self.timestampValue()
                    self.state = 1439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1113:
                        self.state = 1436
                        localctx._intervalExpr = self.intervalExpr()
                        localctx.endIntervals.append(localctx._intervalExpr)
                        self.state = 1441
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TimestampValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_timestampValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTimestampValue" ):
                listener.enterTimestampValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTimestampValue" ):
                listener.exitTimestampValue(self)




    def timestampValue(self):

        localctx = MySqlParser.TimestampValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_timestampValue)
        try:
            self.state = 1450
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,131,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1446
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1447
                self.stringLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1448
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1449
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalExprContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_intervalExpr

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpr" ):
                listener.enterIntervalExpr(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpr" ):
                listener.exitIntervalExpr(self)




    def intervalExpr(self):

        localctx = MySqlParser.IntervalExprContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_intervalExpr)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1452
            self.match(MySqlParser.PLUS)
            self.state = 1453
            self.match(MySqlParser.INTERVAL)
            self.state = 1456
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.state = 1454
                self.decimalLiteral()
                pass

            elif la_ == 2:
                self.state = 1455
                self.expression(0)
                pass


            self.state = 1458
            self.intervalType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEAR_MONTH(self):
            return self.getToken(MySqlParser.YEAR_MONTH, 0)

        def DAY_HOUR(self):
            return self.getToken(MySqlParser.DAY_HOUR, 0)

        def DAY_MINUTE(self):
            return self.getToken(MySqlParser.DAY_MINUTE, 0)

        def DAY_SECOND(self):
            return self.getToken(MySqlParser.DAY_SECOND, 0)

        def HOUR_MINUTE(self):
            return self.getToken(MySqlParser.HOUR_MINUTE, 0)

        def HOUR_SECOND(self):
            return self.getToken(MySqlParser.HOUR_SECOND, 0)

        def MINUTE_SECOND(self):
            return self.getToken(MySqlParser.MINUTE_SECOND, 0)

        def SECOND_MICROSECOND(self):
            return self.getToken(MySqlParser.SECOND_MICROSECOND, 0)

        def MINUTE_MICROSECOND(self):
            return self.getToken(MySqlParser.MINUTE_MICROSECOND, 0)

        def HOUR_MICROSECOND(self):
            return self.getToken(MySqlParser.HOUR_MICROSECOND, 0)

        def DAY_MICROSECOND(self):
            return self.getToken(MySqlParser.DAY_MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalType" ):
                listener.enterIntervalType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalType" ):
                listener.exitIntervalType(self)




    def intervalType(self):

        localctx = MySqlParser.IntervalTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_intervalType)
        try:
            self.state = 1473
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [687, 688, 689, 690, 691, 692, 693, 694]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1460
                self.intervalTypeBase()
                pass
            elif token in [219]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1461
                self.match(MySqlParser.YEAR)
                pass
            elif token in [238]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1462
                self.match(MySqlParser.YEAR_MONTH)
                pass
            elif token in [239]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1463
                self.match(MySqlParser.DAY_HOUR)
                pass
            elif token in [240]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1464
                self.match(MySqlParser.DAY_MINUTE)
                pass
            elif token in [241]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1465
                self.match(MySqlParser.DAY_SECOND)
                pass
            elif token in [242]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1466
                self.match(MySqlParser.HOUR_MINUTE)
                pass
            elif token in [243]:
                self.enterOuterAlt(localctx, 8)
                self.state = 1467
                self.match(MySqlParser.HOUR_SECOND)
                pass
            elif token in [244]:
                self.enterOuterAlt(localctx, 9)
                self.state = 1468
                self.match(MySqlParser.MINUTE_SECOND)
                pass
            elif token in [245]:
                self.enterOuterAlt(localctx, 10)
                self.state = 1469
                self.match(MySqlParser.SECOND_MICROSECOND)
                pass
            elif token in [246]:
                self.enterOuterAlt(localctx, 11)
                self.state = 1470
                self.match(MySqlParser.MINUTE_MICROSECOND)
                pass
            elif token in [247]:
                self.enterOuterAlt(localctx, 12)
                self.state = 1471
                self.match(MySqlParser.HOUR_MICROSECOND)
                pass
            elif token in [248]:
                self.enterOuterAlt(localctx, 13)
                self.state = 1472
                self.match(MySqlParser.DAY_MICROSECOND)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EnableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_enableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEnableType" ):
                listener.enterEnableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEnableType" ):
                listener.exitEnableType(self)




    def enableType(self):

        localctx = MySqlParser.EnableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_enableType)
        try:
            self.state = 1480
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1475
                self.match(MySqlParser.ENABLE)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1476
                self.match(MySqlParser.DISABLE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1477
                self.match(MySqlParser.DISABLE)
                self.state = 1478
                self.match(MySqlParser.ON)
                self.state = 1479
                self.match(MySqlParser.SLAVE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexType" ):
                listener.enterIndexType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexType" ):
                listener.exitIndexType(self)




    def indexType(self):

        localctx = MySqlParser.IndexTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_indexType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1482
            self.match(MySqlParser.USING)
            self.state = 1483
            _la = self._input.LA(1)
            if not(_la==348 or _la==441):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)


        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexOption" ):
                listener.enterIndexOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexOption" ):
                listener.exitIndexOption(self)




    def indexOption(self):

        localctx = MySqlParser.IndexOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_indexOption)
        self._la = 0 # Token type
        try:
            self.state = 1507
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [465]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1485
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1487
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1486
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1489
                self.fileSizeLiteral()
                pass
            elif token in [185]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1490
                self.indexType()
                pass
            elif token in [190]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1491
                self.match(MySqlParser.WITH)
                self.state = 1492
                self.match(MySqlParser.PARSER)
                self.state = 1493
                self.uid()
                pass
            elif token in [366]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1494
                self.match(MySqlParser.COMMENT)
                self.state = 1495
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [457, 671]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1496
                _la = self._input.LA(1)
                if not(_la==457 or _la==671):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [870]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1497
                self.match(MySqlParser.ENGINE_ATTRIBUTE)
                self.state = 1499
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1498
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1501
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [994]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1502
                self.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE)
                self.state = 1504
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1503
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1506
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.direction = None # Token

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def OUT(self):
            return self.getToken(MySqlParser.OUT, 0)

        def INOUT(self):
            return self.getToken(MySqlParser.INOUT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_procedureParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureParameter" ):
                listener.enterProcedureParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureParameter" ):
                listener.exitProcedureParameter(self)




    def procedureParameter(self):

        localctx = MySqlParser.ProcedureParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_procedureParameter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1510
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 35184372088849) != 0:
                self.state = 1509
                localctx.direction = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 35184372088849) != 0):
                    localctx.direction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1512
            self.uid()
            self.state = 1513
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionParameter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionParameter" ):
                listener.enterFunctionParameter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionParameter" ):
                listener.exitFunctionParameter(self)




    def functionParameter(self):

        localctx = MySqlParser.FunctionParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_functionParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1515
            self.uid()
            self.state = 1516
            self.dataType()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_routineOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class RoutineBehaviorContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DETERMINISTIC(self):
            return self.getToken(MySqlParser.DETERMINISTIC, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBehavior" ):
                listener.enterRoutineBehavior(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBehavior" ):
                listener.exitRoutineBehavior(self)


    class RoutineLanguageContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineLanguage" ):
                listener.enterRoutineLanguage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineLanguage" ):
                listener.exitRoutineLanguage(self)


    class RoutineCommentContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineComment" ):
                listener.enterRoutineComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineComment" ):
                listener.exitRoutineComment(self)


    class RoutineSecurityContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.context = None # Token
            self.copyFrom(ctx)

        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)
        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)
        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineSecurity" ):
                listener.enterRoutineSecurity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineSecurity" ):
                listener.exitRoutineSecurity(self)


    class RoutineDataContext(RoutineOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RoutineOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)
        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def READS(self):
            return self.getToken(MySqlParser.READS, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def MODIFIES(self):
            return self.getToken(MySqlParser.MODIFIES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineData" ):
                listener.enterRoutineData(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineData" ):
                listener.exitRoutineData(self)



    def routineOption(self):

        localctx = MySqlParser.RoutineOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_routineOption)
        self._la = 0 # Token type
        try:
            self.state = 1541
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [366]:
                localctx = MySqlParser.RoutineCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1518
                self.match(MySqlParser.COMMENT)
                self.state = 1519
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [466]:
                localctx = MySqlParser.RoutineLanguageContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1520
                self.match(MySqlParser.LANGUAGE)
                self.state = 1521
                self.match(MySqlParser.SQL)
                pass
            elif token in [47, 113]:
                localctx = MySqlParser.RoutineBehaviorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1523
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 1522
                    self.match(MySqlParser.NOT)


                self.state = 1525
                self.match(MySqlParser.DETERMINISTIC)
                pass
            elif token in [111, 134, 379, 519]:
                localctx = MySqlParser.RoutineDataContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1536
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [379]:
                    self.state = 1526
                    self.match(MySqlParser.CONTAINS)
                    self.state = 1527
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [519]:
                    self.state = 1528
                    self.match(MySqlParser.NO)
                    self.state = 1529
                    self.match(MySqlParser.SQL)
                    pass
                elif token in [134]:
                    self.state = 1530
                    self.match(MySqlParser.READS)
                    self.state = 1531
                    self.match(MySqlParser.SQL)
                    self.state = 1532
                    self.match(MySqlParser.DATA)
                    pass
                elif token in [111]:
                    self.state = 1533
                    self.match(MySqlParser.MODIFIES)
                    self.state = 1534
                    self.match(MySqlParser.SQL)
                    self.state = 1535
                    self.match(MySqlParser.DATA)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [158]:
                localctx = MySqlParser.RoutineSecurityContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1538
                self.match(MySqlParser.SQL)
                self.state = 1539
                self.match(MySqlParser.SECURITY)
                self.state = 1540
                localctx.context = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==390 or _la==458):
                    localctx.context = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ServerOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_serverOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterServerOption" ):
                listener.enterServerOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitServerOption" ):
                listener.exitServerOption(self)




    def serverOption(self):

        localctx = MySqlParser.ServerOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_serverOption)
        try:
            self.state = 1557
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [444]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1543
                self.match(MySqlParser.HOST)
                self.state = 1544
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1545
                self.match(MySqlParser.DATABASE)
                self.state = 1546
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [663]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1547
                self.match(MySqlParser.USER)
                self.state = 1548
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [549]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1549
                self.match(MySqlParser.PASSWORD)
                self.state = 1550
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [615]:
                self.enterOuterAlt(localctx, 5)
                self.state = 1551
                self.match(MySqlParser.SOCKET)
                self.state = 1552
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [540]:
                self.enterOuterAlt(localctx, 6)
                self.state = 1553
                self.match(MySqlParser.OWNER)
                self.state = 1554
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [555]:
                self.enterOuterAlt(localctx, 7)
                self.state = 1555
                self.match(MySqlParser.PORT)
                self.state = 1556
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateDefinitions" ):
                listener.enterCreateDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateDefinitions" ):
                listener.exitCreateDefinitions(self)




    def createDefinitions(self):

        localctx = MySqlParser.CreateDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_createDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1559
            self.match(MySqlParser.LR_BRACKET)
            self.state = 1560
            self.createDefinition()
            self.state = 1565
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 1561
                self.match(MySqlParser.COMMA)
                self.state = 1562
                self.createDefinition()
                self.state = 1567
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 1568
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ColumnDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDeclaration" ):
                listener.enterColumnDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDeclaration" ):
                listener.exitColumnDeclaration(self)


    class ConstraintDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableConstraint(self):
            return self.getTypedRuleContext(MySqlParser.TableConstraintContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstraintDeclaration" ):
                listener.enterConstraintDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstraintDeclaration" ):
                listener.exitConstraintDeclaration(self)


    class IndexDeclarationContext(CreateDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def indexColumnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexDeclaration" ):
                listener.enterIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexDeclaration" ):
                listener.exitIndexDeclaration(self)



    def createDefinition(self):

        localctx = MySqlParser.CreateDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_createDefinition)
        try:
            self.state = 1575
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,145,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ColumnDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1570
                self.fullColumnName()
                self.state = 1571
                self.columnDefinition()
                pass

            elif la_ == 2:
                localctx = MySqlParser.ConstraintDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1573
                self.tableConstraint()
                pass

            elif la_ == 3:
                localctx = MySqlParser.IndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1574
                self.indexColumnDefinition()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def columnConstraint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnConstraintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnConstraintContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_columnDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterColumnDefinition" ):
                listener.enterColumnDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitColumnDefinition" ):
                listener.exitColumnDefinition(self)




    def columnDefinition(self):

        localctx = MySqlParser.ColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_columnDefinition)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1577
            self.dataType()
            self.state = 1581
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,146,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1578
                    self.columnConstraint() 
                self.state = 1583
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,146,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ColumnConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_columnConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class StorageColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.storageval = None # Token
            self.copyFrom(ctx)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)
        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStorageColumnConstraint" ):
                listener.enterStorageColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStorageColumnConstraint" ):
                listener.exitStorageColumnConstraint(self)


    class VisibilityColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVisibilityColumnConstraint" ):
                listener.enterVisibilityColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVisibilityColumnConstraint" ):
                listener.exitVisibilityColumnConstraint(self)


    class AutoIncrementColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)
        def currentTimestamp(self):
            return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAutoIncrementColumnConstraint" ):
                listener.enterAutoIncrementColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAutoIncrementColumnConstraint" ):
                listener.exitAutoIncrementColumnConstraint(self)


    class CommentColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommentColumnConstraint" ):
                listener.enterCommentColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommentColumnConstraint" ):
                listener.exitCommentColumnConstraint(self)


    class UniqueKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyColumnConstraint" ):
                listener.enterUniqueKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyColumnConstraint" ):
                listener.exitUniqueKeyColumnConstraint(self)


    class SerialDefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSerialDefaultColumnConstraint" ):
                listener.enterSerialDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSerialDefaultColumnConstraint" ):
                listener.exitSerialDefaultColumnConstraint(self)


    class GeneratedColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def GENERATED(self):
            return self.getToken(MySqlParser.GENERATED, 0)
        def ALWAYS(self):
            return self.getToken(MySqlParser.ALWAYS, 0)
        def VIRTUAL(self):
            return self.getToken(MySqlParser.VIRTUAL, 0)
        def STORED(self):
            return self.getToken(MySqlParser.STORED, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGeneratedColumnConstraint" ):
                listener.enterGeneratedColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGeneratedColumnConstraint" ):
                listener.exitGeneratedColumnConstraint(self)


    class FormatColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.colformat = None # Token
            self.copyFrom(ctx)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFormatColumnConstraint" ):
                listener.enterFormatColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFormatColumnConstraint" ):
                listener.exitFormatColumnConstraint(self)


    class CollateColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateColumnConstraint" ):
                listener.enterCollateColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateColumnConstraint" ):
                listener.exitCollateColumnConstraint(self)


    class PrimaryKeyColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyColumnConstraint" ):
                listener.enterPrimaryKeyColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyColumnConstraint" ):
                listener.exitPrimaryKeyColumnConstraint(self)


    class CheckColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckColumnConstraint" ):
                listener.enterCheckColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckColumnConstraint" ):
                listener.exitCheckColumnConstraint(self)


    class NullColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullColumnConstraint" ):
                listener.enterNullColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullColumnConstraint" ):
                listener.exitNullColumnConstraint(self)


    class DefaultColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultColumnConstraint" ):
                listener.enterDefaultColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultColumnConstraint" ):
                listener.exitDefaultColumnConstraint(self)


    class ReferenceColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceColumnConstraint" ):
                listener.enterReferenceColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceColumnConstraint" ):
                listener.exitReferenceColumnConstraint(self)


    class InvisibilityColumnConstraintContext(ColumnConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ColumnConstraintContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInvisibilityColumnConstraint" ):
                listener.enterInvisibilityColumnConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInvisibilityColumnConstraint" ):
                listener.exitInvisibilityColumnConstraint(self)



    def columnConstraint(self):

        localctx = MySqlParser.ColumnConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_columnConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1637
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [113, 115, 1145]:
                localctx = MySqlParser.NullColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1584
                self.nullNotnull()
                pass
            elif token in [42]:
                localctx = MySqlParser.DefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1585
                self.match(MySqlParser.DEFAULT)
                self.state = 1586
                self.defaultValue()
                pass
            elif token in [671]:
                localctx = MySqlParser.VisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1587
                self.match(MySqlParser.VISIBLE)
                pass
            elif token in [457]:
                localctx = MySqlParser.InvisibilityColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1588
                self.match(MySqlParser.INVISIBLE)
                pass
            elif token in [117, 340]:
                localctx = MySqlParser.AutoIncrementColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1593
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [340]:
                    self.state = 1589
                    self.match(MySqlParser.AUTO_INCREMENT)
                    pass
                elif token in [117]:
                    self.state = 1590
                    self.match(MySqlParser.ON)
                    self.state = 1591
                    self.match(MySqlParser.UPDATE)
                    self.state = 1592
                    self.currentTimestamp()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [90, 129]:
                localctx = MySqlParser.PrimaryKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1596
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==129:
                    self.state = 1595
                    self.match(MySqlParser.PRIMARY)


                self.state = 1598
                self.match(MySqlParser.KEY)
                pass
            elif token in [179]:
                localctx = MySqlParser.UniqueKeyColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1599
                self.match(MySqlParser.UNIQUE)
                self.state = 1601
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,149,self._ctx)
                if la_ == 1:
                    self.state = 1600
                    self.match(MySqlParser.KEY)


                pass
            elif token in [366]:
                localctx = MySqlParser.CommentColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1603
                self.match(MySqlParser.COMMENT)
                self.state = 1604
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [364]:
                localctx = MySqlParser.FormatColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1605
                self.match(MySqlParser.COLUMN_FORMAT)
                self.state = 1606
                localctx.colformat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==400 or _la==429):
                    localctx.colformat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [634]:
                localctx = MySqlParser.StorageColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1607
                self.match(MySqlParser.STORAGE)
                self.state = 1608
                localctx.storageval = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==396 or _la==787):
                    localctx.storageval = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [135]:
                localctx = MySqlParser.ReferenceColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1609
                self.referenceDefinition()
                pass
            elif token in [27]:
                localctx = MySqlParser.CollateColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1610
                self.match(MySqlParser.COLLATE)
                self.state = 1611
                self.collationName()
                pass
            elif token in [12, 69]:
                localctx = MySqlParser.GeneratedColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1614
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==69:
                    self.state = 1612
                    self.match(MySqlParser.GENERATED)
                    self.state = 1613
                    self.match(MySqlParser.ALWAYS)


                self.state = 1616
                self.match(MySqlParser.AS)
                self.state = 1617
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1618
                self.expression(0)
                self.state = 1619
                self.match(MySqlParser.RR_BRACKET)
                self.state = 1621
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==635 or _la==670:
                    self.state = 1620
                    _la = self._input.LA(1)
                    if not(_la==635 or _la==670):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass
            elif token in [237]:
                localctx = MySqlParser.SerialDefaultColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1623
                self.match(MySqlParser.SERIAL)
                self.state = 1624
                self.match(MySqlParser.DEFAULT)
                self.state = 1625
                self.match(MySqlParser.VALUE)
                pass
            elif token in [26, 30]:
                localctx = MySqlParser.CheckColumnConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1630
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1626
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 1627
                        localctx.name = self.uid()




                self.state = 1632
                self.match(MySqlParser.CHECK)
                self.state = 1633
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1634
                self.expression(0)
                self.state = 1635
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableConstraintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableConstraint

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UniqueKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.index = None # UidContext
            self.copyFrom(ctx)

        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUniqueKeyTableConstraint" ):
                listener.enterUniqueKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUniqueKeyTableConstraint" ):
                listener.exitUniqueKeyTableConstraint(self)


    class CheckTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableConstraint" ):
                listener.enterCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableConstraint" ):
                listener.exitCheckTableConstraint(self)


    class PrimaryKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrimaryKeyTableConstraint" ):
                listener.enterPrimaryKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrimaryKeyTableConstraint" ):
                listener.exitPrimaryKeyTableConstraint(self)


    class ForeignKeyTableConstraintContext(TableConstraintContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableConstraintContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterForeignKeyTableConstraint" ):
                listener.enterForeignKeyTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitForeignKeyTableConstraint" ):
                listener.exitForeignKeyTableConstraint(self)



    def tableConstraint(self):

        localctx = MySqlParser.TableConstraintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_tableConstraint)
        self._la = 0 # Token type
        try:
            self.state = 1708
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,171,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PrimaryKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1643
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1639
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1641
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,155,self._ctx)
                    if la_ == 1:
                        self.state = 1640
                        localctx.name = self.uid()




                self.state = 1645
                self.match(MySqlParser.PRIMARY)
                self.state = 1646
                self.match(MySqlParser.KEY)
                self.state = 1648
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 1647
                    localctx.index = self.uid()


                self.state = 1651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 1650
                    self.indexType()


                self.state = 1653
                self.indexColumnNames()
                self.state = 1657
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 1654
                    self.indexOption()
                    self.state = 1659
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.UniqueKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1660
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1662
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 1661
                        localctx.name = self.uid()




                self.state = 1666
                self.match(MySqlParser.UNIQUE)
                self.state = 1668
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 1667
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 1670
                    localctx.index = self.uid()


                self.state = 1674
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 1673
                    self.indexType()


                self.state = 1676
                self.indexColumnNames()
                self.state = 1680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 1677
                    self.indexOption()
                    self.state = 1682
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.ForeignKeyTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1687
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1683
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1685
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 1684
                        localctx.name = self.uid()




                self.state = 1689
                self.match(MySqlParser.FOREIGN)
                self.state = 1690
                self.match(MySqlParser.KEY)
                self.state = 1692
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 1691
                    localctx.index = self.uid()


                self.state = 1694
                self.indexColumnNames()
                self.state = 1695
                self.referenceDefinition()
                pass

            elif la_ == 4:
                localctx = MySqlParser.CheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1701
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 1697
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 1699
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 1698
                        localctx.name = self.uid()




                self.state = 1703
                self.match(MySqlParser.CHECK)
                self.state = 1704
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1705
                self.expression(0)
                self.state = 1706
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.matchType = None # Token

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)


        def MATCH(self):
            return self.getToken(MySqlParser.MATCH, 0)

        def referenceAction(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceActionContext,0)


        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceDefinition" ):
                listener.enterReferenceDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceDefinition" ):
                listener.exitReferenceDefinition(self)




    def referenceDefinition(self):

        localctx = MySqlParser.ReferenceDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_referenceDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1710
            self.match(MySqlParser.REFERENCES)
            self.state = 1711
            self.tableName()
            self.state = 1713
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,172,self._ctx)
            if la_ == 1:
                self.state = 1712
                self.indexColumnNames()


            self.state = 1717
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==108:
                self.state = 1715
                self.match(MySqlParser.MATCH)
                self.state = 1716
                localctx.matchType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==434 or _la==546 or _la==611):
                    localctx.matchType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 1720
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,174,self._ctx)
            if la_ == 1:
                self.state = 1719
                self.referenceAction()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onDelete = None # ReferenceControlTypeContext
            self.onUpdate = None # ReferenceControlTypeContext

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def referenceControlType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReferenceControlTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReferenceControlTypeContext,i)


        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceAction" ):
                listener.enterReferenceAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceAction" ):
                listener.exitReferenceAction(self)




    def referenceAction(self):

        localctx = MySqlParser.ReferenceActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_referenceAction)
        try:
            self.state = 1738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,177,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1722
                self.match(MySqlParser.ON)
                self.state = 1723
                self.match(MySqlParser.DELETE)
                self.state = 1724
                localctx.onDelete = self.referenceControlType()
                self.state = 1728
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,175,self._ctx)
                if la_ == 1:
                    self.state = 1725
                    self.match(MySqlParser.ON)
                    self.state = 1726
                    self.match(MySqlParser.UPDATE)
                    self.state = 1727
                    localctx.onUpdate = self.referenceControlType()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1730
                self.match(MySqlParser.ON)
                self.state = 1731
                self.match(MySqlParser.UPDATE)
                self.state = 1732
                localctx.onUpdate = self.referenceControlType()
                self.state = 1736
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,176,self._ctx)
                if la_ == 1:
                    self.state = 1733
                    self.match(MySqlParser.ON)
                    self.state = 1734
                    self.match(MySqlParser.DELETE)
                    self.state = 1735
                    localctx.onDelete = self.referenceControlType()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReferenceControlTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_referenceControlType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReferenceControlType" ):
                listener.enterReferenceControlType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReferenceControlType" ):
                listener.exitReferenceControlType(self)




    def referenceControlType(self):

        localctx = MySqlParser.ReferenceControlTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_referenceControlType)
        try:
            self.state = 1746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [143]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1740
                self.match(MySqlParser.RESTRICT)
                pass
            elif token in [21]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1741
                self.match(MySqlParser.CASCADE)
                pass
            elif token in [152]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1742
                self.match(MySqlParser.SET)
                self.state = 1743
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [519]:
                self.enterOuterAlt(localctx, 4)
                self.state = 1744
                self.match(MySqlParser.NO)
                self.state = 1745
                self.match(MySqlParser.ACTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecialIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecialIndexDeclaration" ):
                listener.enterSpecialIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecialIndexDeclaration" ):
                listener.exitSpecialIndexDeclaration(self)


    class SimpleIndexDeclarationContext(IndexColumnDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.IndexColumnDefinitionContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleIndexDeclaration" ):
                listener.enterSimpleIndexDeclaration(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleIndexDeclaration" ):
                listener.exitSimpleIndexDeclaration(self)



    def indexColumnDefinition(self):

        localctx = MySqlParser.IndexColumnDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_indexColumnDefinition)
        self._la = 0 # Token type
        try:
            self.state = 1776
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [80, 90]:
                localctx = MySqlParser.SimpleIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1748
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==80 or _la==90):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1750
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 1749
                    self.uid()


                self.state = 1753
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 1752
                    self.indexType()


                self.state = 1755
                self.indexColumnNames()
                self.state = 1759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 1756
                    self.indexOption()
                    self.state = 1761
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [68, 157]:
                localctx = MySqlParser.SpecialIndexDeclarationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1762
                _la = self._input.LA(1)
                if not(_la==68 or _la==157):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1764
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 1763
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 1767
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 1766
                    self.uid()


                self.state = 1769
                self.indexColumnNames()
                self.state = 1773
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 1770
                    self.indexOption()
                    self.state = 1775
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableOptionEngineContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngine" ):
                listener.enterTableOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngine" ):
                listener.exitTableOptionEngine(self)


    class TableOptionMaxRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMaxRows" ):
                listener.enterTableOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMaxRows" ):
                listener.exitTableOptionMaxRows(self)


    class TableOptionCollateContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCollate" ):
                listener.enterTableOptionCollate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCollate" ):
                listener.exitTableOptionCollate(self)


    class TableOptionPersistentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPersistent" ):
                listener.enterTableOptionPersistent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPersistent" ):
                listener.exitTableOptionPersistent(self)


    class TableOptionTablespaceContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def tablespaceStorage(self):
            return self.getTypedRuleContext(MySqlParser.TablespaceStorageContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTablespace" ):
                listener.enterTableOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTablespace" ):
                listener.exitTableOptionTablespace(self)


    class TableOptionAutoextendSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoextendSize" ):
                listener.enterTableOptionAutoextendSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoextendSize" ):
                listener.exitTableOptionAutoextendSize(self)


    class TableOptionPageCompressedContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PAGE_COMPRESSED(self):
            return self.getToken(MySqlParser.PAGE_COMPRESSED, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPageCompressed" ):
                listener.enterTableOptionPageCompressed(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPageCompressed" ):
                listener.exitTableOptionPageCompressed(self)


    class TableOptionStartTransactionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def START(self):
            return self.getToken(MySqlParser.START, 0)
        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionStartTransaction" ):
                listener.enterTableOptionStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionStartTransaction" ):
                listener.exitTableOptionStartTransaction(self)


    class TableOptionPackKeysContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPackKeys" ):
                listener.enterTableOptionPackKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPackKeys" ):
                listener.exitTableOptionPackKeys(self)


    class TableOptionPasswordContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPassword" ):
                listener.enterTableOptionPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPassword" ):
                listener.exitTableOptionPassword(self)


    class TableOptionUnionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionUnion" ):
                listener.enterTableOptionUnion(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionUnion" ):
                listener.exitTableOptionUnion(self)


    class TableOptionSamplePageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSamplePage" ):
                listener.enterTableOptionSamplePage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSamplePage" ):
                listener.exitTableOptionSamplePage(self)


    class TableOptionCharsetContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCharset" ):
                listener.enterTableOptionCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCharset" ):
                listener.exitTableOptionCharset(self)


    class TableOptionIndexDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionIndexDirectory" ):
                listener.enterTableOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionIndexDirectory" ):
                listener.exitTableOptionIndexDirectory(self)


    class TableOptionTableTypeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE_TYPE(self):
            return self.getToken(MySqlParser.TABLE_TYPE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def tableType(self):
            return self.getTypedRuleContext(MySqlParser.TableTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTableType" ):
                listener.enterTableOptionTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTableType" ):
                listener.exitTableOptionTableType(self)


    class TableOptionKeyBlockSizeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)
        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionKeyBlockSize" ):
                listener.enterTableOptionKeyBlockSize(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionKeyBlockSize" ):
                listener.exitTableOptionKeyBlockSize(self)


    class TableOptionEncryptionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryption" ):
                listener.enterTableOptionEncryption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryption" ):
                listener.exitTableOptionEncryption(self)


    class TableOptionDataDirectoryContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDataDirectory" ):
                listener.enterTableOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDataDirectory" ):
                listener.exitTableOptionDataDirectory(self)


    class TableOptionRecalculationContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.extBoolValue = None # Token
            self.copyFrom(ctx)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRecalculation" ):
                listener.enterTableOptionRecalculation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRecalculation" ):
                listener.exitTableOptionRecalculation(self)


    class TableOptionAutoIncrementContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAutoIncrement" ):
                listener.enterTableOptionAutoIncrement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAutoIncrement" ):
                listener.exitTableOptionAutoIncrement(self)


    class TableOptionEncryptionKeyIdContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENCRYPTION_KEY_ID(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ID, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEncryptionKeyId" ):
                listener.enterTableOptionEncryptionKeyId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEncryptionKeyId" ):
                listener.exitTableOptionEncryptionKeyId(self)


    class TableOptionChecksumContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)
        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionChecksum" ):
                listener.enterTableOptionChecksum(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionChecksum" ):
                listener.exitTableOptionChecksum(self)


    class TableOptionDelayContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.boolValue = None # Token
            self.copyFrom(ctx)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionDelay" ):
                listener.enterTableOptionDelay(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionDelay" ):
                listener.exitTableOptionDelay(self)


    class TableOptionConnectionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionConnection" ):
                listener.enterTableOptionConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionConnection" ):
                listener.exitTableOptionConnection(self)


    class TableOptionTransactionalContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRANSACTIONAL(self):
            return self.getToken(MySqlParser.TRANSACTIONAL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionTransactional" ):
                listener.enterTableOptionTransactional(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionTransactional" ):
                listener.exitTableOptionTransactional(self)


    class TableOptionPageCompressionLevelContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def PAGE_COMPRESSION_LEVEL(self):
            return self.getToken(MySqlParser.PAGE_COMPRESSION_LEVEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionPageCompressionLevel" ):
                listener.enterTableOptionPageCompressionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionPageCompressionLevel" ):
                listener.exitTableOptionPageCompressionLevel(self)


    class TableOptionSecondaryEngineAttributeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionSecondaryEngineAttribute" ):
                listener.enterTableOptionSecondaryEngineAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionSecondaryEngineAttribute" ):
                listener.exitTableOptionSecondaryEngineAttribute(self)


    class TableOptionCommentContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionComment" ):
                listener.enterTableOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionComment" ):
                listener.exitTableOptionComment(self)


    class TableOptionAverageContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionAverage" ):
                listener.enterTableOptionAverage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionAverage" ):
                listener.exitTableOptionAverage(self)


    class TableOptionRowFormatContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.rowFormat = None # Token
            self.copyFrom(ctx)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)
        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)
        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionRowFormat" ):
                listener.enterTableOptionRowFormat(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionRowFormat" ):
                listener.exitTableOptionRowFormat(self)


    class TableOptionCompressionContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ID(self):
            return self.getToken(MySqlParser.ID, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionCompression" ):
                listener.enterTableOptionCompression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionCompression" ):
                listener.exitTableOptionCompression(self)


    class TableOptionInsertMethodContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.insertMethod = None # Token
            self.copyFrom(ctx)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)
        def NO(self):
            return self.getToken(MySqlParser.NO, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionInsertMethod" ):
                listener.enterTableOptionInsertMethod(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionInsertMethod" ):
                listener.exitTableOptionInsertMethod(self)


    class TableOptionEngineAttributeContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionEngineAttribute" ):
                listener.enterTableOptionEngineAttribute(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionEngineAttribute" ):
                listener.exitTableOptionEngineAttribute(self)


    class TableOptionMinRowsContext(TableOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableOptionMinRows" ):
                listener.enterTableOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableOptionMinRows" ):
                listener.exitTableOptionMinRows(self)



    def tableOption(self):

        localctx = MySqlParser.TableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_tableOption)
        self._la = 0 # Token type
        try:
            self.state = 1963
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,223,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 1778
                self.match(MySqlParser.ENGINE)
                self.state = 1780
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1779
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1783
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,187,self._ctx)
                if la_ == 1:
                    self.state = 1782
                    self.engineName()


                pass

            elif la_ == 2:
                localctx = MySqlParser.TableOptionEngineAttributeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 1785
                self.match(MySqlParser.ENGINE_ATTRIBUTE)
                self.state = 1787
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1786
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1789
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableOptionAutoextendSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 1790
                self.match(MySqlParser.AUTOEXTEND_SIZE)
                self.state = 1792
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1791
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1794
                self.decimalLiteral()
                pass

            elif la_ == 4:
                localctx = MySqlParser.TableOptionAutoIncrementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 1795
                self.match(MySqlParser.AUTO_INCREMENT)
                self.state = 1797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1796
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1799
                self.decimalLiteral()
                pass

            elif la_ == 5:
                localctx = MySqlParser.TableOptionAverageContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 1800
                self.match(MySqlParser.AVG_ROW_LENGTH)
                self.state = 1802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1801
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1804
                self.decimalLiteral()
                pass

            elif la_ == 6:
                localctx = MySqlParser.TableOptionCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 1806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 1805
                    self.match(MySqlParser.DEFAULT)


                self.state = 1808
                self.charSet()
                self.state = 1810
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1809
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1814
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1138, 1141]:
                    self.state = 1812
                    self.charsetName()
                    pass
                elif token in [42]:
                    self.state = 1813
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 7:
                localctx = MySqlParser.TableOptionChecksumContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 1816
                _la = self._input.LA(1)
                if not(_la==354 or _la==355):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1818
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1817
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1820
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1131 or _la==1132):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 8:
                localctx = MySqlParser.TableOptionCollateContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 1822
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 1821
                    self.match(MySqlParser.DEFAULT)


                self.state = 1824
                self.match(MySqlParser.COLLATE)
                self.state = 1826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1825
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1828
                self.collationName()
                pass

            elif la_ == 9:
                localctx = MySqlParser.TableOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 1829
                self.match(MySqlParser.COMMENT)
                self.state = 1831
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1830
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1833
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 10:
                localctx = MySqlParser.TableOptionCompressionContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 1834
                self.match(MySqlParser.COMPRESSION)
                self.state = 1836
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1835
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1838
                _la = self._input.LA(1)
                if not(_la==1141 or _la==1149):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.TableOptionConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 1839
                self.match(MySqlParser.CONNECTION)
                self.state = 1841
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1840
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1843
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TableOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 1844
                _la = self._input.LA(1)
                if not(_la==80 or _la==386):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1845
                self.match(MySqlParser.DIRECTORY)
                self.state = 1847
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1846
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1849
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 13:
                localctx = MySqlParser.TableOptionDelayContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 1850
                self.match(MySqlParser.DELAY_KEY_WRITE)
                self.state = 1852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1851
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1854
                localctx.boolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1131 or _la==1132):
                    localctx.boolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 14:
                localctx = MySqlParser.TableOptionEncryptionContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 1855
                self.match(MySqlParser.ENCRYPTION)
                self.state = 1857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1856
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1859
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 15:
                localctx = MySqlParser.TableOptionPageCompressedContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 1860
                _la = self._input.LA(1)
                if not(_la==543 or _la==1141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1862
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1861
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1864
                _la = self._input.LA(1)
                if not(_la==1131 or _la==1132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 16:
                localctx = MySqlParser.TableOptionPageCompressionLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 1865
                _la = self._input.LA(1)
                if not(_la==544 or _la==1141):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 1867
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1866
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1869
                self.decimalLiteral()
                pass

            elif la_ == 17:
                localctx = MySqlParser.TableOptionEncryptionKeyIdContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 1870
                self.match(MySqlParser.ENCRYPTION_KEY_ID)
                self.state = 1872
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1871
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1874
                self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.TableOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 1875
                self.match(MySqlParser.INDEX)
                self.state = 1876
                self.match(MySqlParser.DIRECTORY)
                self.state = 1878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1877
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1880
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 19:
                localctx = MySqlParser.TableOptionInsertMethodContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 1881
                self.match(MySqlParser.INSERT_METHOD)
                self.state = 1883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1882
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1885
                localctx.insertMethod = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==428 or _la==467 or _la==519):
                    localctx.insertMethod = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                localctx = MySqlParser.TableOptionKeyBlockSizeContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 1886
                self.match(MySqlParser.KEY_BLOCK_SIZE)
                self.state = 1888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1887
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1890
                self.fileSizeLiteral()
                pass

            elif la_ == 21:
                localctx = MySqlParser.TableOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 1891
                self.match(MySqlParser.MAX_ROWS)
                self.state = 1893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1892
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1895
                self.decimalLiteral()
                pass

            elif la_ == 22:
                localctx = MySqlParser.TableOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 1896
                self.match(MySqlParser.MIN_ROWS)
                self.state = 1898
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1897
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1900
                self.decimalLiteral()
                pass

            elif la_ == 23:
                localctx = MySqlParser.TableOptionPackKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 1901
                self.match(MySqlParser.PACK_KEYS)
                self.state = 1903
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1902
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1905
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==1131 or _la==1132):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 24:
                localctx = MySqlParser.TableOptionPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 1906
                self.match(MySqlParser.PASSWORD)
                self.state = 1908
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1907
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1910
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 25:
                localctx = MySqlParser.TableOptionRowFormatContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 1911
                self.match(MySqlParser.ROW_FORMAT)
                self.state = 1913
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1912
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1915
                localctx.rowFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or (((_la - 368)) & ~0x3f) == 0 and ((1 << (_la - 368)) & 2305843013508661253) != 0 or _la==571 or _la==1149):
                    localctx.rowFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 26:
                localctx = MySqlParser.TableOptionStartTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 1916
                self.match(MySqlParser.START)
                self.state = 1917
                self.match(MySqlParser.TRANSACTION)
                pass

            elif la_ == 27:
                localctx = MySqlParser.TableOptionSecondaryEngineAttributeContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 1918
                self.match(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE)
                self.state = 1920
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1919
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1922
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 28:
                localctx = MySqlParser.TableOptionRecalculationContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 1923
                self.match(MySqlParser.STATS_AUTO_RECALC)
                self.state = 1925
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1924
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1927
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==1131 or _la==1132):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 29:
                localctx = MySqlParser.TableOptionPersistentContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 1928
                self.match(MySqlParser.STATS_PERSISTENT)
                self.state = 1930
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1929
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1932
                localctx.extBoolValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==1131 or _la==1132):
                    localctx.extBoolValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 30:
                localctx = MySqlParser.TableOptionSamplePageContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 1933
                self.match(MySqlParser.STATS_SAMPLE_PAGES)
                self.state = 1935
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1934
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1939
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 1937
                    self.match(MySqlParser.DEFAULT)
                    pass
                elif token in [1131, 1132, 1133, 1142, 1144]:
                    self.state = 1938
                    self.decimalLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 31:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 1941
                self.match(MySqlParser.TABLESPACE)
                self.state = 1942
                self.uid()
                self.state = 1944
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,220,self._ctx)
                if la_ == 1:
                    self.state = 1943
                    self.tablespaceStorage()


                pass

            elif la_ == 32:
                localctx = MySqlParser.TableOptionTableTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 1946
                self.match(MySqlParser.TABLE_TYPE)
                self.state = 1947
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 1948
                self.tableType()
                pass

            elif la_ == 33:
                localctx = MySqlParser.TableOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 1949
                self.tablespaceStorage()
                pass

            elif la_ == 34:
                localctx = MySqlParser.TableOptionTransactionalContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 1950
                self.match(MySqlParser.TRANSACTIONAL)
                self.state = 1952
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1951
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1954
                _la = self._input.LA(1)
                if not(_la==1131 or _la==1132):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 35:
                localctx = MySqlParser.TableOptionUnionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 1955
                self.match(MySqlParser.UNION)
                self.state = 1957
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 1956
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 1959
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1960
                self.tables()
                self.state = 1961
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableType" ):
                listener.enterTableType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableType" ):
                listener.exitTableType(self)




    def tableType(self):

        localctx = MySqlParser.TableTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_tableType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1965
            _la = self._input.LA(1)
            if not(_la==512 or _la==528):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablespaceStorageContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tablespaceStorage

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablespaceStorage" ):
                listener.enterTablespaceStorage(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablespaceStorage" ):
                listener.exitTablespaceStorage(self)




    def tablespaceStorage(self):

        localctx = MySqlParser.TablespaceStorageContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_tablespaceStorage)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1967
            self.match(MySqlParser.STORAGE)
            self.state = 1968
            _la = self._input.LA(1)
            if not(_la==42 or _la==396 or _la==787):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.count = None # DecimalLiteralContext
            self.subCount = None # DecimalLiteralContext

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BY)
            else:
                return self.getToken(MySqlParser.BY, i)

        def partitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.PartitionFunctionDefinitionContext,0)


        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def subpartitionFunctionDefinition(self):
            return self.getTypedRuleContext(MySqlParser.SubpartitionFunctionDefinitionContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinitions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinitions" ):
                listener.enterPartitionDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinitions" ):
                listener.exitPartitionDefinitions(self)




    def partitionDefinitions(self):

        localctx = MySqlParser.PartitionDefinitionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_partitionDefinitions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1970
            self.match(MySqlParser.PARTITION)
            self.state = 1971
            self.match(MySqlParser.BY)
            self.state = 1972
            self.partitionFunctionDefinition()
            self.state = 1975
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==548:
                self.state = 1973
                self.match(MySqlParser.PARTITIONS)
                self.state = 1974
                localctx.count = self.decimalLiteral()


            self.state = 1984
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==639:
                self.state = 1977
                self.match(MySqlParser.SUBPARTITION)
                self.state = 1978
                self.match(MySqlParser.BY)
                self.state = 1979
                self.subpartitionFunctionDefinition()
                self.state = 1982
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==640:
                    self.state = 1980
                    self.match(MySqlParser.SUBPARTITIONS)
                    self.state = 1981
                    localctx.subCount = self.decimalLiteral()




            self.state = 1997
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,228,self._ctx)
            if la_ == 1:
                self.state = 1986
                self.match(MySqlParser.LR_BRACKET)
                self.state = 1987
                self.partitionDefinition()
                self.state = 1992
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 1988
                    self.match(MySqlParser.COMMA)
                    self.state = 1989
                    self.partitionDefinition()
                    self.state = 1994
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1995
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionFunctionKeyContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionKey" ):
                listener.enterPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionKey" ):
                listener.exitPartitionFunctionKey(self)


    class PartitionFunctionHashContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionHash" ):
                listener.enterPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionHash" ):
                listener.exitPartitionFunctionHash(self)


    class PartitionFunctionListContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionList" ):
                listener.enterPartitionFunctionList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionList" ):
                listener.exitPartitionFunctionList(self)


    class PartitionFunctionRangeContext(PartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionFunctionRange" ):
                listener.enterPartitionFunctionRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionFunctionRange" ):
                listener.exitPartitionFunctionRange(self)



    def partitionFunctionDefinition(self):

        localctx = MySqlParser.PartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_partitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2044
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,234,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2000
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 1999
                    self.match(MySqlParser.LINEAR)


                self.state = 2002
                self.match(MySqlParser.HASH)
                self.state = 2003
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2004
                self.expression(0)
                self.state = 2005
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 2007
                    self.match(MySqlParser.LINEAR)


                self.state = 2010
                self.match(MySqlParser.KEY)
                self.state = 2014
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==334:
                    self.state = 2011
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 2012
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2013
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==1132 or _la==1133):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2016
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2017
                self.uidList()
                self.state = 2018
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionFunctionRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2020
                self.match(MySqlParser.RANGE)
                self.state = 2030
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1126]:
                    self.state = 2021
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2022
                    self.expression(0)
                    self.state = 2023
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [363]:
                    self.state = 2025
                    self.match(MySqlParser.COLUMNS)
                    self.state = 2026
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2027
                    self.uidList()
                    self.state = 2028
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionFunctionListContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2032
                self.match(MySqlParser.LIST)
                self.state = 2042
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1126]:
                    self.state = 2033
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2034
                    self.expression(0)
                    self.state = 2035
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                elif token in [363]:
                    self.state = 2037
                    self.match(MySqlParser.COLUMNS)
                    self.state = 2038
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2039
                    self.uidList()
                    self.state = 2040
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionFunctionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionFunctionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubPartitionFunctionHashContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionHash" ):
                listener.enterSubPartitionFunctionHash(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionHash" ):
                listener.exitSubPartitionFunctionHash(self)


    class SubPartitionFunctionKeyContext(SubpartitionFunctionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SubpartitionFunctionDefinitionContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def LINEAR(self):
            return self.getToken(MySqlParser.LINEAR, 0)
        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)
        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubPartitionFunctionKey" ):
                listener.enterSubPartitionFunctionKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubPartitionFunctionKey" ):
                listener.exitSubPartitionFunctionKey(self)



    def subpartitionFunctionDefinition(self):

        localctx = MySqlParser.SubpartitionFunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 114, self.RULE_subpartitionFunctionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2067
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,238,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SubPartitionFunctionHashContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2047
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 2046
                    self.match(MySqlParser.LINEAR)


                self.state = 2049
                self.match(MySqlParser.HASH)
                self.state = 2050
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2051
                self.expression(0)
                self.state = 2052
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SubPartitionFunctionKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2055
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==99:
                    self.state = 2054
                    self.match(MySqlParser.LINEAR)


                self.state = 2057
                self.match(MySqlParser.KEY)
                self.state = 2061
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==334:
                    self.state = 2058
                    self.match(MySqlParser.ALGORITHM)
                    self.state = 2059
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2060
                    localctx.algType = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==1132 or _la==1133):
                        localctx.algType = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2063
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2064
                self.uidList()
                self.state = 2065
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinition

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionComparisonContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)
        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionComparison" ):
                listener.enterPartitionComparison(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionComparison" ):
                listener.exitPartitionComparison(self)


    class PartitionListAtomContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListAtom" ):
                listener.enterPartitionListAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListAtom" ):
                listener.exitPartitionListAtom(self)


    class PartitionListVectorContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def partitionDefinerVector(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerVectorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerVectorContext,i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionListVector" ):
                listener.enterPartitionListVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionListVector" ):
                listener.exitPartitionListVector(self)


    class PartitionSimpleContext(PartitionDefinitionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionDefinitionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def subpartitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SubpartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SubpartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionSimple" ):
                listener.enterPartitionSimple(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionSimple" ):
                listener.exitPartitionSimple(self)



    def partitionDefinition(self):

        localctx = MySqlParser.PartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_partitionDefinition)
        self._la = 0 # Token type
        try:
            self.state = 2215
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,257,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2069
                self.match(MySqlParser.PARTITION)
                self.state = 2070
                self.uid()
                self.state = 2071
                self.match(MySqlParser.VALUES)
                self.state = 2072
                self.match(MySqlParser.LESS)
                self.state = 2073
                self.match(MySqlParser.THAN)
                self.state = 2074
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2075
                self.partitionDefinerAtom()
                self.state = 2080
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2076
                    self.match(MySqlParser.COMMA)
                    self.state = 2077
                    self.partitionDefinerAtom()
                    self.state = 2082
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2083
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2087
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                    self.state = 2084
                    self.partitionOption()
                    self.state = 2089
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2101
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 2090
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2091
                    self.subpartitionDefinition()
                    self.state = 2096
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2092
                        self.match(MySqlParser.COMMA)
                        self.state = 2093
                        self.subpartitionDefinition()
                        self.state = 2098
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2099
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.PartitionComparisonContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2103
                self.match(MySqlParser.PARTITION)
                self.state = 2104
                self.uid()
                self.state = 2105
                self.match(MySqlParser.VALUES)
                self.state = 2106
                self.match(MySqlParser.LESS)
                self.state = 2107
                self.match(MySqlParser.THAN)
                self.state = 2108
                self.partitionDefinerAtom()
                self.state = 2112
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                    self.state = 2109
                    self.partitionOption()
                    self.state = 2114
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2126
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 2115
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2116
                    self.subpartitionDefinition()
                    self.state = 2121
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2117
                        self.match(MySqlParser.COMMA)
                        self.state = 2118
                        self.subpartitionDefinition()
                        self.state = 2123
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2124
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 3:
                localctx = MySqlParser.PartitionListAtomContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2128
                self.match(MySqlParser.PARTITION)
                self.state = 2129
                self.uid()
                self.state = 2130
                self.match(MySqlParser.VALUES)
                self.state = 2131
                self.match(MySqlParser.IN)
                self.state = 2132
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2133
                self.partitionDefinerAtom()
                self.state = 2138
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2134
                    self.match(MySqlParser.COMMA)
                    self.state = 2135
                    self.partitionDefinerAtom()
                    self.state = 2140
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2141
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                    self.state = 2142
                    self.partitionOption()
                    self.state = 2147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2159
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 2148
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2149
                    self.subpartitionDefinition()
                    self.state = 2154
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2150
                        self.match(MySqlParser.COMMA)
                        self.state = 2151
                        self.subpartitionDefinition()
                        self.state = 2156
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2157
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 4:
                localctx = MySqlParser.PartitionListVectorContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2161
                self.match(MySqlParser.PARTITION)
                self.state = 2162
                self.uid()
                self.state = 2163
                self.match(MySqlParser.VALUES)
                self.state = 2164
                self.match(MySqlParser.IN)
                self.state = 2165
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2166
                self.partitionDefinerVector()
                self.state = 2171
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2167
                    self.match(MySqlParser.COMMA)
                    self.state = 2168
                    self.partitionDefinerVector()
                    self.state = 2173
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2174
                self.match(MySqlParser.RR_BRACKET)
                self.state = 2178
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                    self.state = 2175
                    self.partitionOption()
                    self.state = 2180
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2192
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 2181
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2182
                    self.subpartitionDefinition()
                    self.state = 2187
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2183
                        self.match(MySqlParser.COMMA)
                        self.state = 2184
                        self.subpartitionDefinition()
                        self.state = 2189
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2190
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 5:
                localctx = MySqlParser.PartitionSimpleContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2194
                self.match(MySqlParser.PARTITION)
                self.state = 2195
                self.uid()
                self.state = 2199
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                    self.state = 2196
                    self.partitionOption()
                    self.state = 2201
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2213
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 2202
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 2203
                    self.subpartitionDefinition()
                    self.state = 2208
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2204
                        self.match(MySqlParser.COMMA)
                        self.state = 2205
                        self.subpartitionDefinition()
                        self.state = 2210
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    self.state = 2211
                    self.match(MySqlParser.RR_BRACKET)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def MAXVALUE(self):
            return self.getToken(MySqlParser.MAXVALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerAtom" ):
                listener.enterPartitionDefinerAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerAtom" ):
                listener.exitPartitionDefinerAtom(self)




    def partitionDefinerAtom(self):

        localctx = MySqlParser.PartitionDefinerAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_partitionDefinerAtom)
        try:
            self.state = 2220
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,258,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2217
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 2218
                self.expression(0)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 2219
                self.match(MySqlParser.MAXVALUE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionDefinerVectorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def partitionDefinerAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinerAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinerAtomContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionDefinerVector

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionDefinerVector" ):
                listener.enterPartitionDefinerVector(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionDefinerVector" ):
                listener.exitPartitionDefinerVector(self)




    def partitionDefinerVector(self):

        localctx = MySqlParser.PartitionDefinerVectorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_partitionDefinerVector)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2222
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2223
            self.partitionDefinerAtom()
            self.state = 2226 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 2224
                self.match(MySqlParser.COMMA)
                self.state = 2225
                self.partitionDefinerAtom()
                self.state = 2228 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1128):
                    break

            self.state = 2230
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SubpartitionDefinitionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def partitionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_subpartitionDefinition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubpartitionDefinition" ):
                listener.enterSubpartitionDefinition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubpartitionDefinition" ):
                listener.exitSubpartitionDefinition(self)




    def subpartitionDefinition(self):

        localctx = MySqlParser.SubpartitionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_subpartitionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2232
            self.match(MySqlParser.SUBPARTITION)
            self.state = 2233
            self.uid()
            self.state = 2237
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==42 or _la==80 or (((_la - 366)) & ~0x3f) == 0 and ((1 << (_la - 366)) & 2199024304129) != 0 or (((_la - 498)) & ~0x3f) == 0 and ((1 << (_la - 498)) & 268436481) != 0 or _la==634 or _la==645:
                self.state = 2234
                self.partitionOption()
                self.state = 2239
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_partitionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PartitionOptionCommentContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.comment = None # Token
            self.copyFrom(ctx)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionComment" ):
                listener.enterPartitionOptionComment(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionComment" ):
                listener.exitPartitionOptionComment(self)


    class PartitionOptionNodeGroupContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.nodegroup = None # UidContext
            self.copyFrom(ctx)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionNodeGroup" ):
                listener.enterPartitionOptionNodeGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionNodeGroup" ):
                listener.exitPartitionOptionNodeGroup(self)


    class PartitionOptionIndexDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.indexDirectory = None # Token
            self.copyFrom(ctx)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionIndexDirectory" ):
                listener.enterPartitionOptionIndexDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionIndexDirectory" ):
                listener.exitPartitionOptionIndexDirectory(self)


    class PartitionOptionMaxRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.maxRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMaxRows" ):
                listener.enterPartitionOptionMaxRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMaxRows" ):
                listener.exitPartitionOptionMaxRows(self)


    class PartitionOptionTablespaceContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.tablespace = None # UidContext
            self.copyFrom(ctx)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionTablespace" ):
                listener.enterPartitionOptionTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionTablespace" ):
                listener.exitPartitionOptionTablespace(self)


    class PartitionOptionEngineContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionEngine" ):
                listener.enterPartitionOptionEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionEngine" ):
                listener.exitPartitionOptionEngine(self)


    class PartitionOptionMinRowsContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.minRows = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionMinRows" ):
                listener.enterPartitionOptionMinRows(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionMinRows" ):
                listener.exitPartitionOptionMinRows(self)


    class PartitionOptionDataDirectoryContext(PartitionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PartitionOptionContext
            super().__init__(parser)
            self.dataDirectory = None # Token
            self.copyFrom(ctx)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionOptionDataDirectory" ):
                listener.enterPartitionOptionDataDirectory(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionOptionDataDirectory" ):
                listener.exitPartitionOptionDataDirectory(self)



    def partitionOption(self):

        localctx = MySqlParser.PartitionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_partitionOption)
        self._la = 0 # Token type
        try:
            self.state = 2288
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [42, 407, 634]:
                localctx = MySqlParser.PartitionOptionEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 2240
                    self.match(MySqlParser.DEFAULT)


                self.state = 2244
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==634:
                    self.state = 2243
                    self.match(MySqlParser.STORAGE)


                self.state = 2246
                self.match(MySqlParser.ENGINE)
                self.state = 2248
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2247
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2250
                self.engineName()
                pass
            elif token in [366]:
                localctx = MySqlParser.PartitionOptionCommentContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2251
                self.match(MySqlParser.COMMENT)
                self.state = 2253
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2252
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2255
                localctx.comment = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [386]:
                localctx = MySqlParser.PartitionOptionDataDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2256
                self.match(MySqlParser.DATA)
                self.state = 2257
                self.match(MySqlParser.DIRECTORY)
                self.state = 2259
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2258
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2261
                localctx.dataDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [80]:
                localctx = MySqlParser.PartitionOptionIndexDirectoryContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2262
                self.match(MySqlParser.INDEX)
                self.state = 2263
                self.match(MySqlParser.DIRECTORY)
                self.state = 2265
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2264
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2267
                localctx.indexDirectory = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [498]:
                localctx = MySqlParser.PartitionOptionMaxRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2268
                self.match(MySqlParser.MAX_ROWS)
                self.state = 2270
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2269
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2272
                localctx.maxRows = self.decimalLiteral()
                pass
            elif token in [508]:
                localctx = MySqlParser.PartitionOptionMinRowsContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2273
                self.match(MySqlParser.MIN_ROWS)
                self.state = 2275
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2274
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2277
                localctx.minRows = self.decimalLiteral()
                pass
            elif token in [645]:
                localctx = MySqlParser.PartitionOptionTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2278
                self.match(MySqlParser.TABLESPACE)
                self.state = 2280
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2279
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2282
                localctx.tablespace = self.uid()
                pass
            elif token in [526]:
                localctx = MySqlParser.PartitionOptionNodeGroupContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2283
                self.match(MySqlParser.NODEGROUP)
                self.state = 2285
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2284
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2287
                localctx.nodegroup = self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterDatabase

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUpgradeNameContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)
        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)
        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUpgradeName" ):
                listener.enterAlterUpgradeName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUpgradeName" ):
                listener.exitAlterUpgradeName(self)


    class AlterSimpleDatabaseContext(AlterDatabaseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterDatabaseContext
            super().__init__(parser)
            self.dbFormat = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def createDatabaseOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDatabaseOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDatabaseOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterSimpleDatabase" ):
                listener.enterAlterSimpleDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterSimpleDatabase" ):
                listener.exitAlterSimpleDatabase(self)



    def alterDatabase(self):

        localctx = MySqlParser.AlterDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_alterDatabase)
        self._la = 0 # Token type
        try:
            self.state = 2308
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,274,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterSimpleDatabaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2290
                self.match(MySqlParser.ALTER)
                self.state = 2291
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==39 or _la==149):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,272,self._ctx)
                if la_ == 1:
                    self.state = 2292
                    self.uid()


                self.state = 2296 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 2295
                    self.createDatabaseOption()
                    self.state = 2298 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (((_la) & ~0x3f) == 0 and ((1 << _la) & 4398214283264) != 0 or _la==133 or _la==220 or _la==403 or _la==836):
                        break

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUpgradeNameContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2300
                self.match(MySqlParser.ALTER)
                self.state = 2301
                localctx.dbFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==39 or _la==149):
                    localctx.dbFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2302
                self.uid()
                self.state = 2303
                self.match(MySqlParser.UPGRADE)
                self.state = 2304
                self.match(MySqlParser.DATA)
                self.state = 2305
                self.match(MySqlParser.DIRECTORY)
                self.state = 2306
                self.match(MySqlParser.NAME)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def scheduleExpression(self):
            return self.getTypedRuleContext(MySqlParser.ScheduleExpressionContext,0)


        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def enableType(self):
            return self.getTypedRuleContext(MySqlParser.EnableTypeContext,0)


        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterEvent" ):
                listener.enterAlterEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterEvent" ):
                listener.exitAlterEvent(self)




    def alterEvent(self):

        localctx = MySqlParser.AlterEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_alterEvent)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2310
            self.match(MySqlParser.ALTER)
            self.state = 2312
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 2311
                self.ownerStatement()


            self.state = 2314
            self.match(MySqlParser.EVENT)
            self.state = 2315
            self.fullId()
            self.state = 2319
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,276,self._ctx)
            if la_ == 1:
                self.state = 2316
                self.match(MySqlParser.ON)
                self.state = 2317
                self.match(MySqlParser.SCHEDULE)
                self.state = 2318
                self.scheduleExpression()


            self.state = 2327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 2321
                self.match(MySqlParser.ON)
                self.state = 2322
                self.match(MySqlParser.COMPLETION)
                self.state = 2324
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 2323
                    self.match(MySqlParser.NOT)


                self.state = 2326
                self.match(MySqlParser.PRESERVE)


            self.state = 2332
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,279,self._ctx)
            if la_ == 1:
                self.state = 2329
                self.match(MySqlParser.RENAME)
                self.state = 2330
                self.match(MySqlParser.TO)
                self.state = 2331
                self.fullId()


            self.state = 2335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==394 or _la==401:
                self.state = 2334
                self.enableType()


            self.state = 2339
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==366:
                self.state = 2337
                self.match(MySqlParser.COMMENT)
                self.state = 2338
                self.match(MySqlParser.STRING_LITERAL)


            self.state = 2343
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,282,self._ctx)
            if la_ == 1:
                self.state = 2341
                self.match(MySqlParser.DO)
                self.state = 2342
                self.routineBody()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterFunction" ):
                listener.enterAlterFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterFunction" ):
                listener.exitAlterFunction(self)




    def alterFunction(self):

        localctx = MySqlParser.AlterFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_alterFunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2345
            self.match(MySqlParser.ALTER)
            self.state = 2346
            self.match(MySqlParser.FUNCTION)
            self.state = 2347
            self.fullId()
            self.state = 2351
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47 or (((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 140737496743941) != 0 or _la==366 or _la==379 or _la==466 or _la==519:
                self.state = 2348
                self.routineOption()
                self.state = 2353
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterInstanceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterInstance

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterInstance" ):
                listener.enterAlterInstance(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterInstance" ):
                listener.exitAlterInstance(self)




    def alterInstance(self):

        localctx = MySqlParser.AlterInstanceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_alterInstance)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2354
            self.match(MySqlParser.ALTER)
            self.state = 2355
            self.match(MySqlParser.INSTANCE)
            self.state = 2356
            self.match(MySqlParser.ROTATE)
            self.state = 2357
            self.match(MySqlParser.INNODB)
            self.state = 2358
            self.match(MySqlParser.MASTER)
            self.state = 2359
            self.match(MySqlParser.KEY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterLogfileGroup" ):
                listener.enterAlterLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterLogfileGroup" ):
                listener.exitAlterLogfileGroup(self)




    def alterLogfileGroup(self):

        localctx = MySqlParser.AlterLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_alterLogfileGroup)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2361
            self.match(MySqlParser.ALTER)
            self.state = 2362
            self.match(MySqlParser.LOGFILE)
            self.state = 2363
            self.match(MySqlParser.GROUP)
            self.state = 2364
            self.uid()
            self.state = 2365
            self.match(MySqlParser.ADD)
            self.state = 2366
            self.match(MySqlParser.UNDOFILE)
            self.state = 2367
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2373
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==451:
                self.state = 2368
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2369
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2372
                self.fileSizeLiteral()


            self.state = 2376
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==672:
                self.state = 2375
                self.match(MySqlParser.WAIT)


            self.state = 2378
            self.match(MySqlParser.ENGINE)
            self.state = 2380
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1117:
                self.state = 2379
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2382
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def routineOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoutineOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoutineOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_alterProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterProcedure" ):
                listener.enterAlterProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterProcedure" ):
                listener.exitAlterProcedure(self)




    def alterProcedure(self):

        localctx = MySqlParser.AlterProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_alterProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2384
            self.match(MySqlParser.ALTER)
            self.state = 2385
            self.match(MySqlParser.PROCEDURE)
            self.state = 2386
            self.fullId()
            self.state = 2390
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==47 or (((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 140737496743941) != 0 or _la==366 or _la==379 or _la==466 or _la==519:
                self.state = 2387
                self.routineOption()
                self.state = 2392
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def serverOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ServerOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ServerOptionContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterServer" ):
                listener.enterAlterServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterServer" ):
                listener.exitAlterServer(self)




    def alterServer(self):

        localctx = MySqlParser.AlterServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_alterServer)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2393
            self.match(MySqlParser.ALTER)
            self.state = 2394
            self.match(MySqlParser.SERVER)
            self.state = 2395
            self.uid()
            self.state = 2396
            self.match(MySqlParser.OPTIONS)
            self.state = 2397
            self.match(MySqlParser.LR_BRACKET)
            self.state = 2398
            self.serverOption()
            self.state = 2403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 2399
                self.match(MySqlParser.COMMA)
                self.state = 2400
                self.serverOption()
                self.state = 2405
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2406
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def alterSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AlterSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AlterSpecificationContext,i)


        def partitionDefinitions(self):
            return self.getTypedRuleContext(MySqlParser.PartitionDefinitionsContext,0)


        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTable" ):
                listener.enterAlterTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTable" ):
                listener.exitAlterTable(self)




    def alterTable(self):

        localctx = MySqlParser.AlterTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_alterTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2408
            self.match(MySqlParser.ALTER)
            self.state = 2410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==529 or _la==535:
                self.state = 2409
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==529 or _la==535):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2413
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 2412
                self.match(MySqlParser.IGNORE)


            self.state = 2415
            self.match(MySqlParser.TABLE)
            self.state = 2416
            self.tableName()
            self.state = 2418
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525 or _la==672:
                self.state = 2417
                self.waitNowaitClause()


            self.state = 2428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,294,self._ctx)
            if la_ == 1:
                self.state = 2420
                self.alterSpecification()
                self.state = 2425
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2421
                    self.match(MySqlParser.COMMA)
                    self.state = 2422
                    self.alterSpecification()
                    self.state = 2427
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 2431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 2430
                self.partitionDefinitions()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.objectAction = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def fileSizeLiteral(self):
            return self.getTypedRuleContext(MySqlParser.FileSizeLiteralContext,0)


        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterTablespace" ):
                listener.enterAlterTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterTablespace" ):
                listener.exitAlterTablespace(self)




    def alterTablespace(self):

        localctx = MySqlParser.AlterTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_alterTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2433
            self.match(MySqlParser.ALTER)
            self.state = 2434
            self.match(MySqlParser.TABLESPACE)
            self.state = 2435
            self.uid()
            self.state = 2436
            localctx.objectAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==5 or _la==51):
                localctx.objectAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2437
            self.match(MySqlParser.DATAFILE)
            self.state = 2438
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 2442
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==451:
                self.state = 2439
                self.match(MySqlParser.INITIAL_SIZE)
                self.state = 2440
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2441
                self.fileSizeLiteral()


            self.state = 2445
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==672:
                self.state = 2444
                self.match(MySqlParser.WAIT)


            self.state = 2447
            self.match(MySqlParser.ENGINE)
            self.state = 2449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1117:
                self.state = 2448
                self.match(MySqlParser.EQUAL_SYMBOL)


            self.state = 2451
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.algType = None # Token
            self.secContext = None # Token
            self.checkOpt = None # Token

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ownerStatement(self):
            return self.getTypedRuleContext(MySqlParser.OwnerStatementContext,0)


        def SQL(self):
            return self.getToken(MySqlParser.SQL, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_alterView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterView" ):
                listener.enterAlterView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterView" ):
                listener.exitAlterView(self)




    def alterView(self):

        localctx = MySqlParser.AlterViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_alterView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2453
            self.match(MySqlParser.ALTER)
            self.state = 2457
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==334:
                self.state = 2454
                self.match(MySqlParser.ALGORITHM)
                self.state = 2455
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2456
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==504 or _la==648 or _la==656):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2460
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==390:
                self.state = 2459
                self.ownerStatement()


            self.state = 2465
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 2462
                self.match(MySqlParser.SQL)
                self.state = 2463
                self.match(MySqlParser.SECURITY)
                self.state = 2464
                localctx.secContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==390 or _la==458):
                    localctx.secContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2467
            self.match(MySqlParser.VIEW)
            self.state = 2468
            self.fullId()
            self.state = 2473
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1126:
                self.state = 2469
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2470
                self.uidList()
                self.state = 2471
                self.match(MySqlParser.RR_BRACKET)


            self.state = 2475
            self.match(MySqlParser.AS)
            self.state = 2476
            self.selectStatement()
            self.state = 2483
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 2477
                self.match(MySqlParser.WITH)
                self.state = 2479
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==350 or _la==472:
                    self.state = 2478
                    localctx.checkOpt = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==350 or _la==472):
                        localctx.checkOpt = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2481
                self.match(MySqlParser.CHECK)
                self.state = 2482
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterSpecification

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterByDisableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDisableKeys" ):
                listener.enterAlterByDisableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDisableKeys" ):
                listener.exitAlterByDisableKeys(self)


    class AlterByDefaultCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDefaultCharset" ):
                listener.enterAlterByDefaultCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDefaultCharset" ):
                listener.exitAlterByDefaultCharset(self)


    class AlterByRenameColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameColumn" ):
                listener.enterAlterByRenameColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameColumn" ):
                listener.exitAlterByRenameColumn(self)


    class AlterByConvertCharsetContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByConvertCharset" ):
                listener.enterAlterByConvertCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByConvertCharset" ):
                listener.exitAlterByConvertCharset(self)


    class AlterByAddPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPartition" ):
                listener.enterAlterByAddPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPartition" ):
                listener.exitAlterByAddPartition(self)


    class AlterByAddForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def referenceDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ReferenceDefinitionContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddForeignKey" ):
                listener.enterAlterByAddForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddForeignKey" ):
                listener.exitAlterByAddForeignKey(self)


    class AlterByRenameIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRenameIndex" ):
                listener.enterAlterByRenameIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRenameIndex" ):
                listener.exitAlterByRenameIndex(self)


    class AlterByRemovePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRemovePartitioning" ):
                listener.enterAlterByRemovePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRemovePartitioning" ):
                listener.exitAlterByRemovePartitioning(self)


    class AlterByRenameContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.renameFormat = None # Token
            self.copyFrom(ctx)

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRename" ):
                listener.enterAlterByRename(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRename" ):
                listener.exitAlterByRename(self)


    class AlterByOptimizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOptimizePartition" ):
                listener.enterAlterByOptimizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOptimizePartition" ):
                listener.exitAlterByOptimizePartition(self)


    class AlterByImportTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportTablespace" ):
                listener.enterAlterByImportTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportTablespace" ):
                listener.exitAlterByImportTablespace(self)


    class AlterByAddDefinitionsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def createDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CreateDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CreateDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddDefinitions" ):
                listener.enterAlterByAddDefinitions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddDefinitions" ):
                listener.exitAlterByAddDefinitions(self)


    class AlterByCoalescePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCoalescePartition" ):
                listener.enterAlterByCoalescePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCoalescePartition" ):
                listener.exitAlterByCoalescePartition(self)


    class AlterByDropConstraintCheckContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropConstraintCheck" ):
                listener.enterAlterByDropConstraintCheck(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropConstraintCheck" ):
                listener.exitAlterByDropConstraintCheck(self)


    class AlterByAddColumnsContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ColumnDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumns" ):
                listener.enterAlterByAddColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumns" ):
                listener.exitAlterByAddColumns(self)


    class AlterByAlterIndexVisibilityContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)
        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAlterIndexVisibility" ):
                listener.enterAlterByAlterIndexVisibility(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAlterIndexVisibility" ):
                listener.exitAlterByAlterIndexVisibility(self)


    class AlterByDropForeignKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def FOREIGN(self):
            return self.getToken(MySqlParser.FOREIGN, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropForeignKey" ):
                listener.enterAlterByDropForeignKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropForeignKey" ):
                listener.exitAlterByDropForeignKey(self)


    class AlterByAddCheckTableConstraintContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddCheckTableConstraint" ):
                listener.enterAlterByAddCheckTableConstraint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddCheckTableConstraint" ):
                listener.exitAlterByAddCheckTableConstraint(self)


    class AlterByRebuildPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRebuildPartition" ):
                listener.enterAlterByRebuildPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRebuildPartition" ):
                listener.exitAlterByRebuildPartition(self)


    class AlterByUpgradePartitioningContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)
        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByUpgradePartitioning" ):
                listener.enterAlterByUpgradePartitioning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByUpgradePartitioning" ):
                listener.exitAlterByUpgradePartitioning(self)


    class AlterByRepairPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByRepairPartition" ):
                listener.enterAlterByRepairPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByRepairPartition" ):
                listener.exitAlterByRepairPartition(self)


    class AlterByExchangePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByExchangePartition" ):
                listener.enterAlterByExchangePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByExchangePartition" ):
                listener.exitAlterByExchangePartition(self)


    class AlterByAddIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddIndex" ):
                listener.enterAlterByAddIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddIndex" ):
                listener.exitAlterByAddIndex(self)


    class AlterByDropColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropColumn" ):
                listener.enterAlterByDropColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropColumn" ):
                listener.exitAlterByDropColumn(self)


    class AlterByImportPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByImportPartition" ):
                listener.enterAlterByImportPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByImportPartition" ):
                listener.exitAlterByImportPartition(self)


    class AlterByChangeDefaultContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeDefault" ):
                listener.enterAlterByChangeDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeDefault" ):
                listener.exitAlterByChangeDefault(self)


    class AlterByForceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByForce" ):
                listener.enterAlterByForce(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByForce" ):
                listener.exitAlterByForce(self)


    class AlterByDropPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPartition" ):
                listener.enterAlterByDropPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPartition" ):
                listener.exitAlterByDropPartition(self)


    class AlterByAddSpecialIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.keyType = None # Token
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def FULLTEXT(self):
            return self.getToken(MySqlParser.FULLTEXT, 0)
        def SPATIAL(self):
            return self.getToken(MySqlParser.SPATIAL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddSpecialIndex" ):
                listener.enterAlterByAddSpecialIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddSpecialIndex" ):
                listener.exitAlterByAddSpecialIndex(self)


    class AlterByModifyColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByModifyColumn" ):
                listener.enterAlterByModifyColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByModifyColumn" ):
                listener.exitAlterByModifyColumn(self)


    class AlterByTableOptionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTableOption" ):
                listener.enterAlterByTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTableOption" ):
                listener.exitAlterByTableOption(self)


    class AlterByDropPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropPrimaryKey" ):
                listener.enterAlterByDropPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropPrimaryKey" ):
                listener.exitAlterByDropPrimaryKey(self)


    class AlterByLockContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.lockType = None # Token
            self.copyFrom(ctx)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)
        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByLock" ):
                listener.enterAlterByLock(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByLock" ):
                listener.exitAlterByLock(self)


    class AlterByDiscardPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardPartition" ):
                listener.enterAlterByDiscardPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardPartition" ):
                listener.exitAlterByDiscardPartition(self)


    class AlterByDiscardTablespaceContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)
        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDiscardTablespace" ):
                listener.enterAlterByDiscardTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDiscardTablespace" ):
                listener.exitAlterByDiscardTablespace(self)


    class AlterByValidateContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.validationFormat = None # Token
            self.copyFrom(ctx)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)
        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByValidate" ):
                listener.enterAlterByValidate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByValidate" ):
                listener.exitAlterByValidate(self)


    class AlterByAddPrimaryKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.index = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddPrimaryKey" ):
                listener.enterAlterByAddPrimaryKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddPrimaryKey" ):
                listener.exitAlterByAddPrimaryKey(self)


    class AlterByCheckPartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByCheckPartition" ):
                listener.enterAlterByCheckPartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByCheckPartition" ):
                listener.exitAlterByCheckPartition(self)


    class AlterByEnableKeysContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByEnableKeys" ):
                listener.enterAlterByEnableKeys(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByEnableKeys" ):
                listener.exitAlterByEnableKeys(self)


    class AlterByReorganizePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def partitionDefinition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PartitionDefinitionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PartitionDefinitionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByReorganizePartition" ):
                listener.enterAlterByReorganizePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByReorganizePartition" ):
                listener.exitAlterByReorganizePartition(self)


    class AlterBySetAlgorithmContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.algType = None # Token
            self.copyFrom(ctx)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def INSTANT(self):
            return self.getToken(MySqlParser.INSTANT, 0)
        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)
        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterBySetAlgorithm" ):
                listener.enterAlterBySetAlgorithm(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterBySetAlgorithm" ):
                listener.exitAlterBySetAlgorithm(self)


    class AlterByAnalyzePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAnalyzePartition" ):
                listener.enterAlterByAnalyzePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAnalyzePartition" ):
                listener.exitAlterByAnalyzePartition(self)


    class AlterByChangeColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.oldColumn = None # UidContext
            self.newColumn = None # UidContext
            self.afterColumn = None # UidContext
            self.copyFrom(ctx)

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)
        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByChangeColumn" ):
                listener.enterAlterByChangeColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByChangeColumn" ):
                listener.exitAlterByChangeColumn(self)


    class AlterByAddUniqueKeyContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.name = None # UidContext
            self.indexFormat = None # Token
            self.indexName = None # UidContext
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def UNIQUE(self):
            return self.getToken(MySqlParser.UNIQUE, 0)
        def indexColumnNames(self):
            return self.getTypedRuleContext(MySqlParser.IndexColumnNamesContext,0)

        def CONSTRAINT(self):
            return self.getToken(MySqlParser.CONSTRAINT, 0)
        def indexType(self):
            return self.getTypedRuleContext(MySqlParser.IndexTypeContext,0)

        def indexOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexOptionContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddUniqueKey" ):
                listener.enterAlterByAddUniqueKey(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddUniqueKey" ):
                listener.exitAlterByAddUniqueKey(self)


    class AlterByTruncatePartitionContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)
        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByTruncatePartition" ):
                listener.enterAlterByTruncatePartition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByTruncatePartition" ):
                listener.exitAlterByTruncatePartition(self)


    class AlterByDropIndexContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.copyFrom(ctx)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByDropIndex" ):
                listener.enterAlterByDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByDropIndex" ):
                listener.exitAlterByDropIndex(self)


    class AlterByAddColumnContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ADD(self):
            return self.getToken(MySqlParser.ADD, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def columnDefinition(self):
            return self.getTypedRuleContext(MySqlParser.ColumnDefinitionContext,0)

        def COLUMN(self):
            return self.getToken(MySqlParser.COLUMN, 0)
        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)
        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByAddColumn" ):
                listener.enterAlterByAddColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByAddColumn" ):
                listener.exitAlterByAddColumn(self)


    class AlterByOrderContext(AlterSpecificationContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterSpecificationContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterByOrder" ):
                listener.enterAlterByOrder(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterByOrder" ):
                listener.exitAlterByOrder(self)



    def alterSpecification(self):

        localctx = MySqlParser.AlterSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_alterSpecification)
        self._la = 0 # Token type
        try:
            self.state = 2866
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,361,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterByTableOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 2485
                self.tableOption()
                self.state = 2492
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,306,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 2487
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1128:
                            self.state = 2486
                            self.match(MySqlParser.COMMA)


                        self.state = 2489
                        self.tableOption() 
                    self.state = 2494
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,306,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterByAddColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 2495
                self.match(MySqlParser.ADD)
                self.state = 2497
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2496
                    self.match(MySqlParser.COLUMN)


                self.state = 2499
                self.uid()
                self.state = 2500
                self.columnDefinition()
                self.state = 2504
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [428]:
                    self.state = 2501
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [332]:
                    self.state = 2502
                    self.match(MySqlParser.AFTER)
                    self.state = 2503
                    self.uid()
                    pass
                elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 128, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1128, 1129]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = MySqlParser.AlterByAddColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 2506
                self.match(MySqlParser.ADD)
                self.state = 2508
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2507
                    self.match(MySqlParser.COLUMN)


                self.state = 2510
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2511
                self.uid()
                self.state = 2512
                self.columnDefinition()
                self.state = 2519
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2513
                    self.match(MySqlParser.COMMA)
                    self.state = 2514
                    self.uid()
                    self.state = 2515
                    self.columnDefinition()
                    self.state = 2521
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2522
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.AlterByAddIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 2524
                self.match(MySqlParser.ADD)
                self.state = 2525
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==80 or _la==90):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2527
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 2526
                    self.uid()


                self.state = 2530
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 2529
                    self.indexType()


                self.state = 2532
                self.indexColumnNames()
                self.state = 2536
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 2533
                    self.indexOption()
                    self.state = 2538
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 5:
                localctx = MySqlParser.AlterByAddPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 2539
                self.match(MySqlParser.ADD)
                self.state = 2544
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 2540
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2542
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,314,self._ctx)
                    if la_ == 1:
                        self.state = 2541
                        localctx.name = self.uid()




                self.state = 2546
                self.match(MySqlParser.PRIMARY)
                self.state = 2547
                self.match(MySqlParser.KEY)
                self.state = 2549
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 2548
                    localctx.index = self.uid()


                self.state = 2552
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 2551
                    self.indexType()


                self.state = 2554
                self.indexColumnNames()
                self.state = 2558
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 2555
                    self.indexOption()
                    self.state = 2560
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 6:
                localctx = MySqlParser.AlterByAddUniqueKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 2561
                self.match(MySqlParser.ADD)
                self.state = 2566
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 2562
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2564
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 2563
                        localctx.name = self.uid()




                self.state = 2568
                self.match(MySqlParser.UNIQUE)
                self.state = 2570
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 2569
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 2572
                    localctx.indexName = self.uid()


                self.state = 2576
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 2575
                    self.indexType()


                self.state = 2578
                self.indexColumnNames()
                self.state = 2582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 2579
                    self.indexOption()
                    self.state = 2584
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                localctx = MySqlParser.AlterByAddSpecialIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 2585
                self.match(MySqlParser.ADD)
                self.state = 2586
                localctx.keyType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==68 or _la==157):
                    localctx.keyType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2588
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 2587
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2591
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 2590
                    self.uid()


                self.state = 2593
                self.indexColumnNames()
                self.state = 2597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==185 or _la==190 or _la==366 or _la==457 or _la==465 or _la==671 or _la==870 or _la==994:
                    self.state = 2594
                    self.indexOption()
                    self.state = 2599
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 8:
                localctx = MySqlParser.AlterByAddForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 2600
                self.match(MySqlParser.ADD)
                self.state = 2605
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 2601
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2603
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 2602
                        localctx.name = self.uid()




                self.state = 2607
                self.match(MySqlParser.FOREIGN)
                self.state = 2608
                self.match(MySqlParser.KEY)
                self.state = 2610
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 2609
                    localctx.indexName = self.uid()


                self.state = 2612
                self.indexColumnNames()
                self.state = 2613
                self.referenceDefinition()
                pass

            elif la_ == 9:
                localctx = MySqlParser.AlterByAddCheckTableConstraintContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 2615
                self.match(MySqlParser.ADD)
                self.state = 2620
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==30:
                    self.state = 2616
                    self.match(MySqlParser.CONSTRAINT)
                    self.state = 2618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                        self.state = 2617
                        localctx.name = self.uid()




                self.state = 2622
                self.match(MySqlParser.CHECK)
                self.state = 2623
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2624
                self.expression(0)
                self.state = 2625
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.AlterBySetAlgorithmContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 2627
                self.match(MySqlParser.ALGORITHM)
                self.state = 2629
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2628
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2631
                localctx.algType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==382 or _la==452 or _la==456):
                    localctx.algType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 11:
                localctx = MySqlParser.AlterByChangeDefaultContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 2632
                self.match(MySqlParser.ALTER)
                self.state = 2634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2633
                    self.match(MySqlParser.COLUMN)


                self.state = 2636
                self.uid()
                self.state = 2642
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [152]:
                    self.state = 2637
                    self.match(MySqlParser.SET)
                    self.state = 2638
                    self.match(MySqlParser.DEFAULT)
                    self.state = 2639
                    self.defaultValue()
                    pass
                elif token in [51]:
                    self.state = 2640
                    self.match(MySqlParser.DROP)
                    self.state = 2641
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 12:
                localctx = MySqlParser.AlterByChangeColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 2644
                self.match(MySqlParser.CHANGE)
                self.state = 2646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2645
                    self.match(MySqlParser.COLUMN)


                self.state = 2648
                localctx.oldColumn = self.uid()
                self.state = 2649
                localctx.newColumn = self.uid()
                self.state = 2650
                self.columnDefinition()
                self.state = 2654
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [428]:
                    self.state = 2651
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [332]:
                    self.state = 2652
                    self.match(MySqlParser.AFTER)
                    self.state = 2653
                    localctx.afterColumn = self.uid()
                    pass
                elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 128, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1128, 1129]:
                    pass
                else:
                    pass
                pass

            elif la_ == 13:
                localctx = MySqlParser.AlterByRenameColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 2656
                self.match(MySqlParser.RENAME)
                self.state = 2657
                self.match(MySqlParser.COLUMN)
                self.state = 2658
                localctx.oldColumn = self.uid()
                self.state = 2659
                self.match(MySqlParser.TO)
                self.state = 2660
                localctx.newColumn = self.uid()
                pass

            elif la_ == 14:
                localctx = MySqlParser.AlterByLockContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 2662
                self.match(MySqlParser.LOCK)
                self.state = 2664
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2663
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2666
                localctx.lockType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==42 or _la==417 or _la==527 or _la==609):
                    localctx.lockType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 15:
                localctx = MySqlParser.AlterByModifyColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 2667
                self.match(MySqlParser.MODIFY)
                self.state = 2669
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2668
                    self.match(MySqlParser.COLUMN)


                self.state = 2671
                self.uid()
                self.state = 2672
                self.columnDefinition()
                self.state = 2676
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [428]:
                    self.state = 2673
                    self.match(MySqlParser.FIRST)
                    pass
                elif token in [332]:
                    self.state = 2674
                    self.match(MySqlParser.AFTER)
                    self.state = 2675
                    self.uid()
                    pass
                elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 128, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1128, 1129]:
                    pass
                else:
                    pass
                pass

            elif la_ == 16:
                localctx = MySqlParser.AlterByDropColumnContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 2678
                self.match(MySqlParser.DROP)
                self.state = 2680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2679
                    self.match(MySqlParser.COLUMN)


                self.state = 2682
                self.uid()
                self.state = 2684
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==143:
                    self.state = 2683
                    self.match(MySqlParser.RESTRICT)


                pass

            elif la_ == 17:
                localctx = MySqlParser.AlterByDropConstraintCheckContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 2686
                self.match(MySqlParser.DROP)
                self.state = 2687
                _la = self._input.LA(1)
                if not(_la==26 or _la==30):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2688
                self.uid()
                pass

            elif la_ == 18:
                localctx = MySqlParser.AlterByDropPrimaryKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 2689
                self.match(MySqlParser.DROP)
                self.state = 2690
                self.match(MySqlParser.PRIMARY)
                self.state = 2691
                self.match(MySqlParser.KEY)
                pass

            elif la_ == 19:
                localctx = MySqlParser.AlterByDropIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 19)
                self.state = 2692
                self.match(MySqlParser.DROP)
                self.state = 2693
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==80 or _la==90):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2694
                self.uid()
                pass

            elif la_ == 20:
                localctx = MySqlParser.AlterByRenameIndexContext(self, localctx)
                self.enterOuterAlt(localctx, 20)
                self.state = 2695
                self.match(MySqlParser.RENAME)
                self.state = 2696
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==80 or _la==90):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2697
                self.uid()
                self.state = 2698
                self.match(MySqlParser.TO)
                self.state = 2699
                self.uid()
                pass

            elif la_ == 21:
                localctx = MySqlParser.AlterByAlterIndexVisibilityContext(self, localctx)
                self.enterOuterAlt(localctx, 21)
                self.state = 2701
                self.match(MySqlParser.ALTER)
                self.state = 2702
                self.match(MySqlParser.INDEX)
                self.state = 2703
                self.uid()
                self.state = 2704
                _la = self._input.LA(1)
                if not(_la==457 or _la==671):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 22:
                localctx = MySqlParser.AlterByDropForeignKeyContext(self, localctx)
                self.enterOuterAlt(localctx, 22)
                self.state = 2706
                self.match(MySqlParser.DROP)
                self.state = 2707
                self.match(MySqlParser.FOREIGN)
                self.state = 2708
                self.match(MySqlParser.KEY)
                self.state = 2709
                self.uid()
                pass

            elif la_ == 23:
                localctx = MySqlParser.AlterByDisableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 23)
                self.state = 2710
                self.match(MySqlParser.DISABLE)
                self.state = 2711
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 24:
                localctx = MySqlParser.AlterByEnableKeysContext(self, localctx)
                self.enterOuterAlt(localctx, 24)
                self.state = 2712
                self.match(MySqlParser.ENABLE)
                self.state = 2713
                self.match(MySqlParser.KEYS)
                pass

            elif la_ == 25:
                localctx = MySqlParser.AlterByRenameContext(self, localctx)
                self.enterOuterAlt(localctx, 25)
                self.state = 2714
                self.match(MySqlParser.RENAME)
                self.state = 2716
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12 or _la==173:
                    self.state = 2715
                    localctx.renameFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==173):
                        localctx.renameFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 2720
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,344,self._ctx)
                if la_ == 1:
                    self.state = 2718
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 2719
                    self.fullId()
                    pass


                pass

            elif la_ == 26:
                localctx = MySqlParser.AlterByOrderContext(self, localctx)
                self.enterOuterAlt(localctx, 26)
                self.state = 2722
                self.match(MySqlParser.ORDER)
                self.state = 2723
                self.match(MySqlParser.BY)
                self.state = 2724
                self.uidList()
                pass

            elif la_ == 27:
                localctx = MySqlParser.AlterByConvertCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 27)
                self.state = 2725
                self.match(MySqlParser.CONVERT)
                self.state = 2726
                self.match(MySqlParser.TO)
                self.state = 2727
                self.match(MySqlParser.CHARACTER)
                self.state = 2728
                self.match(MySqlParser.SET)
                self.state = 2729
                self.charsetName()
                self.state = 2732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2730
                    self.match(MySqlParser.COLLATE)
                    self.state = 2731
                    self.collationName()


                pass

            elif la_ == 28:
                localctx = MySqlParser.AlterByDefaultCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 28)
                self.state = 2735
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 2734
                    self.match(MySqlParser.DEFAULT)


                self.state = 2737
                self.match(MySqlParser.CHARACTER)
                self.state = 2738
                self.match(MySqlParser.SET)
                self.state = 2739
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 2740
                self.charsetName()
                self.state = 2744
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==27:
                    self.state = 2741
                    self.match(MySqlParser.COLLATE)
                    self.state = 2742
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 2743
                    self.collationName()


                pass

            elif la_ == 29:
                localctx = MySqlParser.AlterByDiscardTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 29)
                self.state = 2746
                self.match(MySqlParser.DISCARD)
                self.state = 2747
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 30:
                localctx = MySqlParser.AlterByImportTablespaceContext(self, localctx)
                self.enterOuterAlt(localctx, 30)
                self.state = 2748
                self.match(MySqlParser.IMPORT)
                self.state = 2749
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 31:
                localctx = MySqlParser.AlterByForceContext(self, localctx)
                self.enterOuterAlt(localctx, 31)
                self.state = 2750
                self.match(MySqlParser.FORCE)
                pass

            elif la_ == 32:
                localctx = MySqlParser.AlterByValidateContext(self, localctx)
                self.enterOuterAlt(localctx, 32)
                self.state = 2751
                localctx.validationFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==190 or _la==675):
                    localctx.validationFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 2752
                self.match(MySqlParser.VALIDATION)
                pass

            elif la_ == 33:
                localctx = MySqlParser.AlterByAddPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 33)
                self.state = 2753
                self.match(MySqlParser.ADD)
                self.state = 2754
                self.match(MySqlParser.PARTITION)
                self.state = 2755
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2756
                self.partitionDefinition()
                self.state = 2761
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2757
                    self.match(MySqlParser.COMMA)
                    self.state = 2758
                    self.partitionDefinition()
                    self.state = 2763
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2764
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 34:
                localctx = MySqlParser.AlterByDropPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 34)
                self.state = 2766
                self.match(MySqlParser.DROP)
                self.state = 2767
                self.match(MySqlParser.PARTITION)
                self.state = 2768
                self.uidList()
                pass

            elif la_ == 35:
                localctx = MySqlParser.AlterByDiscardPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 35)
                self.state = 2769
                self.match(MySqlParser.DISCARD)
                self.state = 2770
                self.match(MySqlParser.PARTITION)
                self.state = 2773
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2771
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2772
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2775
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 36:
                localctx = MySqlParser.AlterByImportPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 36)
                self.state = 2776
                self.match(MySqlParser.IMPORT)
                self.state = 2777
                self.match(MySqlParser.PARTITION)
                self.state = 2780
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2778
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2779
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 2782
                self.match(MySqlParser.TABLESPACE)
                pass

            elif la_ == 37:
                localctx = MySqlParser.AlterByTruncatePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 37)
                self.state = 2783
                self.match(MySqlParser.TRUNCATE)
                self.state = 2784
                self.match(MySqlParser.PARTITION)
                self.state = 2787
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2785
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2786
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 38:
                localctx = MySqlParser.AlterByCoalescePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 38)
                self.state = 2789
                self.match(MySqlParser.COALESCE)
                self.state = 2790
                self.match(MySqlParser.PARTITION)
                self.state = 2791
                self.decimalLiteral()
                pass

            elif la_ == 39:
                localctx = MySqlParser.AlterByReorganizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 39)
                self.state = 2792
                self.match(MySqlParser.REORGANIZE)
                self.state = 2793
                self.match(MySqlParser.PARTITION)
                self.state = 2794
                self.uidList()
                self.state = 2795
                self.match(MySqlParser.INTO)
                self.state = 2796
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2797
                self.partitionDefinition()
                self.state = 2802
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2798
                    self.match(MySqlParser.COMMA)
                    self.state = 2799
                    self.partitionDefinition()
                    self.state = 2804
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2805
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 40:
                localctx = MySqlParser.AlterByExchangePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 40)
                self.state = 2807
                self.match(MySqlParser.EXCHANGE)
                self.state = 2808
                self.match(MySqlParser.PARTITION)
                self.state = 2809
                self.uid()
                self.state = 2810
                self.match(MySqlParser.WITH)
                self.state = 2811
                self.match(MySqlParser.TABLE)
                self.state = 2812
                self.tableName()
                self.state = 2815
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190 or _la==675:
                    self.state = 2813
                    localctx.validationFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==190 or _la==675):
                        localctx.validationFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 2814
                    self.match(MySqlParser.VALIDATION)


                pass

            elif la_ == 41:
                localctx = MySqlParser.AlterByAnalyzePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 41)
                self.state = 2817
                self.match(MySqlParser.ANALYZE)
                self.state = 2818
                self.match(MySqlParser.PARTITION)
                self.state = 2821
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2819
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2820
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 42:
                localctx = MySqlParser.AlterByCheckPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 42)
                self.state = 2823
                self.match(MySqlParser.CHECK)
                self.state = 2824
                self.match(MySqlParser.PARTITION)
                self.state = 2827
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2825
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2826
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 43:
                localctx = MySqlParser.AlterByOptimizePartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 43)
                self.state = 2829
                self.match(MySqlParser.OPTIMIZE)
                self.state = 2830
                self.match(MySqlParser.PARTITION)
                self.state = 2833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2831
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2832
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 44:
                localctx = MySqlParser.AlterByRebuildPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 44)
                self.state = 2835
                self.match(MySqlParser.REBUILD)
                self.state = 2836
                self.match(MySqlParser.PARTITION)
                self.state = 2839
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2837
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2838
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 45:
                localctx = MySqlParser.AlterByRepairPartitionContext(self, localctx)
                self.enterOuterAlt(localctx, 45)
                self.state = 2841
                self.match(MySqlParser.REPAIR)
                self.state = 2842
                self.match(MySqlParser.PARTITION)
                self.state = 2845
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 2843
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 2844
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 46:
                localctx = MySqlParser.AlterByRemovePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 46)
                self.state = 2847
                self.match(MySqlParser.REMOVE)
                self.state = 2848
                self.match(MySqlParser.PARTITIONING)
                pass

            elif la_ == 47:
                localctx = MySqlParser.AlterByUpgradePartitioningContext(self, localctx)
                self.enterOuterAlt(localctx, 47)
                self.state = 2849
                self.match(MySqlParser.UPGRADE)
                self.state = 2850
                self.match(MySqlParser.PARTITIONING)
                pass

            elif la_ == 48:
                localctx = MySqlParser.AlterByAddDefinitionsContext(self, localctx)
                self.enterOuterAlt(localctx, 48)
                self.state = 2851
                self.match(MySqlParser.ADD)
                self.state = 2853
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==28:
                    self.state = 2852
                    self.match(MySqlParser.COLUMN)


                self.state = 2855
                self.match(MySqlParser.LR_BRACKET)
                self.state = 2856
                self.createDefinition()
                self.state = 2861
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 2857
                    self.match(MySqlParser.COMMA)
                    self.state = 2858
                    self.createDefinition()
                    self.state = 2863
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 2864
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropDatabaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dbFormat = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropDatabase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropDatabase" ):
                listener.enterDropDatabase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropDatabase" ):
                listener.exitDropDatabase(self)




    def dropDatabase(self):

        localctx = MySqlParser.DropDatabaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_dropDatabase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2868
            self.match(MySqlParser.DROP)
            self.state = 2869
            localctx.dbFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==39 or _la==149):
                localctx.dbFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 2871
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,362,self._ctx)
            if la_ == 1:
                self.state = 2870
                self.ifExists()


            self.state = 2873
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropEventContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropEvent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropEvent" ):
                listener.enterDropEvent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropEvent" ):
                listener.exitDropEvent(self)




    def dropEvent(self):

        localctx = MySqlParser.DropEventContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_dropEvent)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2875
            self.match(MySqlParser.DROP)
            self.state = 2876
            self.match(MySqlParser.EVENT)
            self.state = 2878
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,363,self._ctx)
            if la_ == 1:
                self.state = 2877
                self.ifExists()


            self.state = 2880
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropIndexContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.intimeAction = None # Token
            self.algType = None # Token
            self.lockType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def ALGORITHM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ALGORITHM)
            else:
                return self.getToken(MySqlParser.ALGORITHM, i)

        def LOCK(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCK)
            else:
                return self.getToken(MySqlParser.LOCK, i)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def DEFAULT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DEFAULT)
            else:
                return self.getToken(MySqlParser.DEFAULT, i)

        def INPLACE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.INPLACE)
            else:
                return self.getToken(MySqlParser.INPLACE, i)

        def COPY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COPY)
            else:
                return self.getToken(MySqlParser.COPY, i)

        def NONE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NONE)
            else:
                return self.getToken(MySqlParser.NONE, i)

        def SHARED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SHARED)
            else:
                return self.getToken(MySqlParser.SHARED, i)

        def EXCLUSIVE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EXCLUSIVE)
            else:
                return self.getToken(MySqlParser.EXCLUSIVE, i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropIndex

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropIndex" ):
                listener.enterDropIndex(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropIndex" ):
                listener.exitDropIndex(self)




    def dropIndex(self):

        localctx = MySqlParser.DropIndexContext(self, self._ctx, self.state)
        self.enterRule(localctx, 152, self.RULE_dropIndex)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2882
            self.match(MySqlParser.DROP)
            self.state = 2883
            self.match(MySqlParser.INDEX)
            self.state = 2885
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,364,self._ctx)
            if la_ == 1:
                self.state = 2884
                localctx.intimeAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==529 or _la==535):
                    localctx.intimeAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 2887
            self.uid()
            self.state = 2888
            self.match(MySqlParser.ON)
            self.state = 2889
            self.tableName()
            self.state = 2902
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,368,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 2900
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [334]:
                        self.state = 2890
                        self.match(MySqlParser.ALGORITHM)
                        self.state = 2892
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1117:
                            self.state = 2891
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2894
                        localctx.algType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==42 or _la==382 or _la==452):
                            localctx.algType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    elif token in [102]:
                        self.state = 2895
                        self.match(MySqlParser.LOCK)
                        self.state = 2897
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==1117:
                            self.state = 2896
                            self.match(MySqlParser.EQUAL_SYMBOL)


                        self.state = 2899
                        localctx.lockType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==42 or _la==417 or _la==527 or _la==609):
                            localctx.lockType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        pass
                    else:
                        raise NoViableAltException(self)
             
                self.state = 2904
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,368,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropLogfileGroupContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropLogfileGroup

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropLogfileGroup" ):
                listener.enterDropLogfileGroup(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropLogfileGroup" ):
                listener.exitDropLogfileGroup(self)




    def dropLogfileGroup(self):

        localctx = MySqlParser.DropLogfileGroupContext(self, self._ctx, self.state)
        self.enterRule(localctx, 154, self.RULE_dropLogfileGroup)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2905
            self.match(MySqlParser.DROP)
            self.state = 2906
            self.match(MySqlParser.LOGFILE)
            self.state = 2907
            self.match(MySqlParser.GROUP)
            self.state = 2908
            self.uid()
            self.state = 2909
            self.match(MySqlParser.ENGINE)
            self.state = 2910
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 2911
            self.engineName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropProcedure

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropProcedure" ):
                listener.enterDropProcedure(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropProcedure" ):
                listener.exitDropProcedure(self)




    def dropProcedure(self):

        localctx = MySqlParser.DropProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 156, self.RULE_dropProcedure)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2913
            self.match(MySqlParser.DROP)
            self.state = 2914
            self.match(MySqlParser.PROCEDURE)
            self.state = 2916
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,369,self._ctx)
            if la_ == 1:
                self.state = 2915
                self.ifExists()


            self.state = 2918
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropFunction" ):
                listener.enterDropFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropFunction" ):
                listener.exitDropFunction(self)




    def dropFunction(self):

        localctx = MySqlParser.DropFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 158, self.RULE_dropFunction)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2920
            self.match(MySqlParser.DROP)
            self.state = 2921
            self.match(MySqlParser.FUNCTION)
            self.state = 2923
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,370,self._ctx)
            if la_ == 1:
                self.state = 2922
                self.ifExists()


            self.state = 2925
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropServerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropServer

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropServer" ):
                listener.enterDropServer(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropServer" ):
                listener.exitDropServer(self)




    def dropServer(self):

        localctx = MySqlParser.DropServerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 160, self.RULE_dropServer)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2927
            self.match(MySqlParser.DROP)
            self.state = 2928
            self.match(MySqlParser.SERVER)
            self.state = 2930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,371,self._ctx)
            if la_ == 1:
                self.state = 2929
                self.ifExists()


            self.state = 2932
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTable" ):
                listener.enterDropTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTable" ):
                listener.exitDropTable(self)




    def dropTable(self):

        localctx = MySqlParser.DropTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 162, self.RULE_dropTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2934
            self.match(MySqlParser.DROP)
            self.state = 2936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==647:
                self.state = 2935
                self.match(MySqlParser.TEMPORARY)


            self.state = 2938
            self.match(MySqlParser.TABLE)
            self.state = 2940
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,373,self._ctx)
            if la_ == 1:
                self.state = 2939
                self.ifExists()


            self.state = 2942
            self.tables()
            self.state = 2944
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==143:
                self.state = 2943
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==21 or _la==143):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTablespaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropTablespace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTablespace" ):
                listener.enterDropTablespace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTablespace" ):
                listener.exitDropTablespace(self)




    def dropTablespace(self):

        localctx = MySqlParser.DropTablespaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 164, self.RULE_dropTablespace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2946
            self.match(MySqlParser.DROP)
            self.state = 2947
            self.match(MySqlParser.TABLESPACE)
            self.state = 2948
            self.uid()
            self.state = 2954
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==407:
                self.state = 2949
                self.match(MySqlParser.ENGINE)
                self.state = 2951
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1117:
                    self.state = 2950
                    self.match(MySqlParser.EQUAL_SYMBOL)


                self.state = 2953
                self.engineName()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropTriggerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dropTrigger

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropTrigger" ):
                listener.enterDropTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropTrigger" ):
                listener.exitDropTrigger(self)




    def dropTrigger(self):

        localctx = MySqlParser.DropTriggerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 166, self.RULE_dropTrigger)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2956
            self.match(MySqlParser.DROP)
            self.state = 2957
            self.match(MySqlParser.TRIGGER)
            self.state = 2959
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,377,self._ctx)
            if la_ == 1:
                self.state = 2958
                self.ifExists()


            self.state = 2961
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropViewContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropType = None # Token

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def RESTRICT(self):
            return self.getToken(MySqlParser.RESTRICT, 0)

        def CASCADE(self):
            return self.getToken(MySqlParser.CASCADE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropView

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropView" ):
                listener.enterDropView(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropView" ):
                listener.exitDropView(self)




    def dropView(self):

        localctx = MySqlParser.DropViewContext(self, self._ctx, self.state)
        self.enterRule(localctx, 168, self.RULE_dropView)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2963
            self.match(MySqlParser.DROP)
            self.state = 2964
            self.match(MySqlParser.VIEW)
            self.state = 2966
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,378,self._ctx)
            if la_ == 1:
                self.state = 2965
                self.ifExists()


            self.state = 2968
            self.fullId()
            self.state = 2973
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 2969
                self.match(MySqlParser.COMMA)
                self.state = 2970
                self.fullId()
                self.state = 2975
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 2977
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==21 or _la==143:
                self.state = 2976
                localctx.dropType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==21 or _la==143):
                    localctx.dropType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropRole" ):
                listener.enterDropRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropRole" ):
                listener.exitDropRole(self)




    def dropRole(self):

        localctx = MySqlParser.DropRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 170, self.RULE_dropRole)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 2979
            self.match(MySqlParser.DROP)
            self.state = 2980
            self.match(MySqlParser.ROLE)
            self.state = 2982
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,381,self._ctx)
            if la_ == 1:
                self.state = 2981
                self.ifExists()


            self.state = 2984
            self.roleName()
            self.state = 2989
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 2985
                self.match(MySqlParser.COMMA)
                self.state = 2986
                self.roleName()
                self.state = 2991
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetRoleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def roleName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RoleNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RoleNameContext,i)


        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setRole

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetRole" ):
                listener.enterSetRole(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetRole" ):
                listener.exitSetRole(self)




    def setRole(self):

        localctx = MySqlParser.SetRoleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 172, self.RULE_setRole)
        self._la = 0 # Token type
        try:
            self.state = 3025
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,388,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 2992
                self.match(MySqlParser.SET)
                self.state = 2993
                self.match(MySqlParser.DEFAULT)
                self.state = 2994
                self.match(MySqlParser.ROLE)
                self.state = 3005
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,384,self._ctx)
                if la_ == 1:
                    self.state = 2995
                    self.match(MySqlParser.NONE)
                    pass

                elif la_ == 2:
                    self.state = 2996
                    self.match(MySqlParser.ALL)
                    pass

                elif la_ == 3:
                    self.state = 2997
                    self.roleName()
                    self.state = 3002
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 2998
                        self.match(MySqlParser.COMMA)
                        self.state = 2999
                        self.roleName()
                        self.state = 3004
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)

                    pass


                self.state = 3007
                self.match(MySqlParser.TO)
                self.state = 3010
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,385,self._ctx)
                if la_ == 1:
                    self.state = 3008
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 3009
                    self.uid()
                    pass


                self.state = 3019
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3012
                    self.match(MySqlParser.COMMA)
                    self.state = 3015
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,386,self._ctx)
                    if la_ == 1:
                        self.state = 3013
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 3014
                        self.uid()
                        pass


                    self.state = 3021
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3022
                self.match(MySqlParser.SET)
                self.state = 3023
                self.match(MySqlParser.ROLE)
                self.state = 3024
                self.roleOption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def renameTableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameTableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameTableClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTable" ):
                listener.enterRenameTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTable" ):
                listener.exitRenameTable(self)




    def renameTable(self):

        localctx = MySqlParser.RenameTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 174, self.RULE_renameTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3027
            self.match(MySqlParser.RENAME)
            self.state = 3028
            self.match(MySqlParser.TABLE)
            self.state = 3029
            self.renameTableClause()
            self.state = 3034
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 3030
                self.match(MySqlParser.COMMA)
                self.state = 3031
                self.renameTableClause()
                self.state = 3036
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameTableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameTableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameTableClause" ):
                listener.enterRenameTableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameTableClause" ):
                listener.exitRenameTableClause(self)




    def renameTableClause(self):

        localctx = MySqlParser.RenameTableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 176, self.RULE_renameTableClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3037
            self.tableName()
            self.state = 3038
            self.match(MySqlParser.TO)
            self.state = 3039
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TruncateTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_truncateTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTruncateTable" ):
                listener.enterTruncateTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTruncateTable" ):
                listener.exitTruncateTable(self)




    def truncateTable(self):

        localctx = MySqlParser.TruncateTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 178, self.RULE_truncateTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3041
            self.match(MySqlParser.TRUNCATE)
            self.state = 3043
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==170:
                self.state = 3042
                self.match(MySqlParser.TABLE)


            self.state = 3045
            self.tableName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CallStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CALL(self):
            return self.getToken(MySqlParser.CALL, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_callStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCallStatement" ):
                listener.enterCallStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCallStatement" ):
                listener.exitCallStatement(self)




    def callStatement(self):

        localctx = MySqlParser.CallStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 180, self.RULE_callStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3047
            self.match(MySqlParser.CALL)
            self.state = 3048
            self.fullId()
            self.state = 3055
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,392,self._ctx)
            if la_ == 1:
                self.state = 3049
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3052
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,391,self._ctx)
                if la_ == 1:
                    self.state = 3050
                    self.constants()

                elif la_ == 2:
                    self.state = 3051
                    self.expressions()


                self.state = 3054
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleDeleteStatementContext,0)


        def multipleDeleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleDeleteStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_deleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeleteStatement" ):
                listener.enterDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeleteStatement" ):
                listener.exitDeleteStatement(self)




    def deleteStatement(self):

        localctx = MySqlParser.DeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 182, self.RULE_deleteStatement)
        try:
            self.state = 3059
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,393,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3057
                self.singleDeleteStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3058
                self.multipleDeleteStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DoStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_doStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoStatement" ):
                listener.enterDoStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoStatement" ):
                listener.exitDoStatement(self)




    def doStatement(self):

        localctx = MySqlParser.DoStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 184, self.RULE_doStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3061
            self.match(MySqlParser.DO)
            self.state = 3062
            self.expressions()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def handlerOpenStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerOpenStatementContext,0)


        def handlerReadIndexStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadIndexStatementContext,0)


        def handlerReadStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerReadStatementContext,0)


        def handlerCloseStatement(self):
            return self.getTypedRuleContext(MySqlParser.HandlerCloseStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerStatement" ):
                listener.enterHandlerStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerStatement" ):
                listener.exitHandlerStatement(self)




    def handlerStatement(self):

        localctx = MySqlParser.HandlerStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 186, self.RULE_handlerStatement)
        try:
            self.state = 3068
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,394,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3064
                self.handlerOpenStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3065
                self.handlerReadIndexStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 3066
                self.handlerReadStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 3067
                self.handlerCloseStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # FullColumnNameListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts
            self.duplicatedFirst = None # UpdatedElementContext
            self.duplicatedElements = list() # of UpdatedElementContexts

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def fullColumnNameList(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameListContext,0)


        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatement" ):
                listener.enterInsertStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatement" ):
                listener.exitInsertStatement(self)




    def insertStatement(self):

        localctx = MySqlParser.InsertStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 188, self.RULE_insertStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3070
            self.match(MySqlParser.INSERT)
            self.state = 3072
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if (((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & 4611686020574871553) != 0:
                self.state = 3071
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 43)) & ~0x3f) == 0 and ((1 << (_la - 43)) & 4611686020574871553) != 0):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3075
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3074
                self.match(MySqlParser.IGNORE)


            self.state = 3078
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 3077
                self.match(MySqlParser.INTO)


            self.state = 3080
            self.tableName()
            self.state = 3087
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3081
                self.match(MySqlParser.PARTITION)
                self.state = 3082
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3084
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 3083
                    localctx.partitions = self.uidList()


                self.state = 3086
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3105
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 186, 667, 1126]:
                self.state = 3093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,400,self._ctx)
                if la_ == 1:
                    self.state = 3089
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3090
                    localctx.columns = self.fullColumnNameList()
                    self.state = 3091
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3095
                self.insertStatementValue()
                pass
            elif token in [152]:
                self.state = 3096
                self.match(MySqlParser.SET)
                self.state = 3097
                localctx.setFirst = self.updatedElement()
                self.state = 3102
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3098
                    self.match(MySqlParser.COMMA)
                    self.state = 3099
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3104
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 3119
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 3107
                self.match(MySqlParser.ON)
                self.state = 3108
                self.match(MySqlParser.DUPLICATE)
                self.state = 3109
                self.match(MySqlParser.KEY)
                self.state = 3110
                self.match(MySqlParser.UPDATE)
                self.state = 3111
                localctx.duplicatedFirst = self.updatedElement()
                self.state = 3116
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3112
                    self.match(MySqlParser.COMMA)
                    self.state = 3113
                    localctx._updatedElement = self.updatedElement()
                    localctx.duplicatedElements.append(localctx._updatedElement)
                    self.state = 3118
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadDataStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def LINES(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LINES)
            else:
                return self.getToken(MySqlParser.LINES, i)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)


        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadDataStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadDataStatement" ):
                listener.enterLoadDataStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadDataStatement" ):
                listener.exitLoadDataStatement(self)




    def loadDataStatement(self):

        localctx = MySqlParser.LoadDataStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 190, self.RULE_loadDataStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3121
            self.match(MySqlParser.LOAD)
            self.state = 3122
            self.match(MySqlParser.DATA)
            self.state = 3124
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105 or _la==372:
                self.state = 3123
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==105 or _la==372):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==472:
                self.state = 3126
                self.match(MySqlParser.LOCAL)


            self.state = 3129
            self.match(MySqlParser.INFILE)
            self.state = 3130
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 3132
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==140:
                self.state = 3131
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==77 or _la==140):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3134
            self.match(MySqlParser.INTO)
            self.state = 3135
            self.match(MySqlParser.TABLE)
            self.state = 3136
            self.tableName()
            self.state = 3142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3137
                self.match(MySqlParser.PARTITION)
                self.state = 3138
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3139
                self.uidList()
                self.state = 3140
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3147
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 3144
                self.match(MySqlParser.CHARACTER)
                self.state = 3145
                self.match(MySqlParser.SET)
                self.state = 3146
                localctx.charset = self.charsetName()


            self.state = 3155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==363 or _la==425:
                self.state = 3149
                localctx.fieldsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==363 or _la==425):
                    localctx.fieldsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3151 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3150
                    self.selectFieldsInto()
                    self.state = 3153 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==56 or _la==57 or _la==121 or _la==171):
                        break



            self.state = 3163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==100:
                self.state = 3157
                self.match(MySqlParser.LINES)
                self.state = 3159 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3158
                    self.selectLinesInto()
                    self.state = 3161 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==167 or _la==171):
                        break



            self.state = 3169
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3165
                self.match(MySqlParser.IGNORE)
                self.state = 3166
                self.decimalLiteral()
                self.state = 3167
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==100 or _la==599):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3182
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,416,self._ctx)
            if la_ == 1:
                self.state = 3171
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3172
                self.assignmentField()
                self.state = 3177
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3173
                    self.match(MySqlParser.COMMA)
                    self.state = 3174
                    self.assignmentField()
                    self.state = 3179
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3180
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3193
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,418,self._ctx)
            if la_ == 1:
                self.state = 3184
                self.match(MySqlParser.SET)
                self.state = 3185
                self.updatedElement()
                self.state = 3190
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3186
                    self.match(MySqlParser.COMMA)
                    self.state = 3187
                    self.updatedElement()
                    self.state = 3192
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadXmlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.filename = None # Token
            self.violation = None # Token
            self.charset = None # CharsetNameContext
            self.tag = None # Token
            self.linesFormat = None # Token

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def INFILE(self):
            return self.getToken(MySqlParser.INFILE, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SET)
            else:
                return self.getToken(MySqlParser.SET, i)

        def ROWS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROWS)
            else:
                return self.getToken(MySqlParser.ROWS, i)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def IGNORE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IGNORE)
            else:
                return self.getToken(MySqlParser.IGNORE, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadXmlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadXmlStatement" ):
                listener.enterLoadXmlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadXmlStatement" ):
                listener.exitLoadXmlStatement(self)




    def loadXmlStatement(self):

        localctx = MySqlParser.LoadXmlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 192, self.RULE_loadXmlStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3195
            self.match(MySqlParser.LOAD)
            self.state = 3196
            self.match(MySqlParser.XML)
            self.state = 3198
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105 or _la==372:
                self.state = 3197
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==105 or _la==372):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3201
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==472:
                self.state = 3200
                self.match(MySqlParser.LOCAL)


            self.state = 3203
            self.match(MySqlParser.INFILE)
            self.state = 3204
            localctx.filename = self.match(MySqlParser.STRING_LITERAL)
            self.state = 3206
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77 or _la==140:
                self.state = 3205
                localctx.violation = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==77 or _la==140):
                    localctx.violation = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3208
            self.match(MySqlParser.INTO)
            self.state = 3209
            self.match(MySqlParser.TABLE)
            self.state = 3210
            self.tableName()
            self.state = 3214
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==25:
                self.state = 3211
                self.match(MySqlParser.CHARACTER)
                self.state = 3212
                self.match(MySqlParser.SET)
                self.state = 3213
                localctx.charset = self.charsetName()


            self.state = 3222
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==599:
                self.state = 3216
                self.match(MySqlParser.ROWS)
                self.state = 3217
                self.match(MySqlParser.IDENTIFIED)
                self.state = 3218
                self.match(MySqlParser.BY)
                self.state = 3219
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 3220
                localctx.tag = self.match(MySqlParser.STRING_LITERAL)
                self.state = 3221
                self.match(MySqlParser.GREATER_SYMBOL)


            self.state = 3228
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3224
                self.match(MySqlParser.IGNORE)
                self.state = 3225
                self.decimalLiteral()
                self.state = 3226
                localctx.linesFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==100 or _la==599):
                    localctx.linesFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3241
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,426,self._ctx)
            if la_ == 1:
                self.state = 3230
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3231
                self.assignmentField()
                self.state = 3236
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3232
                    self.match(MySqlParser.COMMA)
                    self.state = 3233
                    self.assignmentField()
                    self.state = 3238
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3239
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3252
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,428,self._ctx)
            if la_ == 1:
                self.state = 3243
                self.match(MySqlParser.SET)
                self.state = 3244
                self.updatedElement()
                self.state = 3249
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3245
                    self.match(MySqlParser.COMMA)
                    self.state = 3246
                    self.updatedElement()
                    self.state = 3251
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplaceStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token
            self.partitions = None # UidListContext
            self.columns = None # UidListContext
            self.setFirst = None # UpdatedElementContext
            self._updatedElement = None # UpdatedElementContext
            self.setElements = list() # of UpdatedElementContexts

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def insertStatementValue(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementValueContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DELAYED(self):
            return self.getToken(MySqlParser.DELAYED, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_replaceStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReplaceStatement" ):
                listener.enterReplaceStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReplaceStatement" ):
                listener.exitReplaceStatement(self)




    def replaceStatement(self):

        localctx = MySqlParser.ReplaceStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 194, self.RULE_replaceStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3254
            self.match(MySqlParser.REPLACE)
            self.state = 3256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==43 or _la==105:
                self.state = 3255
                localctx.priority = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==43 or _la==105):
                    localctx.priority = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3259
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 3258
                self.match(MySqlParser.INTO)


            self.state = 3261
            self.tableName()
            self.state = 3267
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3262
                self.match(MySqlParser.PARTITION)
                self.state = 3263
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3264
                localctx.partitions = self.uidList()
                self.state = 3265
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3285
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 186, 667, 1126]:
                self.state = 3273
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,432,self._ctx)
                if la_ == 1:
                    self.state = 3269
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3270
                    localctx.columns = self.uidList()
                    self.state = 3271
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3275
                self.insertStatementValue()
                pass
            elif token in [152]:
                self.state = 3276
                self.match(MySqlParser.SET)
                self.state = 3277
                localctx.setFirst = self.updatedElement()
                self.state = 3282
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3278
                    self.match(MySqlParser.COMMA)
                    self.state = 3279
                    localctx._updatedElement = self.updatedElement()
                    localctx.setElements.append(localctx._updatedElement)
                    self.state = 3284
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class UnionSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)

        def unionStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionStatementContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionSelect" ):
                listener.enterUnionSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionSelect" ):
                listener.exitUnionSelect(self)


    class UnionParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.unionType = None # Token
            self.copyFrom(ctx)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)

        def unionParenthesis(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UnionParenthesisContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UnionParenthesisContext,i)

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)
        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)

        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesisSelect" ):
                listener.enterUnionParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesisSelect" ):
                listener.exitUnionParenthesisSelect(self)


    class SimpleSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleSelect" ):
                listener.enterSimpleSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleSelect" ):
                listener.exitSimpleSelect(self)


    class ParenthesisSelectContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)

        def lockClause(self):
            return self.getTypedRuleContext(MySqlParser.LockClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterParenthesisSelect" ):
                listener.enterParenthesisSelect(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitParenthesisSelect" ):
                listener.exitParenthesisSelect(self)


    class WithLateralStatementContext(SelectStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def lateralStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LateralStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LateralStatementContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWithLateralStatement" ):
                listener.enterWithLateralStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWithLateralStatement" ):
                listener.exitWithLateralStatement(self)



    def selectStatement(self):

        localctx = MySqlParser.SelectStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 196, self.RULE_selectStatement)
        self._la = 0 # Token type
        try:
            self.state = 3349
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,451,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3287
                self.querySpecification()
                self.state = 3289
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,435,self._ctx)
                if la_ == 1:
                    self.state = 3288
                    self.lockClause()


                pass

            elif la_ == 2:
                localctx = MySqlParser.ParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3291
                self.queryExpression()
                self.state = 3293
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,436,self._ctx)
                if la_ == 1:
                    self.state = 3292
                    self.lockClause()


                pass

            elif la_ == 3:
                localctx = MySqlParser.UnionSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3295
                self.querySpecificationNointo()
                self.state = 3297 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3296
                        self.unionStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3299 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,437,self._ctx)

                self.state = 3309
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 3301
                    self.match(MySqlParser.UNION)
                    self.state = 3303
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==6 or _la==49:
                        self.state = 3302
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==6 or _la==49):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3307
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [151]:
                        self.state = 3305
                        self.querySpecification()
                        pass
                    elif token in [1126]:
                        self.state = 3306
                        self.queryExpression()
                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 3312
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,441,self._ctx)
                if la_ == 1:
                    self.state = 3311
                    self.orderByClause()


                self.state = 3315
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3314
                    self.limitClause()


                self.state = 3318
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,443,self._ctx)
                if la_ == 1:
                    self.state = 3317
                    self.lockClause()


                pass

            elif la_ == 4:
                localctx = MySqlParser.UnionParenthesisSelectContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3320
                self.queryExpressionNointo()
                self.state = 3322 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 3321
                        self.unionParenthesis()

                    else:
                        raise NoViableAltException(self)
                    self.state = 3324 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,444,self._ctx)

                self.state = 3331
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==178:
                    self.state = 3326
                    self.match(MySqlParser.UNION)
                    self.state = 3328
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==6 or _la==49:
                        self.state = 3327
                        localctx.unionType = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==6 or _la==49):
                            localctx.unionType = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 3330
                    self.queryExpression()


                self.state = 3334
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,447,self._ctx)
                if la_ == 1:
                    self.state = 3333
                    self.orderByClause()


                self.state = 3337
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 3336
                    self.limitClause()


                self.state = 3340
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,449,self._ctx)
                if la_ == 1:
                    self.state = 3339
                    self.lockClause()


                pass

            elif la_ == 5:
                localctx = MySqlParser.WithLateralStatementContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 3342
                self.querySpecificationNointo()
                self.state = 3345 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 3343
                    self.match(MySqlParser.COMMA)
                    self.state = 3344
                    self.lateralStatement()
                    self.state = 3347 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1128):
                        break

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def singleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.SingleUpdateStatementContext,0)


        def multipleUpdateStatement(self):
            return self.getTypedRuleContext(MySqlParser.MultipleUpdateStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_updateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdateStatement" ):
                listener.enterUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdateStatement" ):
                listener.exitUpdateStatement(self)




    def updateStatement(self):

        localctx = MySqlParser.UpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 198, self.RULE_updateStatement)
        try:
            self.state = 3353
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,452,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3351
                self.singleUpdateStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3352
                self.multipleUpdateStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InsertStatementValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.insertFormat = None # Token

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def expressionsWithDefaults(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionsWithDefaultsContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionsWithDefaultsContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_insertStatementValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInsertStatementValue" ):
                listener.enterInsertStatementValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInsertStatementValue" ):
                listener.exitInsertStatementValue(self)




    def insertStatementValue(self):

        localctx = MySqlParser.InsertStatementValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 200, self.RULE_insertStatementValue)
        self._la = 0 # Token type
        try:
            self.state = 3373
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151, 1126]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3355
                self.selectStatement()
                pass
            elif token in [186, 667]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3356
                localctx.insertFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==186 or _la==667):
                    localctx.insertFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3357
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3359
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,453,self._ctx)
                if la_ == 1:
                    self.state = 3358
                    self.expressionsWithDefaults()


                self.state = 3361
                self.match(MySqlParser.RR_BRACKET)
                self.state = 3370
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3362
                    self.match(MySqlParser.COMMA)
                    self.state = 3363
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3365
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,454,self._ctx)
                    if la_ == 1:
                        self.state = 3364
                        self.expressionsWithDefaults()


                    self.state = 3367
                    self.match(MySqlParser.RR_BRACKET)
                    self.state = 3372
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UpdatedElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_updatedElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUpdatedElement" ):
                listener.enterUpdatedElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUpdatedElement" ):
                listener.exitUpdatedElement(self)




    def updatedElement(self):

        localctx = MySqlParser.UpdatedElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 202, self.RULE_updatedElement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3375
            self.fullColumnName()
            self.state = 3376
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 3379
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,457,self._ctx)
            if la_ == 1:
                self.state = 3377
                self.expression(0)
                pass

            elif la_ == 2:
                self.state = 3378
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssignmentFieldContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_assignmentField

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAssignmentField" ):
                listener.enterAssignmentField(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAssignmentField" ):
                listener.exitAssignmentField(self)




    def assignmentField(self):

        localctx = MySqlParser.AssignmentFieldContext(self, self._ctx, self.state)
        self.enterRule(localctx, 204, self.RULE_assignmentField)
        try:
            self.state = 3383
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3381
                self.uid()
                pass
            elif token in [1153]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3382
                self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockClause" ):
                listener.enterLockClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockClause" ):
                listener.exitLockClause(self)




    def lockClause(self):

        localctx = MySqlParser.LockClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 206, self.RULE_lockClause)
        try:
            self.state = 3391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3385
                self.match(MySqlParser.FOR)
                self.state = 3386
                self.match(MySqlParser.UPDATE)
                pass
            elif token in [102]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3387
                self.match(MySqlParser.LOCK)
                self.state = 3388
                self.match(MySqlParser.IN)
                self.state = 3389
                self.match(MySqlParser.SHARE)
                self.state = 3390
                self.match(MySqlParser.MODE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleDeleteStatement" ):
                listener.enterSingleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleDeleteStatement" ):
                listener.exitSingleDeleteStatement(self)




    def singleDeleteStatement(self):

        localctx = MySqlParser.SingleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 208, self.RULE_singleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3393
            self.match(MySqlParser.DELETE)
            self.state = 3395
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 3394
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3398
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==566:
                self.state = 3397
                self.match(MySqlParser.QUICK)


            self.state = 3401
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3400
                self.match(MySqlParser.IGNORE)


            self.state = 3403
            self.match(MySqlParser.FROM)
            self.state = 3404
            self.tableName()
            self.state = 3410
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 3405
                self.match(MySqlParser.PARTITION)
                self.state = 3406
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3407
                self.uidList()
                self.state = 3408
                self.match(MySqlParser.RR_BRACKET)


            self.state = 3414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3412
                self.match(MySqlParser.WHERE)
                self.state = 3413
                self.expression(0)


            self.state = 3417
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 3416
                self.orderByClause()


            self.state = 3421
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 3419
                self.match(MySqlParser.LIMIT)
                self.state = 3420
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleDeleteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.DOT)
            else:
                return self.getToken(MySqlParser.DOT, i)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleDeleteStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleDeleteStatement" ):
                listener.enterMultipleDeleteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleDeleteStatement" ):
                listener.exitMultipleDeleteStatement(self)




    def multipleDeleteStatement(self):

        localctx = MySqlParser.MultipleDeleteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 210, self.RULE_multipleDeleteStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3423
            self.match(MySqlParser.DELETE)
            self.state = 3425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 3424
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3428
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,468,self._ctx)
            if la_ == 1:
                self.state = 3427
                self.match(MySqlParser.QUICK)


            self.state = 3431
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3430
                self.match(MySqlParser.IGNORE)


            self.state = 3472
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                self.state = 3433
                self.tableName()
                self.state = 3436
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1125:
                    self.state = 3434
                    self.match(MySqlParser.DOT)
                    self.state = 3435
                    self.match(MySqlParser.STAR)


                self.state = 3446
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3438
                    self.match(MySqlParser.COMMA)
                    self.state = 3439
                    self.tableName()
                    self.state = 3442
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1125:
                        self.state = 3440
                        self.match(MySqlParser.DOT)
                        self.state = 3441
                        self.match(MySqlParser.STAR)


                    self.state = 3448
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3449
                self.match(MySqlParser.FROM)
                self.state = 3450
                self.tableSources()
                pass
            elif token in [67]:
                self.state = 3452
                self.match(MySqlParser.FROM)
                self.state = 3453
                self.tableName()
                self.state = 3456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1125:
                    self.state = 3454
                    self.match(MySqlParser.DOT)
                    self.state = 3455
                    self.match(MySqlParser.STAR)


                self.state = 3466
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3458
                    self.match(MySqlParser.COMMA)
                    self.state = 3459
                    self.tableName()
                    self.state = 3462
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1125:
                        self.state = 3460
                        self.match(MySqlParser.DOT)
                        self.state = 3461
                        self.match(MySqlParser.STAR)


                    self.state = 3468
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3469
                self.match(MySqlParser.USING)
                self.state = 3470
                self.tableSources()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3474
                self.match(MySqlParser.WHERE)
                self.state = 3475
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerOpenStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerOpenStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerOpenStatement" ):
                listener.enterHandlerOpenStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerOpenStatement" ):
                listener.exitHandlerOpenStatement(self)




    def handlerOpenStatement(self):

        localctx = MySqlParser.HandlerOpenStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 212, self.RULE_handlerOpenStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3478
            self.match(MySqlParser.HANDLER)
            self.state = 3479
            self.tableName()
            self.state = 3480
            self.match(MySqlParser.OPEN)
            self.state = 3485
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,479,self._ctx)
            if la_ == 1:
                self.state = 3482
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 3481
                    self.match(MySqlParser.AS)


                self.state = 3484
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.index = None # UidContext
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def constants(self):
            return self.getTypedRuleContext(MySqlParser.ConstantsContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadIndexStatement" ):
                listener.enterHandlerReadIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadIndexStatement" ):
                listener.exitHandlerReadIndexStatement(self)




    def handlerReadIndexStatement(self):

        localctx = MySqlParser.HandlerReadIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 214, self.RULE_handlerReadIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3487
            self.match(MySqlParser.HANDLER)
            self.state = 3488
            self.tableName()
            self.state = 3489
            self.match(MySqlParser.READ)
            self.state = 3490
            localctx.index = self.uid()
            self.state = 3497
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1117, 1118, 1119, 1120]:
                self.state = 3491
                self.comparisonOperator()
                self.state = 3492
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3493
                self.constants()
                self.state = 3494
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [428, 467, 518, 560]:
                self.state = 3496
                localctx.moveOrder = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==428 or _la==467 or _la==518 or _la==560):
                    localctx.moveOrder = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3499
                self.match(MySqlParser.WHERE)
                self.state = 3500
                self.expression(0)


            self.state = 3505
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 3503
                self.match(MySqlParser.LIMIT)
                self.state = 3504
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerReadStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.moveOrder = None # Token

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def limitClauseAtom(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerReadStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerReadStatement" ):
                listener.enterHandlerReadStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerReadStatement" ):
                listener.exitHandlerReadStatement(self)




    def handlerReadStatement(self):

        localctx = MySqlParser.HandlerReadStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 216, self.RULE_handlerReadStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3507
            self.match(MySqlParser.HANDLER)
            self.state = 3508
            self.tableName()
            self.state = 3509
            self.match(MySqlParser.READ)
            self.state = 3510
            localctx.moveOrder = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==428 or _la==518):
                localctx.moveOrder = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3513
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3511
                self.match(MySqlParser.WHERE)
                self.state = 3512
                self.expression(0)


            self.state = 3517
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 3515
                self.match(MySqlParser.LIMIT)
                self.state = 3516
                self.limitClauseAtom()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerCloseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_handlerCloseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerCloseStatement" ):
                listener.enterHandlerCloseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerCloseStatement" ):
                listener.exitHandlerCloseStatement(self)




    def handlerCloseStatement(self):

        localctx = MySqlParser.HandlerCloseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 218, self.RULE_handlerCloseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3519
            self.match(MySqlParser.HANDLER)
            self.state = 3520
            self.tableName()
            self.state = 3521
            self.match(MySqlParser.CLOSE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SingleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_singleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSingleUpdateStatement" ):
                listener.enterSingleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSingleUpdateStatement" ):
                listener.exitSingleUpdateStatement(self)




    def singleUpdateStatement(self):

        localctx = MySqlParser.SingleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 220, self.RULE_singleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3523
            self.match(MySqlParser.UPDATE)
            self.state = 3525
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 3524
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3528
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3527
                self.match(MySqlParser.IGNORE)


            self.state = 3530
            self.tableName()
            self.state = 3535
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285556736) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 3532
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 3531
                    self.match(MySqlParser.AS)


                self.state = 3534
                self.uid()


            self.state = 3537
            self.match(MySqlParser.SET)
            self.state = 3538
            self.updatedElement()
            self.state = 3543
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 3539
                self.match(MySqlParser.COMMA)
                self.state = 3540
                self.updatedElement()
                self.state = 3545
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3548
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3546
                self.match(MySqlParser.WHERE)
                self.state = 3547
                self.expression(0)


            self.state = 3551
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 3550
                self.orderByClause()


            self.state = 3554
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==98:
                self.state = 3553
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MultipleUpdateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.priority = None # Token

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def updatedElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UpdatedElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UpdatedElementContext,i)


        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_multipleUpdateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMultipleUpdateStatement" ):
                listener.enterMultipleUpdateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMultipleUpdateStatement" ):
                listener.exitMultipleUpdateStatement(self)




    def multipleUpdateStatement(self):

        localctx = MySqlParser.MultipleUpdateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 222, self.RULE_multipleUpdateStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3556
            self.match(MySqlParser.UPDATE)
            self.state = 3558
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 3557
                localctx.priority = self.match(MySqlParser.LOW_PRIORITY)


            self.state = 3561
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 3560
                self.match(MySqlParser.IGNORE)


            self.state = 3563
            self.tableSources()
            self.state = 3564
            self.match(MySqlParser.SET)
            self.state = 3565
            self.updatedElement()
            self.state = 3570
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 3566
                self.match(MySqlParser.COMMA)
                self.state = 3567
                self.updatedElement()
                self.state = 3572
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 3575
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 3573
                self.match(MySqlParser.WHERE)
                self.state = 3574
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByClause" ):
                listener.enterOrderByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByClause" ):
                listener.exitOrderByClause(self)




    def orderByClause(self):

        localctx = MySqlParser.OrderByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 224, self.RULE_orderByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3577
            self.match(MySqlParser.ORDER)
            self.state = 3578
            self.match(MySqlParser.BY)
            self.state = 3579
            self.orderByExpression()
            self.state = 3584
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,497,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3580
                    self.match(MySqlParser.COMMA)
                    self.state = 3581
                    self.orderByExpression() 
                self.state = 3586
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,497,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrderByExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_orderByExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrderByExpression" ):
                listener.enterOrderByExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrderByExpression" ):
                listener.exitOrderByExpression(self)




    def orderByExpression(self):

        localctx = MySqlParser.OrderByExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 226, self.RULE_orderByExpression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3587
            self.expression(0)
            self.state = 3589
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,498,self._ctx)
            if la_ == 1:
                self.state = 3588
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==13 or _la==45):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourcesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableSource(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableSourceContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableSourceContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableSources

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSources" ):
                listener.enterTableSources(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSources" ):
                listener.exitTableSources(self)




    def tableSources(self):

        localctx = MySqlParser.TableSourcesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 228, self.RULE_tableSources)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3591
            self.tableSource()
            self.state = 3596
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,499,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3592
                    self.match(MySqlParser.COMMA)
                    self.state = 3593
                    self.tableSource() 
                self.state = 3598
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,499,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSource

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableJsonContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def jsonTable(self):
            return self.getTypedRuleContext(MySqlParser.JsonTableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableJson" ):
                listener.enterTableJson(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableJson" ):
                listener.exitTableJson(self)


    class TableSourceNestedContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceNested" ):
                listener.enterTableSourceNested(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceNested" ):
                listener.exitTableSourceNested(self)


    class TableSourceBaseContext(TableSourceContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def joinPart(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JoinPartContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JoinPartContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourceBase" ):
                listener.enterTableSourceBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourceBase" ):
                listener.exitTableSourceBase(self)



    def tableSource(self):

        localctx = MySqlParser.TableSourceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 230, self.RULE_tableSource)
        self._la = 0 # Token type
        try:
            self.state = 3617
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,502,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.TableSourceBaseContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3599
                self.tableSourceItem()
                self.state = 3603
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,500,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3600
                        self.joinPart() 
                    self.state = 3605
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,500,self._ctx)

                pass

            elif la_ == 2:
                localctx = MySqlParser.TableSourceNestedContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3606
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3607
                self.tableSourceItem()
                self.state = 3611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 34)) & ~0x3f) == 0 and ((1 << (_la - 34)) & 4647996290423062529) != 0 or (((_la - 112)) & ~0x3f) == 0 and ((1 << (_la - 112)) & 144115222435594241) != 0:
                    self.state = 3608
                    self.joinPart()
                    self.state = 3613
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 3614
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableJsonContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3616
                self.jsonTable()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableSourceItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_tableSourceItem

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SubqueryTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.parenthesisSubquery = None # SelectStatementContext
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryTableItem" ):
                listener.enterSubqueryTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryTableItem" ):
                listener.exitSubqueryTableItem(self)


    class AtomTableItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.alias = None # UidContext
            self.copyFrom(ctx)

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def indexHint(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexHintContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexHintContext,i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAtomTableItem" ):
                listener.enterAtomTableItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAtomTableItem" ):
                listener.exitAtomTableItem(self)


    class TableSourcesItemContext(TableSourceItemContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.TableSourceItemContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableSourcesItem" ):
                listener.enterTableSourcesItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableSourcesItem" ):
                listener.exitTableSourcesItem(self)



    def tableSourceItem(self):

        localctx = MySqlParser.TableSourceItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 232, self.RULE_tableSourceItem)
        self._la = 0 # Token type
        try:
            self.state = 3659
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,510,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AtomTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3619
                self.tableName()
                self.state = 3625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==128:
                    self.state = 3620
                    self.match(MySqlParser.PARTITION)
                    self.state = 3621
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3622
                    self.uidList()
                    self.state = 3623
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 3631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,505,self._ctx)
                if la_ == 1:
                    self.state = 3628
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 3627
                        self.match(MySqlParser.AS)


                    self.state = 3630
                    localctx.alias = self.uid()


                self.state = 3641
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,507,self._ctx)
                if la_ == 1:
                    self.state = 3633
                    self.indexHint()
                    self.state = 3638
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,506,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 3634
                            self.match(MySqlParser.COMMA)
                            self.state = 3635
                            self.indexHint() 
                        self.state = 3640
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,506,self._ctx)



                pass

            elif la_ == 2:
                localctx = MySqlParser.SubqueryTableItemContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3648
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,508,self._ctx)
                if la_ == 1:
                    self.state = 3643
                    self.selectStatement()
                    pass

                elif la_ == 2:
                    self.state = 3644
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3645
                    localctx.parenthesisSubquery = self.selectStatement()
                    self.state = 3646
                    self.match(MySqlParser.RR_BRACKET)
                    pass


                self.state = 3651
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 3650
                    self.match(MySqlParser.AS)


                self.state = 3653
                localctx.alias = self.uid()
                pass

            elif la_ == 3:
                localctx = MySqlParser.TableSourcesItemContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3655
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3656
                self.tableSources()
                self.state = 3657
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexHintAction = None # Token
            self.keyFormat = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def FORCE(self):
            return self.getToken(MySqlParser.FORCE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def indexHintType(self):
            return self.getTypedRuleContext(MySqlParser.IndexHintTypeContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_indexHint

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHint" ):
                listener.enterIndexHint(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHint" ):
                listener.exitIndexHint(self)




    def indexHint(self):

        localctx = MySqlParser.IndexHintContext(self, self._ctx, self.state)
        self.enterRule(localctx, 234, self.RULE_indexHint)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3661
            localctx.indexHintAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==65 or _la==77 or _la==184):
                localctx.indexHintAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3662
            localctx.keyFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==80 or _la==90):
                localctx.keyFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 3665
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 3663
                self.match(MySqlParser.FOR)
                self.state = 3664
                self.indexHintType()


            self.state = 3667
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3668
            self.uidList()
            self.state = 3669
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexHintTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexHintType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexHintType" ):
                listener.enterIndexHintType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexHintType" ):
                listener.exitIndexHintType(self)




    def indexHintType(self):

        localctx = MySqlParser.IndexHintTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 236, self.RULE_indexHintType)
        try:
            self.state = 3676
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [89]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3671
                self.match(MySqlParser.JOIN)
                pass
            elif token in [123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3672
                self.match(MySqlParser.ORDER)
                self.state = 3673
                self.match(MySqlParser.BY)
                pass
            elif token in [72]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3674
                self.match(MySqlParser.GROUP)
                self.state = 3675
                self.match(MySqlParser.BY)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JoinPartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_joinPart

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class InnerJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LATERAL(self):
            return self.getToken(MySqlParser.LATERAL, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def INNER(self):
            return self.getToken(MySqlParser.INNER, 0)
        def CROSS(self):
            return self.getToken(MySqlParser.CROSS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInnerJoin" ):
                listener.enterInnerJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInnerJoin" ):
                listener.exitInnerJoin(self)


    class NaturalJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NATURAL(self):
            return self.getToken(MySqlParser.NATURAL, 0)
        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNaturalJoin" ):
                listener.enterNaturalJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNaturalJoin" ):
                listener.exitNaturalJoin(self)


    class OuterJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)
        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)
        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def OUTER(self):
            return self.getToken(MySqlParser.OUTER, 0)
        def LATERAL(self):
            return self.getToken(MySqlParser.LATERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOuterJoin" ):
                listener.enterOuterJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOuterJoin" ):
                listener.exitOuterJoin(self)


    class StraightJoinContext(JoinPartContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.JoinPartContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)
        def tableSourceItem(self):
            return self.getTypedRuleContext(MySqlParser.TableSourceItemContext,0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStraightJoin" ):
                listener.enterStraightJoin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStraightJoin" ):
                listener.exitStraightJoin(self)



    def joinPart(self):

        localctx = MySqlParser.JoinPartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 238, self.RULE_joinPart)
        self._la = 0 # Token type
        try:
            self.state = 3728
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [34, 82, 89]:
                localctx = MySqlParser.InnerJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==34 or _la==82:
                    self.state = 3678
                    _la = self._input.LA(1)
                    if not(_la==34 or _la==82):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 3681
                self.match(MySqlParser.JOIN)
                self.state = 3683
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,514,self._ctx)
                if la_ == 1:
                    self.state = 3682
                    self.match(MySqlParser.LATERAL)


                self.state = 3685
                self.tableSourceItem()
                self.state = 3693
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,515,self._ctx)
                if la_ == 1:
                    self.state = 3686
                    self.match(MySqlParser.ON)
                    self.state = 3687
                    self.expression(0)

                elif la_ == 2:
                    self.state = 3688
                    self.match(MySqlParser.USING)
                    self.state = 3689
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3690
                    self.uidList()
                    self.state = 3691
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [169]:
                localctx = MySqlParser.StraightJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3695
                self.match(MySqlParser.STRAIGHT_JOIN)
                self.state = 3696
                self.tableSourceItem()
                self.state = 3699
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,516,self._ctx)
                if la_ == 1:
                    self.state = 3697
                    self.match(MySqlParser.ON)
                    self.state = 3698
                    self.expression(0)


                pass
            elif token in [96, 147]:
                localctx = MySqlParser.OuterJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3701
                _la = self._input.LA(1)
                if not(_la==96 or _la==147):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 3703
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==125:
                    self.state = 3702
                    self.match(MySqlParser.OUTER)


                self.state = 3705
                self.match(MySqlParser.JOIN)
                self.state = 3707
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,518,self._ctx)
                if la_ == 1:
                    self.state = 3706
                    self.match(MySqlParser.LATERAL)


                self.state = 3709
                self.tableSourceItem()
                self.state = 3717
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [117]:
                    self.state = 3710
                    self.match(MySqlParser.ON)
                    self.state = 3711
                    self.expression(0)
                    pass
                elif token in [185]:
                    self.state = 3712
                    self.match(MySqlParser.USING)
                    self.state = 3713
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 3714
                    self.uidList()
                    self.state = 3715
                    self.match(MySqlParser.RR_BRACKET)
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [112]:
                localctx = MySqlParser.NaturalJoinContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3719
                self.match(MySqlParser.NATURAL)
                self.state = 3724
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==96 or _la==147:
                    self.state = 3720
                    _la = self._input.LA(1)
                    if not(_la==96 or _la==147):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 3722
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==125:
                        self.state = 3721
                        self.match(MySqlParser.OUTER)




                self.state = 3726
                self.match(MySqlParser.JOIN)
                self.state = 3727
                self.tableSourceItem()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecification(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpression(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpression

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpression" ):
                listener.enterQueryExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpression" ):
                listener.exitQueryExpression(self)




    def queryExpression(self):

        localctx = MySqlParser.QueryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 240, self.RULE_queryExpression)
        try:
            self.state = 3738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,523,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3730
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3731
                self.querySpecification()
                self.state = 3732
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3734
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3735
                self.queryExpression()
                self.state = 3736
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QueryExpressionNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_queryExpressionNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQueryExpressionNointo" ):
                listener.enterQueryExpressionNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQueryExpressionNointo" ):
                listener.exitQueryExpressionNointo(self)




    def queryExpressionNointo(self):

        localctx = MySqlParser.QueryExpressionNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 242, self.RULE_queryExpressionNointo)
        try:
            self.state = 3748
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,524,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3740
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3741
                self.querySpecificationNointo()
                self.state = 3742
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3744
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3745
                self.queryExpressionNointo()
                self.state = 3746
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def selectIntoExpression(self):
            return self.getTypedRuleContext(MySqlParser.SelectIntoExpressionContext,0)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySqlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecification" ):
                listener.enterQuerySpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecification" ):
                listener.exitQuerySpecification(self)




    def querySpecification(self):

        localctx = MySqlParser.QuerySpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 244, self.RULE_querySpecification)
        self._la = 0 # Token type
        try:
            self.state = 3808
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,541,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3750
                self.match(MySqlParser.SELECT)
                self.state = 3754
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,525,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3751
                        self.selectSpec() 
                    self.state = 3756
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,525,self._ctx)

                self.state = 3757
                self.selectElements()
                self.state = 3759
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3758
                    self.selectIntoExpression()


                self.state = 3762
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,527,self._ctx)
                if la_ == 1:
                    self.state = 3761
                    self.fromClause()


                self.state = 3765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,528,self._ctx)
                if la_ == 1:
                    self.state = 3764
                    self.groupByClause()


                self.state = 3768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 3767
                    self.havingClause()


                self.state = 3771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==674:
                    self.state = 3770
                    self.windowClause()


                self.state = 3774
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,531,self._ctx)
                if la_ == 1:
                    self.state = 3773
                    self.orderByClause()


                self.state = 3777
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,532,self._ctx)
                if la_ == 1:
                    self.state = 3776
                    self.limitClause()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3779
                self.match(MySqlParser.SELECT)
                self.state = 3783
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,533,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 3780
                        self.selectSpec() 
                    self.state = 3785
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,533,self._ctx)

                self.state = 3786
                self.selectElements()
                self.state = 3788
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,534,self._ctx)
                if la_ == 1:
                    self.state = 3787
                    self.fromClause()


                self.state = 3791
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,535,self._ctx)
                if la_ == 1:
                    self.state = 3790
                    self.groupByClause()


                self.state = 3794
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 3793
                    self.havingClause()


                self.state = 3797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==674:
                    self.state = 3796
                    self.windowClause()


                self.state = 3800
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,538,self._ctx)
                if la_ == 1:
                    self.state = 3799
                    self.orderByClause()


                self.state = 3803
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,539,self._ctx)
                if la_ == 1:
                    self.state = 3802
                    self.limitClause()


                self.state = 3806
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==86:
                    self.state = 3805
                    self.selectIntoExpression()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuerySpecificationNointoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def selectElements(self):
            return self.getTypedRuleContext(MySqlParser.SelectElementsContext,0)


        def selectSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectSpecContext,i)


        def fromClause(self):
            return self.getTypedRuleContext(MySqlParser.FromClauseContext,0)


        def groupByClause(self):
            return self.getTypedRuleContext(MySqlParser.GroupByClauseContext,0)


        def havingClause(self):
            return self.getTypedRuleContext(MySqlParser.HavingClauseContext,0)


        def windowClause(self):
            return self.getTypedRuleContext(MySqlParser.WindowClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def limitClause(self):
            return self.getTypedRuleContext(MySqlParser.LimitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_querySpecificationNointo

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterQuerySpecificationNointo" ):
                listener.enterQuerySpecificationNointo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitQuerySpecificationNointo" ):
                listener.exitQuerySpecificationNointo(self)




    def querySpecificationNointo(self):

        localctx = MySqlParser.QuerySpecificationNointoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 246, self.RULE_querySpecificationNointo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3810
            self.match(MySqlParser.SELECT)
            self.state = 3814
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,542,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3811
                    self.selectSpec() 
                self.state = 3816
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,542,self._ctx)

            self.state = 3817
            self.selectElements()
            self.state = 3819
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,543,self._ctx)
            if la_ == 1:
                self.state = 3818
                self.fromClause()


            self.state = 3822
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,544,self._ctx)
            if la_ == 1:
                self.state = 3821
                self.groupByClause()


            self.state = 3825
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==73:
                self.state = 3824
                self.havingClause()


            self.state = 3828
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==674:
                self.state = 3827
                self.windowClause()


            self.state = 3831
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,547,self._ctx)
            if la_ == 1:
                self.state = 3830
                self.orderByClause()


            self.state = 3834
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,548,self._ctx)
            if la_ == 1:
                self.state = 3833
                self.limitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionParenthesisContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionParenthesis

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionParenthesis" ):
                listener.enterUnionParenthesis(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionParenthesis" ):
                listener.exitUnionParenthesis(self)




    def unionParenthesis(self):

        localctx = MySqlParser.UnionParenthesisContext(self, self._ctx, self.state)
        self.enterRule(localctx, 248, self.RULE_unionParenthesis)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3836
            self.match(MySqlParser.UNION)
            self.state = 3838
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==49:
                self.state = 3837
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==6 or _la==49):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3840
            self.queryExpressionNointo()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.unionType = None # Token

        def UNION(self):
            return self.getToken(MySqlParser.UNION, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnionStatement" ):
                listener.enterUnionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnionStatement" ):
                listener.exitUnionStatement(self)




    def unionStatement(self):

        localctx = MySqlParser.UnionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 250, self.RULE_unionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3842
            self.match(MySqlParser.UNION)
            self.state = 3844
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6 or _la==49:
                self.state = 3843
                localctx.unionType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==6 or _la==49):
                    localctx.unionType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 3848
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [151]:
                self.state = 3846
                self.querySpecificationNointo()
                pass
            elif token in [1126]:
                self.state = 3847
                self.queryExpressionNointo()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LateralStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LATERAL(self):
            return self.getToken(MySqlParser.LATERAL, 0)

        def querySpecificationNointo(self):
            return self.getTypedRuleContext(MySqlParser.QuerySpecificationNointoContext,0)


        def queryExpressionNointo(self):
            return self.getTypedRuleContext(MySqlParser.QueryExpressionNointoContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lateralStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLateralStatement" ):
                listener.enterLateralStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLateralStatement" ):
                listener.exitLateralStatement(self)




    def lateralStatement(self):

        localctx = MySqlParser.LateralStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 252, self.RULE_lateralStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3850
            self.match(MySqlParser.LATERAL)
            self.state = 3865
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,555,self._ctx)
            if la_ == 1:
                self.state = 3851
                self.querySpecificationNointo()
                pass

            elif la_ == 2:
                self.state = 3852
                self.queryExpressionNointo()
                pass

            elif la_ == 3:
                self.state = 3853
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3856
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [151]:
                    self.state = 3854
                    self.querySpecificationNointo()
                    pass
                elif token in [1126]:
                    self.state = 3855
                    self.queryExpressionNointo()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 3858
                self.match(MySqlParser.RR_BRACKET)
                self.state = 3863
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,554,self._ctx)
                if la_ == 1:
                    self.state = 3860
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 3859
                        self.match(MySqlParser.AS)


                    self.state = 3862
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JSON_TABLE(self):
            return self.getToken(MySqlParser.JSON_TABLE, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def jsonColumnList(self):
            return self.getTypedRuleContext(MySqlParser.JsonColumnListContext,0)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonTable" ):
                listener.enterJsonTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonTable" ):
                listener.exitJsonTable(self)




    def jsonTable(self):

        localctx = MySqlParser.JsonTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 254, self.RULE_jsonTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3867
            self.match(MySqlParser.JSON_TABLE)
            self.state = 3868
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3869
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 3870
            self.match(MySqlParser.COMMA)
            self.state = 3871
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 3872
            self.match(MySqlParser.COLUMNS)
            self.state = 3873
            self.match(MySqlParser.LR_BRACKET)
            self.state = 3874
            self.jsonColumnList()
            self.state = 3875
            self.match(MySqlParser.RR_BRACKET)
            self.state = 3876
            self.match(MySqlParser.RR_BRACKET)
            self.state = 3881
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,557,self._ctx)
            if la_ == 1:
                self.state = 3878
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 3877
                    self.match(MySqlParser.AS)


                self.state = 3880
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonColumnListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def jsonColumn(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.JsonColumnContext)
            else:
                return self.getTypedRuleContext(MySqlParser.JsonColumnContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonColumnList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonColumnList" ):
                listener.enterJsonColumnList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonColumnList" ):
                listener.exitJsonColumnList(self)




    def jsonColumnList(self):

        localctx = MySqlParser.JsonColumnListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 256, self.RULE_jsonColumnList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3883
            self.jsonColumn()
            self.state = 3888
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 3884
                self.match(MySqlParser.COMMA)
                self.state = 3885
                self.jsonColumn()
                self.state = 3890
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonColumnContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def ORDINALITY(self):
            return self.getToken(MySqlParser.ORDINALITY, 0)

        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def PATH(self):
            return self.getToken(MySqlParser.PATH, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def jsonOnEmpty(self):
            return self.getTypedRuleContext(MySqlParser.JsonOnEmptyContext,0)


        def jsonOnError(self):
            return self.getTypedRuleContext(MySqlParser.JsonOnErrorContext,0)


        def NESTED(self):
            return self.getToken(MySqlParser.NESTED, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def jsonColumnList(self):
            return self.getTypedRuleContext(MySqlParser.JsonColumnListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonColumn

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonColumn" ):
                listener.enterJsonColumn(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonColumn" ):
                listener.exitJsonColumn(self)




    def jsonColumn(self):

        localctx = MySqlParser.JsonColumnContext(self, self._ctx, self.state)
        self.enterRule(localctx, 258, self.RULE_jsonColumn)
        self._la = 0 # Token type
        try:
            self.state = 3920
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,564,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 3891
                self.fullColumnName()
                self.state = 3908
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [64]:
                    self.state = 3892
                    self.match(MySqlParser.FOR)
                    self.state = 3893
                    self.match(MySqlParser.ORDINALITY)
                    pass
                elif token in [25, 152, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 237, 344, 346, 347, 429, 464, 516, 798, 799, 800, 801, 802, 803, 804, 805, 806]:
                    self.state = 3894
                    self.dataType()
                    self.state = 3906
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [283]:
                        self.state = 3895
                        self.match(MySqlParser.PATH)
                        self.state = 3896
                        self.match(MySqlParser.STRING_LITERAL)
                        self.state = 3898
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,559,self._ctx)
                        if la_ == 1:
                            self.state = 3897
                            self.jsonOnEmpty()


                        self.state = 3901
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==42 or _la==115 or _la==409:
                            self.state = 3900
                            self.jsonOnError()


                        pass
                    elif token in [59]:
                        self.state = 3903
                        self.match(MySqlParser.EXISTS)
                        self.state = 3904
                        self.match(MySqlParser.PATH)
                        self.state = 3905
                        self.match(MySqlParser.STRING_LITERAL)
                        pass
                    else:
                        raise NoViableAltException(self)

                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 3910
                self.match(MySqlParser.NESTED)
                self.state = 3912
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==283:
                    self.state = 3911
                    self.match(MySqlParser.PATH)


                self.state = 3914
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 3915
                self.match(MySqlParser.COLUMNS)
                self.state = 3916
                self.match(MySqlParser.LR_BRACKET)
                self.state = 3917
                self.jsonColumnList()
                self.state = 3918
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOnEmptyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def EMPTY(self):
            return self.getToken(MySqlParser.EMPTY, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_jsonOnEmpty

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOnEmpty" ):
                listener.enterJsonOnEmpty(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOnEmpty" ):
                listener.exitJsonOnEmpty(self)




    def jsonOnEmpty(self):

        localctx = MySqlParser.JsonOnEmptyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 260, self.RULE_jsonOnEmpty)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.state = 3922
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [409]:
                self.state = 3923
                self.match(MySqlParser.ERROR)
                pass
            elif token in [42]:
                self.state = 3924
                self.match(MySqlParser.DEFAULT)
                self.state = 3925
                self.defaultValue()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3928
            self.match(MySqlParser.ON)
            self.state = 3929
            self.match(MySqlParser.EMPTY)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOnErrorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def ERROR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ERROR)
            else:
                return self.getToken(MySqlParser.ERROR, i)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def defaultValue(self):
            return self.getTypedRuleContext(MySqlParser.DefaultValueContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_jsonOnError

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOnError" ):
                listener.enterJsonOnError(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOnError" ):
                listener.exitJsonOnError(self)




    def jsonOnError(self):

        localctx = MySqlParser.JsonOnErrorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 262, self.RULE_jsonOnError)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3935
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [115]:
                self.state = 3931
                self.match(MySqlParser.NULL_LITERAL)
                pass
            elif token in [409]:
                self.state = 3932
                self.match(MySqlParser.ERROR)
                pass
            elif token in [42]:
                self.state = 3933
                self.match(MySqlParser.DEFAULT)
                self.state = 3934
                self.defaultValue()
                pass
            else:
                raise NoViableAltException(self)

            self.state = 3937
            self.match(MySqlParser.ON)
            self.state = 3938
            self.match(MySqlParser.ERROR)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def DISTINCTROW(self):
            return self.getToken(MySqlParser.DISTINCTROW, 0)

        def HIGH_PRIORITY(self):
            return self.getToken(MySqlParser.HIGH_PRIORITY, 0)

        def STRAIGHT_JOIN(self):
            return self.getToken(MySqlParser.STRAIGHT_JOIN, 0)

        def SQL_SMALL_RESULT(self):
            return self.getToken(MySqlParser.SQL_SMALL_RESULT, 0)

        def SQL_BIG_RESULT(self):
            return self.getToken(MySqlParser.SQL_BIG_RESULT, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_CALC_FOUND_ROWS(self):
            return self.getToken(MySqlParser.SQL_CALC_FOUND_ROWS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectSpec" ):
                listener.enterSelectSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectSpec" ):
                listener.exitSelectSpec(self)




    def selectSpec(self):

        localctx = MySqlParser.SelectSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 264, self.RULE_selectSpec)
        self._la = 0 # Token type
        try:
            self.state = 3948
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6, 49, 50]:
                self.enterOuterAlt(localctx, 1)
                self.state = 3940
                _la = self._input.LA(1)
                if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 1688849860264000) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [74]:
                self.enterOuterAlt(localctx, 2)
                self.state = 3941
                self.match(MySqlParser.HIGH_PRIORITY)
                pass
            elif token in [169]:
                self.enterOuterAlt(localctx, 3)
                self.state = 3942
                self.match(MySqlParser.STRAIGHT_JOIN)
                pass
            elif token in [164]:
                self.enterOuterAlt(localctx, 4)
                self.state = 3943
                self.match(MySqlParser.SQL_SMALL_RESULT)
                pass
            elif token in [162]:
                self.enterOuterAlt(localctx, 5)
                self.state = 3944
                self.match(MySqlParser.SQL_BIG_RESULT)
                pass
            elif token in [623]:
                self.enterOuterAlt(localctx, 6)
                self.state = 3945
                self.match(MySqlParser.SQL_BUFFER_RESULT)
                pass
            elif token in [624, 625]:
                self.enterOuterAlt(localctx, 7)
                self.state = 3946
                _la = self._input.LA(1)
                if not(_la==624 or _la==625):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [163]:
                self.enterOuterAlt(localctx, 8)
                self.state = 3947
                self.match(MySqlParser.SQL_CALC_FOUND_ROWS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.star = None # Token

        def selectElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectElementContext,i)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectElements

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectElements" ):
                listener.enterSelectElements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectElements" ):
                listener.exitSelectElements(self)




    def selectElements(self):

        localctx = MySqlParser.SelectElementsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 266, self.RULE_selectElements)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 3952
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,568,self._ctx)
            if la_ == 1:
                self.state = 3950
                localctx.star = self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                self.state = 3951
                self.selectElement()
                pass


            self.state = 3958
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,569,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 3954
                    self.match(MySqlParser.COMMA)
                    self.state = 3955
                    self.selectElement() 
                self.state = 3960
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,569,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectElement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectExpressionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectExpressionElement" ):
                listener.enterSelectExpressionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectExpressionElement" ):
                listener.exitSelectExpressionElement(self)


    class SelectFunctionElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFunctionElement" ):
                listener.enterSelectFunctionElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFunctionElement" ):
                listener.exitSelectFunctionElement(self)


    class SelectStarElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectStarElement" ):
                listener.enterSelectStarElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectStarElement" ):
                listener.exitSelectStarElement(self)


    class SelectColumnElementContext(SelectElementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectElementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectColumnElement" ):
                listener.enterSelectColumnElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectColumnElement" ):
                listener.exitSelectColumnElement(self)



    def selectElement(self):

        localctx = MySqlParser.SelectElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 268, self.RULE_selectElement)
        self._la = 0 # Token type
        try:
            self.state = 3990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,577,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectStarElementContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3961
                self.fullId()
                self.state = 3962
                self.match(MySqlParser.DOT)
                self.state = 3963
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectColumnElementContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 3965
                self.fullColumnName()
                self.state = 3970
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,571,self._ctx)
                if la_ == 1:
                    self.state = 3967
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 3966
                        self.match(MySqlParser.AS)


                    self.state = 3969
                    self.uid()


                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectFunctionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 3972
                self.functionCall()
                self.state = 3977
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,573,self._ctx)
                if la_ == 1:
                    self.state = 3974
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 3973
                        self.match(MySqlParser.AS)


                    self.state = 3976
                    self.uid()


                pass

            elif la_ == 4:
                localctx = MySqlParser.SelectExpressionElementContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 3981
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,574,self._ctx)
                if la_ == 1:
                    self.state = 3979
                    self.match(MySqlParser.LOCAL_ID)
                    self.state = 3980
                    self.match(MySqlParser.VAR_ASSIGN)


                self.state = 3983
                self.expression(0)
                self.state = 3988
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,576,self._ctx)
                if la_ == 1:
                    self.state = 3985
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==12:
                        self.state = 3984
                        self.match(MySqlParser.AS)


                    self.state = 3987
                    self.uid()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectIntoExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_selectIntoExpression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SelectIntoVariablesContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def assignmentField(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.AssignmentFieldContext)
            else:
                return self.getTypedRuleContext(MySqlParser.AssignmentFieldContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoVariables" ):
                listener.enterSelectIntoVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoVariables" ):
                listener.exitSelectIntoVariables(self)


    class SelectIntoTextFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.filename = None # Token
            self.charset = None # CharsetNameContext
            self.fieldsFormat = None # Token
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def OUTFILE(self):
            return self.getToken(MySqlParser.OUTFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def LINES(self):
            return self.getToken(MySqlParser.LINES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def selectFieldsInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectFieldsIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectFieldsIntoContext,i)

        def selectLinesInto(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SelectLinesIntoContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SelectLinesIntoContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoTextFile" ):
                listener.enterSelectIntoTextFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoTextFile" ):
                listener.exitSelectIntoTextFile(self)


    class SelectIntoDumpFileContext(SelectIntoExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SelectIntoExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectIntoDumpFile" ):
                listener.enterSelectIntoDumpFile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectIntoDumpFile" ):
                listener.exitSelectIntoDumpFile(self)



    def selectIntoExpression(self):

        localctx = MySqlParser.SelectIntoExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 270, self.RULE_selectIntoExpression)
        self._la = 0 # Token type
        try:
            self.state = 4028
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,584,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SelectIntoVariablesContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 3992
                self.match(MySqlParser.INTO)
                self.state = 3993
                self.assignmentField()
                self.state = 3998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 3994
                    self.match(MySqlParser.COMMA)
                    self.state = 3995
                    self.assignmentField()
                    self.state = 4000
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SelectIntoDumpFileContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4001
                self.match(MySqlParser.INTO)
                self.state = 4002
                self.match(MySqlParser.DUMPFILE)
                self.state = 4003
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 3:
                localctx = MySqlParser.SelectIntoTextFileContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4004
                self.match(MySqlParser.INTO)
                self.state = 4005
                self.match(MySqlParser.OUTFILE)
                self.state = 4006
                localctx.filename = self.match(MySqlParser.STRING_LITERAL)
                self.state = 4010
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25:
                    self.state = 4007
                    self.match(MySqlParser.CHARACTER)
                    self.state = 4008
                    self.match(MySqlParser.SET)
                    self.state = 4009
                    localctx.charset = self.charsetName()


                self.state = 4018
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,581,self._ctx)
                if la_ == 1:
                    self.state = 4012
                    localctx.fieldsFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==363 or _la==425):
                        localctx.fieldsFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 4014 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4013
                        self.selectFieldsInto()
                        self.state = 4016 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==56 or _la==57 or _la==121 or _la==171):
                            break



                self.state = 4026
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==100:
                    self.state = 4020
                    self.match(MySqlParser.LINES)
                    self.state = 4022 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4021
                        self.selectLinesInto()
                        self.state = 4024 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not (_la==167 or _la==171):
                            break



                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectFieldsIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.terminationField = None # Token
            self.enclosion = None # Token
            self.escaping = None # Token

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ENCLOSED(self):
            return self.getToken(MySqlParser.ENCLOSED, 0)

        def OPTIONALLY(self):
            return self.getToken(MySqlParser.OPTIONALLY, 0)

        def ESCAPED(self):
            return self.getToken(MySqlParser.ESCAPED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectFieldsInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectFieldsInto" ):
                listener.enterSelectFieldsInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectFieldsInto" ):
                listener.exitSelectFieldsInto(self)




    def selectFieldsInto(self):

        localctx = MySqlParser.SelectFieldsIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 272, self.RULE_selectFieldsInto)
        self._la = 0 # Token type
        try:
            self.state = 4042
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [171]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4030
                self.match(MySqlParser.TERMINATED)
                self.state = 4031
                self.match(MySqlParser.BY)
                self.state = 4032
                localctx.terminationField = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [56, 121]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4034
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==121:
                    self.state = 4033
                    self.match(MySqlParser.OPTIONALLY)


                self.state = 4036
                self.match(MySqlParser.ENCLOSED)
                self.state = 4037
                self.match(MySqlParser.BY)
                self.state = 4038
                localctx.enclosion = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [57]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4039
                self.match(MySqlParser.ESCAPED)
                self.state = 4040
                self.match(MySqlParser.BY)
                self.state = 4041
                localctx.escaping = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SelectLinesIntoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.starting = None # Token
            self.terminationLine = None # Token

        def STARTING(self):
            return self.getToken(MySqlParser.STARTING, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def TERMINATED(self):
            return self.getToken(MySqlParser.TERMINATED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_selectLinesInto

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSelectLinesInto" ):
                listener.enterSelectLinesInto(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSelectLinesInto" ):
                listener.exitSelectLinesInto(self)




    def selectLinesInto(self):

        localctx = MySqlParser.SelectLinesIntoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 274, self.RULE_selectLinesInto)
        try:
            self.state = 4050
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [167]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4044
                self.match(MySqlParser.STARTING)
                self.state = 4045
                self.match(MySqlParser.BY)
                self.state = 4046
                localctx.starting = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [171]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4047
                self.match(MySqlParser.TERMINATED)
                self.state = 4048
                self.match(MySqlParser.BY)
                self.state = 4049
                localctx.terminationLine = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FromClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.whereExpr = None # ExpressionContext

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def tableSources(self):
            return self.getTypedRuleContext(MySqlParser.TableSourcesContext,0)


        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fromClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFromClause" ):
                listener.enterFromClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFromClause" ):
                listener.exitFromClause(self)




    def fromClause(self):

        localctx = MySqlParser.FromClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 276, self.RULE_fromClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4054
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 4052
                self.match(MySqlParser.FROM)
                self.state = 4053
                self.tableSources()


            self.state = 4058
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==188:
                self.state = 4056
                self.match(MySqlParser.WHERE)
                self.state = 4057
                localctx.whereExpr = self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def groupByItem(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.GroupByItemContext)
            else:
                return self.getTypedRuleContext(MySqlParser.GroupByItemContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByClause" ):
                listener.enterGroupByClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByClause" ):
                listener.exitGroupByClause(self)




    def groupByClause(self):

        localctx = MySqlParser.GroupByClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 278, self.RULE_groupByClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4060
            self.match(MySqlParser.GROUP)
            self.state = 4061
            self.match(MySqlParser.BY)
            self.state = 4062
            self.groupByItem()
            self.state = 4067
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,590,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4063
                    self.match(MySqlParser.COMMA)
                    self.state = 4064
                    self.groupByItem() 
                self.state = 4069
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,590,self._ctx)

            self.state = 4072
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,591,self._ctx)
            if la_ == 1:
                self.state = 4070
                self.match(MySqlParser.WITH)
                self.state = 4071
                self.match(MySqlParser.ROLLUP)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HavingClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.havingExpr = None # ExpressionContext

        def HAVING(self):
            return self.getToken(MySqlParser.HAVING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_havingClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHavingClause" ):
                listener.enterHavingClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHavingClause" ):
                listener.exitHavingClause(self)




    def havingClause(self):

        localctx = MySqlParser.HavingClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 280, self.RULE_havingClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4074
            self.match(MySqlParser.HAVING)
            self.state = 4075
            localctx.havingExpr = self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WINDOW(self):
            return self.getToken(MySqlParser.WINDOW, 0)

        def windowName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.WindowNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.WindowNameContext,i)


        def AS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AS)
            else:
                return self.getToken(MySqlParser.AS, i)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def windowSpec(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.WindowSpecContext)
            else:
                return self.getTypedRuleContext(MySqlParser.WindowSpecContext,i)


        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_windowClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowClause" ):
                listener.enterWindowClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowClause" ):
                listener.exitWindowClause(self)




    def windowClause(self):

        localctx = MySqlParser.WindowClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 282, self.RULE_windowClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4077
            self.match(MySqlParser.WINDOW)
            self.state = 4078
            self.windowName()
            self.state = 4079
            self.match(MySqlParser.AS)
            self.state = 4080
            self.match(MySqlParser.LR_BRACKET)
            self.state = 4081
            self.windowSpec()
            self.state = 4082
            self.match(MySqlParser.RR_BRACKET)
            self.state = 4092
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,592,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 4083
                    self.match(MySqlParser.COMMA)
                    self.state = 4084
                    self.windowName()
                    self.state = 4085
                    self.match(MySqlParser.AS)
                    self.state = 4086
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 4087
                    self.windowSpec()
                    self.state = 4088
                    self.match(MySqlParser.RR_BRACKET) 
                self.state = 4094
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,592,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GroupByItemContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.order = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_groupByItem

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGroupByItem" ):
                listener.enterGroupByItem(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGroupByItem" ):
                listener.exitGroupByItem(self)




    def groupByItem(self):

        localctx = MySqlParser.GroupByItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 284, self.RULE_groupByItem)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4095
            self.expression(0)
            self.state = 4097
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,593,self._ctx)
            if la_ == 1:
                self.state = 4096
                localctx.order = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==13 or _la==45):
                    localctx.order = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.offset = None # LimitClauseAtomContext
            self.limit = None # LimitClauseAtomContext

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def limitClauseAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LimitClauseAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LimitClauseAtomContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_limitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClause" ):
                listener.enterLimitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClause" ):
                listener.exitLimitClause(self)




    def limitClause(self):

        localctx = MySqlParser.LimitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 286, self.RULE_limitClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4099
            self.match(MySqlParser.LIMIT)
            self.state = 4110
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,595,self._ctx)
            if la_ == 1:
                self.state = 4103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,594,self._ctx)
                if la_ == 1:
                    self.state = 4100
                    localctx.offset = self.limitClauseAtom()
                    self.state = 4101
                    self.match(MySqlParser.COMMA)


                self.state = 4105
                localctx.limit = self.limitClauseAtom()
                pass

            elif la_ == 2:
                self.state = 4106
                localctx.limit = self.limitClauseAtom()
                self.state = 4107
                self.match(MySqlParser.OFFSET)
                self.state = 4108
                localctx.offset = self.limitClauseAtom()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LimitClauseAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_limitClauseAtom

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLimitClauseAtom" ):
                listener.enterLimitClauseAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLimitClauseAtom" ):
                listener.exitLimitClauseAtom(self)




    def limitClauseAtom(self):

        localctx = MySqlParser.LimitClauseAtomContext(self, self._ctx, self.state)
        self.enterRule(localctx, 288, self.RULE_limitClauseAtom)
        try:
            self.state = 4115
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131, 1132, 1133, 1142, 1144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4112
                self.decimalLiteral()
                pass
            elif token in [1153, 1154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4113
                self.mysqlVariable()
                pass
            elif token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1141, 1149, 1150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 4114
                self.simpleId()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionMode(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionModeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionModeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartTransaction" ):
                listener.enterStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartTransaction" ):
                listener.exitStartTransaction(self)




    def startTransaction(self):

        localctx = MySqlParser.StartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 290, self.RULE_startTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4117
            self.match(MySqlParser.START)
            self.state = 4118
            self.match(MySqlParser.TRANSACTION)
            self.state = 4127
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==133 or _la==190:
                self.state = 4119
                self.transactionMode()
                self.state = 4124
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4120
                    self.match(MySqlParser.COMMA)
                    self.state = 4121
                    self.transactionMode()
                    self.state = 4126
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BeginWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_beginWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBeginWork" ):
                listener.enterBeginWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBeginWork" ):
                listener.exitBeginWork(self)




    def beginWork(self):

        localctx = MySqlParser.BeginWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 292, self.RULE_beginWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4129
            self.match(MySqlParser.BEGIN)
            self.state = 4131
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==676:
                self.state = 4130
                self.match(MySqlParser.WORK)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_commitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCommitWork" ):
                listener.enterCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCommitWork" ):
                listener.exitCommitWork(self)




    def commitWork(self):

        localctx = MySqlParser.CommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 294, self.RULE_commitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4133
            self.match(MySqlParser.COMMIT)
            self.state = 4135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==676:
                self.state = 4134
                self.match(MySqlParser.WORK)


            self.state = 4142
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 4137
                self.match(MySqlParser.AND)
                self.state = 4139
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==519:
                    self.state = 4138
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 4141
                self.match(MySqlParser.CHAIN)


            self.state = 4148
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,604,self._ctx)
            if la_ == 1:
                self.state = 4145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==519:
                    self.state = 4144
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 4147
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nochain = None # Token
            self.norelease = None # Token

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def NO(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NO)
            else:
                return self.getToken(MySqlParser.NO, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackWork" ):
                listener.enterRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackWork" ):
                listener.exitRollbackWork(self)




    def rollbackWork(self):

        localctx = MySqlParser.RollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 296, self.RULE_rollbackWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4150
            self.match(MySqlParser.ROLLBACK)
            self.state = 4152
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==676:
                self.state = 4151
                self.match(MySqlParser.WORK)


            self.state = 4159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==10:
                self.state = 4154
                self.match(MySqlParser.AND)
                self.state = 4156
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==519:
                    self.state = 4155
                    localctx.nochain = self.match(MySqlParser.NO)


                self.state = 4158
                self.match(MySqlParser.CHAIN)


            self.state = 4165
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,609,self._ctx)
            if la_ == 1:
                self.state = 4162
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==519:
                    self.state = 4161
                    localctx.norelease = self.match(MySqlParser.NO)


                self.state = 4164
                self.match(MySqlParser.RELEASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SavepointStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_savepointStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSavepointStatement" ):
                listener.enterSavepointStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSavepointStatement" ):
                listener.exitSavepointStatement(self)




    def savepointStatement(self):

        localctx = MySqlParser.SavepointStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 298, self.RULE_savepointStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4167
            self.match(MySqlParser.SAVEPOINT)
            self.state = 4168
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RollbackStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_rollbackStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRollbackStatement" ):
                listener.enterRollbackStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRollbackStatement" ):
                listener.exitRollbackStatement(self)




    def rollbackStatement(self):

        localctx = MySqlParser.RollbackStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 300, self.RULE_rollbackStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4170
            self.match(MySqlParser.ROLLBACK)
            self.state = 4172
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==676:
                self.state = 4171
                self.match(MySqlParser.WORK)


            self.state = 4174
            self.match(MySqlParser.TO)
            self.state = 4176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,611,self._ctx)
            if la_ == 1:
                self.state = 4175
                self.match(MySqlParser.SAVEPOINT)


            self.state = 4178
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReleaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RELEASE(self):
            return self.getToken(MySqlParser.RELEASE, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_releaseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReleaseStatement" ):
                listener.enterReleaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReleaseStatement" ):
                listener.exitReleaseStatement(self)




    def releaseStatement(self):

        localctx = MySqlParser.ReleaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 302, self.RULE_releaseStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4180
            self.match(MySqlParser.RELEASE)
            self.state = 4181
            self.match(MySqlParser.SAVEPOINT)
            self.state = 4182
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def lockTableElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LockTableElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LockTableElementContext,i)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def waitNowaitClause(self):
            return self.getTypedRuleContext(MySqlParser.WaitNowaitClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_lockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTables" ):
                listener.enterLockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTables" ):
                listener.exitLockTables(self)




    def lockTables(self):

        localctx = MySqlParser.LockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 304, self.RULE_lockTables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4184
            self.match(MySqlParser.LOCK)
            self.state = 4185
            _la = self._input.LA(1)
            if not(_la==170 or _la==737):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4186
            self.lockTableElement()
            self.state = 4191
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4187
                self.match(MySqlParser.COMMA)
                self.state = 4188
                self.lockTableElement()
                self.state = 4193
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4195
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==525 or _la==672:
                self.state = 4194
                self.waitNowaitClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UnlockTablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unlockTables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnlockTables" ):
                listener.enterUnlockTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnlockTables" ):
                listener.exitUnlockTables(self)




    def unlockTables(self):

        localctx = MySqlParser.UnlockTablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 306, self.RULE_unlockTables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4197
            self.match(MySqlParser.UNLOCK)
            self.state = 4198
            self.match(MySqlParser.TABLES)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetAutocommitStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.autocommitValue = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setAutocommitStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommitStatement" ):
                listener.enterSetAutocommitStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommitStatement" ):
                listener.exitSetAutocommitStatement(self)




    def setAutocommitStatement(self):

        localctx = MySqlParser.SetAutocommitStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 308, self.RULE_setAutocommitStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4200
            self.match(MySqlParser.SET)
            self.state = 4201
            self.match(MySqlParser.AUTOCOMMIT)
            self.state = 4202
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 4203
            localctx.autocommitValue = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==1131 or _la==1132):
                localctx.autocommitValue = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetTransactionStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.transactionContext = None # Token

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def transactionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TransactionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TransactionOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_setTransactionStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransactionStatement" ):
                listener.enterSetTransactionStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransactionStatement" ):
                listener.exitSetTransactionStatement(self)




    def setTransactionStatement(self):

        localctx = MySqlParser.SetTransactionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 310, self.RULE_setTransactionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4205
            self.match(MySqlParser.SET)
            self.state = 4207
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==437 or _la==607:
                self.state = 4206
                localctx.transactionContext = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==437 or _la==607):
                    localctx.transactionContext = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 4209
            self.match(MySqlParser.TRANSACTION)
            self.state = 4210
            self.transactionOption()
            self.state = 4215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4211
                self.match(MySqlParser.COMMA)
                self.state = 4212
                self.transactionOption()
                self.state = 4217
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionModeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionMode

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionMode" ):
                listener.enterTransactionMode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionMode" ):
                listener.exitTransactionMode(self)




    def transactionMode(self):

        localctx = MySqlParser.TransactionModeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 312, self.RULE_transactionMode)
        try:
            self.state = 4225
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,616,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4218
                self.match(MySqlParser.WITH)
                self.state = 4219
                self.match(MySqlParser.CONSISTENT)
                self.state = 4220
                self.match(MySqlParser.SNAPSHOT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4221
                self.match(MySqlParser.READ)
                self.state = 4222
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4223
                self.match(MySqlParser.READ)
                self.state = 4224
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockTableElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def lockAction(self):
            return self.getTypedRuleContext(MySqlParser.LockActionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockTableElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockTableElement" ):
                listener.enterLockTableElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockTableElement" ):
                listener.exitLockTableElement(self)




    def lockTableElement(self):

        localctx = MySqlParser.LockTableElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 314, self.RULE_lockTableElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4227
            self.tableName()
            self.state = 4232
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285556736) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4229
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 4228
                    self.match(MySqlParser.AS)


                self.state = 4231
                self.uid()


            self.state = 4234
            self.lockAction()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LockActionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def LOW_PRIORITY(self):
            return self.getToken(MySqlParser.LOW_PRIORITY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lockAction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLockAction" ):
                listener.enterLockAction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLockAction" ):
                listener.exitLockAction(self)




    def lockAction(self):

        localctx = MySqlParser.LockActionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 316, self.RULE_lockAction)
        self._la = 0 # Token type
        try:
            self.state = 4244
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [133]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4236
                self.match(MySqlParser.READ)
                self.state = 4238
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==472:
                    self.state = 4237
                    self.match(MySqlParser.LOCAL)


                pass
            elif token in [105, 191]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4241
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 4240
                    self.match(MySqlParser.LOW_PRIORITY)


                self.state = 4243
                self.match(MySqlParser.WRITE)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def transactionLevel(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelContext,0)


        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def WRITE(self):
            return self.getToken(MySqlParser.WRITE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionOption" ):
                listener.enterTransactionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionOption" ):
                listener.exitTransactionOption(self)




    def transactionOption(self):

        localctx = MySqlParser.TransactionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 318, self.RULE_transactionOption)
        try:
            self.state = 4253
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,622,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4246
                self.match(MySqlParser.ISOLATION)
                self.state = 4247
                self.match(MySqlParser.LEVEL)
                self.state = 4248
                self.transactionLevel()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4249
                self.match(MySqlParser.READ)
                self.state = 4250
                self.match(MySqlParser.WRITE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4251
                self.match(MySqlParser.READ)
                self.state = 4252
                self.match(MySqlParser.ONLY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevel

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevel" ):
                listener.enterTransactionLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevel" ):
                listener.exitTransactionLevel(self)




    def transactionLevel(self):

        localctx = MySqlParser.TransactionLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 320, self.RULE_transactionLevel)
        try:
            self.state = 4262
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,623,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4255
                self.match(MySqlParser.REPEATABLE)
                self.state = 4256
                self.match(MySqlParser.READ)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4257
                self.match(MySqlParser.READ)
                self.state = 4258
                self.match(MySqlParser.COMMITTED)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 4259
                self.match(MySqlParser.READ)
                self.state = 4260
                self.match(MySqlParser.UNCOMMITTED)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 4261
                self.match(MySqlParser.SERIALIZABLE)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def masterOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.MasterOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.MasterOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_changeMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeMaster" ):
                listener.enterChangeMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeMaster" ):
                listener.exitChangeMaster(self)




    def changeMaster(self):

        localctx = MySqlParser.ChangeMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 322, self.RULE_changeMaster)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4264
            self.match(MySqlParser.CHANGE)
            self.state = 4265
            self.match(MySqlParser.MASTER)
            self.state = 4266
            self.match(MySqlParser.TO)
            self.state = 4267
            self.masterOption()
            self.state = 4272
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4268
                self.match(MySqlParser.COMMA)
                self.state = 4269
                self.masterOption()
                self.state = 4274
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 4275
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChangeReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHANGE(self):
            return self.getToken(MySqlParser.CHANGE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def replicationFilter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ReplicationFilterContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ReplicationFilterContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_changeReplicationFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChangeReplicationFilter" ):
                listener.enterChangeReplicationFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChangeReplicationFilter" ):
                listener.exitChangeReplicationFilter(self)




    def changeReplicationFilter(self):

        localctx = MySqlParser.ChangeReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 324, self.RULE_changeReplicationFilter)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4278
            self.match(MySqlParser.CHANGE)
            self.state = 4279
            self.match(MySqlParser.REPLICATION)
            self.state = 4280
            self.match(MySqlParser.FILTER)
            self.state = 4281
            self.replicationFilter()
            self.state = 4286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4282
                self.match(MySqlParser.COMMA)
                self.state = 4283
                self.replicationFilter()
                self.state = 4288
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PurgeBinaryLogsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.purgeFormat = None # Token
            self.fileName = None # Token
            self.timeValue = None # Token

        def PURGE(self):
            return self.getToken(MySqlParser.PURGE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def BEFORE(self):
            return self.getToken(MySqlParser.BEFORE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_purgeBinaryLogs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPurgeBinaryLogs" ):
                listener.enterPurgeBinaryLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPurgeBinaryLogs" ):
                listener.exitPurgeBinaryLogs(self)




    def purgeBinaryLogs(self):

        localctx = MySqlParser.PurgeBinaryLogsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 326, self.RULE_purgeBinaryLogs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4289
            self.match(MySqlParser.PURGE)
            self.state = 4290
            localctx.purgeFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==224 or _la==475):
                localctx.purgeFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4291
            self.match(MySqlParser.LOGS)
            self.state = 4296
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [173]:
                self.state = 4292
                self.match(MySqlParser.TO)
                self.state = 4293
                localctx.fileName = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [15]:
                self.state = 4294
                self.match(MySqlParser.BEFORE)
                self.state = 4295
                localctx.timeValue = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetMasterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetMaster

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetMaster" ):
                listener.enterResetMaster(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetMaster" ):
                listener.exitResetMaster(self)




    def resetMaster(self):

        localctx = MySqlParser.ResetMasterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 328, self.RULE_resetMaster)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4298
            self.match(MySqlParser.RESET)
            self.state = 4299
            self.match(MySqlParser.MASTER)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_resetSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetSlave" ):
                listener.enterResetSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetSlave" ):
                listener.exitResetSlave(self)




    def resetSlave(self):

        localctx = MySqlParser.ResetSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 330, self.RULE_resetSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4301
            self.match(MySqlParser.RESET)
            self.state = 4302
            self.match(MySqlParser.SLAVE)
            self.state = 4304
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==6:
                self.state = 4303
                self.match(MySqlParser.ALL)


            self.state = 4307
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 4306
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def untilOption(self):
            return self.getTypedRuleContext(MySqlParser.UntilOptionContext,0)


        def connectionOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConnectionOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConnectionOptionContext,i)


        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_startSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartSlave" ):
                listener.enterStartSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartSlave" ):
                listener.exitStartSlave(self)




    def startSlave(self):

        localctx = MySqlParser.StartSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 332, self.RULE_startSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4309
            self.match(MySqlParser.START)
            self.state = 4310
            self.match(MySqlParser.SLAVE)
            self.state = 4319
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460 or _la==626:
                self.state = 4311
                self.threadType()
                self.state = 4316
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4312
                    self.match(MySqlParser.COMMA)
                    self.state = 4313
                    self.threadType()
                    self.state = 4318
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



            self.state = 4323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==661:
                self.state = 4321
                self.match(MySqlParser.UNTIL)
                self.state = 4322
                self.untilOption()


            self.state = 4328
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==389 or _la==549 or _la==553 or _la==663:
                self.state = 4325
                self.connectionOption()
                self.state = 4330
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4332
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 4331
                self.channelOption()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopSlaveContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def threadType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ThreadTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ThreadTypeContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopSlave

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopSlave" ):
                listener.enterStopSlave(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopSlave" ):
                listener.exitStopSlave(self)




    def stopSlave(self):

        localctx = MySqlParser.StopSlaveContext(self, self._ctx, self.state)
        self.enterRule(localctx, 334, self.RULE_stopSlave)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4334
            self.match(MySqlParser.STOP)
            self.state = 4335
            self.match(MySqlParser.SLAVE)
            self.state = 4344
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==460 or _la==626:
                self.state = 4336
                self.threadType()
                self.state = 4341
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4337
                    self.match(MySqlParser.COMMA)
                    self.state = 4338
                    self.threadType()
                    self.state = 4343
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_startGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStartGroupReplication" ):
                listener.enterStartGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStartGroupReplication" ):
                listener.exitStartGroupReplication(self)




    def startGroupReplication(self):

        localctx = MySqlParser.StartGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 336, self.RULE_startGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4346
            self.match(MySqlParser.START)
            self.state = 4347
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StopGroupReplicationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stopGroupReplication

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStopGroupReplication" ):
                listener.enterStopGroupReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStopGroupReplication" ):
                listener.exitStopGroupReplication(self)




    def stopGroupReplication(self):

        localctx = MySqlParser.StopGroupReplicationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 338, self.RULE_stopGroupReplication)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4349
            self.match(MySqlParser.STOP)
            self.state = 4350
            self.match(MySqlParser.GROUP_REPLICATION)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_masterOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class MasterStringOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def stringMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.StringMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterStringOption" ):
                listener.enterMasterStringOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterStringOption" ):
                listener.exitMasterStringOption(self)


    class MasterRealOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterRealOption" ):
                listener.enterMasterRealOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterRealOption" ):
                listener.exitMasterRealOption(self)


    class MasterBoolOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.boolVal = None # Token
            self.copyFrom(ctx)

        def boolMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.BoolMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)
        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterBoolOption" ):
                listener.enterMasterBoolOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterBoolOption" ):
                listener.exitMasterBoolOption(self)


    class MasterUidListOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterUidListOption" ):
                listener.enterMasterUidListOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterUidListOption" ):
                listener.exitMasterUidListOption(self)


    class MasterDecimalOptionContext(MasterOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.MasterOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalMasterOption(self):
            return self.getTypedRuleContext(MySqlParser.DecimalMasterOptionContext,0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterDecimalOption" ):
                listener.enterMasterDecimalOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterDecimalOption" ):
                listener.exitMasterDecimalOption(self)



    def masterOption(self):

        localctx = MySqlParser.MasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 340, self.RULE_masterOption)
        self._la = 0 # Token type
        try:
            self.state = 4381
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [106, 480, 481, 483, 487, 488, 489, 490, 491, 492, 493, 494, 495, 573]:
                localctx = MySqlParser.MasterStringOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4352
                self.stringMasterOption()
                self.state = 4353
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4354
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [477, 478, 482, 484, 485, 574]:
                localctx = MySqlParser.MasterDecimalOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4356
                self.decimalMasterOption()
                self.state = 4357
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4358
                self.decimalLiteral()
                pass
            elif token in [107, 476, 486]:
                localctx = MySqlParser.MasterBoolOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4360
                self.boolMasterOption()
                self.state = 4361
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4362
                localctx.boolVal = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==1131 or _la==1132):
                    localctx.boolVal = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [479]:
                localctx = MySqlParser.MasterRealOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4364
                self.match(MySqlParser.MASTER_HEARTBEAT_PERIOD)
                self.state = 4365
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4366
                self.match(MySqlParser.REAL_LITERAL)
                pass
            elif token in [447]:
                localctx = MySqlParser.MasterUidListOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4367
                self.match(MySqlParser.IGNORE_SERVER_IDS)
                self.state = 4368
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4369
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4378
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                    self.state = 4370
                    self.uid()
                    self.state = 4375
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 4371
                        self.match(MySqlParser.COMMA)
                        self.state = 4372
                        self.uid()
                        self.state = 4377
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 4380
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_BIND(self):
            return self.getToken(MySqlParser.MASTER_BIND, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_stringMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringMasterOption" ):
                listener.enterStringMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringMasterOption" ):
                listener.exitStringMasterOption(self)




    def stringMasterOption(self):

        localctx = MySqlParser.StringMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 342, self.RULE_stringMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4383
            _la = self._input.LA(1)
            if not(_la==106 or (((_la - 480)) & ~0x3f) == 0 and ((1 << (_la - 480)) & 65419) != 0 or _la==573):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalMasterOption" ):
                listener.enterDecimalMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalMasterOption" ):
                listener.exitDecimalMasterOption(self)




    def decimalMasterOption(self):

        localctx = MySqlParser.DecimalMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 344, self.RULE_decimalMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4385
            _la = self._input.LA(1)
            if not((((_la - 477)) & ~0x3f) == 0 and ((1 << (_la - 477)) & 419) != 0 or _la==574):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BoolMasterOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_VERIFY_SERVER_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_VERIFY_SERVER_CERT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_boolMasterOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBoolMasterOption" ):
                listener.enterBoolMasterOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBoolMasterOption" ):
                listener.exitBoolMasterOption(self)




    def boolMasterOption(self):

        localctx = MySqlParser.BoolMasterOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 346, self.RULE_boolMasterOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4387
            _la = self._input.LA(1)
            if not(_la==107 or _la==476 or _la==486):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChannelOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_channelOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelOption" ):
                listener.enterChannelOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelOption" ):
                listener.exitChannelOption(self)




    def channelOption(self):

        localctx = MySqlParser.ChannelOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 348, self.RULE_channelOption)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4389
            self.match(MySqlParser.FOR)
            self.state = 4390
            self.match(MySqlParser.CHANNEL)
            self.state = 4391
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReplicationFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_replicationFilter

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class WildIgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildIgnoreTableReplication" ):
                listener.enterWildIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildIgnoreTableReplication" ):
                listener.exitWildIgnoreTableReplication(self)


    class DoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoTableReplication" ):
                listener.enterDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoTableReplication" ):
                listener.exitDoTableReplication(self)


    class IgnoreTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreTableReplication" ):
                listener.enterIgnoreTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreTableReplication" ):
                listener.exitIgnoreTableReplication(self)


    class RewriteDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def tablePair(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TablePairContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TablePairContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRewriteDbReplication" ):
                listener.enterRewriteDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRewriteDbReplication" ):
                listener.exitRewriteDbReplication(self)


    class DoDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDoDbReplication" ):
                listener.enterDoDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDoDbReplication" ):
                listener.exitDoDbReplication(self)


    class IgnoreDbReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIgnoreDbReplication" ):
                listener.enterIgnoreDbReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIgnoreDbReplication" ):
                listener.exitIgnoreDbReplication(self)


    class WildDoTableReplicationContext(ReplicationFilterContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ReplicationFilterContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def simpleStrings(self):
            return self.getTypedRuleContext(MySqlParser.SimpleStringsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWildDoTableReplication" ):
                listener.enterWildDoTableReplication(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWildDoTableReplication" ):
                listener.exitWildDoTableReplication(self)



    def replicationFilter(self):

        localctx = MySqlParser.ReplicationFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 350, self.RULE_replicationFilter)
        self._la = 0 # Token type
        try:
            self.state = 4442
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [579]:
                localctx = MySqlParser.DoDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4393
                self.match(MySqlParser.REPLICATE_DO_DB)
                self.state = 4394
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4395
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4396
                self.uidList()
                self.state = 4397
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [581]:
                localctx = MySqlParser.IgnoreDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4399
                self.match(MySqlParser.REPLICATE_IGNORE_DB)
                self.state = 4400
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4401
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4402
                self.uidList()
                self.state = 4403
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [580]:
                localctx = MySqlParser.DoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4405
                self.match(MySqlParser.REPLICATE_DO_TABLE)
                self.state = 4406
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4407
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4408
                self.tables()
                self.state = 4409
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [582]:
                localctx = MySqlParser.IgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4411
                self.match(MySqlParser.REPLICATE_IGNORE_TABLE)
                self.state = 4412
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4413
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4414
                self.tables()
                self.state = 4415
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [584]:
                localctx = MySqlParser.WildDoTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4417
                self.match(MySqlParser.REPLICATE_WILD_DO_TABLE)
                self.state = 4418
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4419
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4420
                self.simpleStrings()
                self.state = 4421
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [585]:
                localctx = MySqlParser.WildIgnoreTableReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4423
                self.match(MySqlParser.REPLICATE_WILD_IGNORE_TABLE)
                self.state = 4424
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4425
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4426
                self.simpleStrings()
                self.state = 4427
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [583]:
                localctx = MySqlParser.RewriteDbReplicationContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 4429
                self.match(MySqlParser.REPLICATE_REWRITE_DB)
                self.state = 4430
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4431
                self.match(MySqlParser.LR_BRACKET)
                self.state = 4432
                self.tablePair()
                self.state = 4437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4433
                    self.match(MySqlParser.COMMA)
                    self.state = 4434
                    self.tablePair()
                    self.state = 4439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4440
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablePairContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.firstTable = None # TableNameContext
            self.secondTable = None # TableNameContext

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_tablePair

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTablePair" ):
                listener.enterTablePair(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTablePair" ):
                listener.exitTablePair(self)




    def tablePair(self):

        localctx = MySqlParser.TablePairContext(self, self._ctx, self.state)
        self.enterRule(localctx, 352, self.RULE_tablePair)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4444
            self.match(MySqlParser.LR_BRACKET)
            self.state = 4445
            localctx.firstTable = self.tableName()
            self.state = 4446
            self.match(MySqlParser.COMMA)
            self.state = 4447
            localctx.secondTable = self.tableName()
            self.state = 4448
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ThreadTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_threadType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterThreadType" ):
                listener.enterThreadType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitThreadType" ):
                listener.exitThreadType(self)




    def threadType(self):

        localctx = MySqlParser.ThreadTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 354, self.RULE_threadType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4450
            _la = self._input.LA(1)
            if not(_la==460 or _la==626):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UntilOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_untilOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class GtidsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.gtids = None # Token
            self.copyFrom(ctx)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def gtuidSet(self):
            return self.getTypedRuleContext(MySqlParser.GtuidSetContext,0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)
        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtidsUntilOption" ):
                listener.enterGtidsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtidsUntilOption" ):
                listener.exitGtidsUntilOption(self)


    class SqlGapsUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSqlGapsUntilOption" ):
                listener.enterSqlGapsUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSqlGapsUntilOption" ):
                listener.exitSqlGapsUntilOption(self)


    class MasterLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMasterLogUntilOption" ):
                listener.enterMasterLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMasterLogUntilOption" ):
                listener.exitMasterLogUntilOption(self)


    class RelayLogUntilOptionContext(UntilOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UntilOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)
        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRelayLogUntilOption" ):
                listener.enterRelayLogUntilOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRelayLogUntilOption" ):
                listener.exitRelayLogUntilOption(self)



    def untilOption(self):

        localctx = MySqlParser.UntilOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 356, self.RULE_untilOption)
        self._la = 0 # Token type
        try:
            self.state = 4470
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [620, 622]:
                localctx = MySqlParser.GtidsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4452
                localctx.gtids = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==620 or _la==622):
                    localctx.gtids = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 4453
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4454
                self.gtuidSet()
                pass
            elif token in [481]:
                localctx = MySqlParser.MasterLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4455
                self.match(MySqlParser.MASTER_LOG_FILE)
                self.state = 4456
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4457
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4458
                self.match(MySqlParser.COMMA)
                self.state = 4459
                self.match(MySqlParser.MASTER_LOG_POS)
                self.state = 4460
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4461
                self.decimalLiteral()
                pass
            elif token in [573]:
                localctx = MySqlParser.RelayLogUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4462
                self.match(MySqlParser.RELAY_LOG_FILE)
                self.state = 4463
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4464
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 4465
                self.match(MySqlParser.COMMA)
                self.state = 4466
                self.match(MySqlParser.RELAY_LOG_POS)
                self.state = 4467
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4468
                self.decimalLiteral()
                pass
            elif token in [621]:
                localctx = MySqlParser.SqlGapsUntilOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4469
                self.match(MySqlParser.SQL_AFTER_MTS_GAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectionOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_connectionOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PluginDirConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPluginDir = None # Token
            self.copyFrom(ctx)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPluginDirConnectionOption" ):
                listener.enterPluginDirConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPluginDirConnectionOption" ):
                listener.exitPluginDirConnectionOption(self)


    class UserConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptUser = None # Token
            self.copyFrom(ctx)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserConnectionOption" ):
                listener.enterUserConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserConnectionOption" ):
                listener.exitUserConnectionOption(self)


    class DefaultAuthConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptDefAuth = None # Token
            self.copyFrom(ctx)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultAuthConnectionOption" ):
                listener.enterDefaultAuthConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultAuthConnectionOption" ):
                listener.exitDefaultAuthConnectionOption(self)


    class PasswordConnectionOptionContext(ConnectionOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ConnectionOptionContext
            super().__init__(parser)
            self.conOptPassword = None # Token
            self.copyFrom(ctx)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordConnectionOption" ):
                listener.enterPasswordConnectionOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordConnectionOption" ):
                listener.exitPasswordConnectionOption(self)



    def connectionOption(self):

        localctx = MySqlParser.ConnectionOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 358, self.RULE_connectionOption)
        try:
            self.state = 4484
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [663]:
                localctx = MySqlParser.UserConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4472
                self.match(MySqlParser.USER)
                self.state = 4473
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4474
                localctx.conOptUser = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [549]:
                localctx = MySqlParser.PasswordConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4475
                self.match(MySqlParser.PASSWORD)
                self.state = 4476
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4477
                localctx.conOptPassword = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [389]:
                localctx = MySqlParser.DefaultAuthConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4478
                self.match(MySqlParser.DEFAULT_AUTH)
                self.state = 4479
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4480
                localctx.conOptDefAuth = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [553]:
                localctx = MySqlParser.PluginDirConnectionOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4481
                self.match(MySqlParser.PLUGIN_DIR)
                self.state = 4482
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 4483
                localctx.conOptPluginDir = self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GtuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uuidSet(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UuidSetContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UuidSetContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_gtuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGtuidSet" ):
                listener.enterGtuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGtuidSet" ):
                listener.exitGtuidSet(self)




    def gtuidSet(self):

        localctx = MySqlParser.GtuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 360, self.RULE_gtuidSet)
        self._la = 0 # Token type
        try:
            self.state = 4495
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131, 1132, 1133, 1142, 1144]:
                self.enterOuterAlt(localctx, 1)
                self.state = 4486
                self.uuidSet()
                self.state = 4491
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4487
                    self.match(MySqlParser.COMMA)
                    self.state = 4488
                    self.uuidSet()
                    self.state = 4493
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            elif token in [1141]:
                self.enterOuterAlt(localctx, 2)
                self.state = 4494
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaStartTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.xaStart = None # Token
            self.xaAction = None # Token

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def JOIN(self):
            return self.getToken(MySqlParser.JOIN, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaStartTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaStartTransaction" ):
                listener.enterXaStartTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaStartTransaction" ):
                listener.exitXaStartTransaction(self)




    def xaStartTransaction(self):

        localctx = MySqlParser.XaStartTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 362, self.RULE_xaStartTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4497
            self.match(MySqlParser.XA)
            self.state = 4498
            localctx.xaStart = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==342 or _la==627):
                localctx.xaStart = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4499
            self.xid()
            self.state = 4501
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==89 or _la==589:
                self.state = 4500
                localctx.xaAction = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==89 or _la==589):
                    localctx.xaAction = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaEndTransactionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaEndTransaction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaEndTransaction" ):
                listener.enterXaEndTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaEndTransaction" ):
                listener.exitXaEndTransaction(self)




    def xaEndTransaction(self):

        localctx = MySqlParser.XaEndTransactionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 364, self.RULE_xaEndTransaction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4503
            self.match(MySqlParser.XA)
            self.state = 4504
            self.match(MySqlParser.END)
            self.state = 4505
            self.xid()
            self.state = 4511
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==641:
                self.state = 4506
                self.match(MySqlParser.SUSPEND)
                self.state = 4509
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 4507
                    self.match(MySqlParser.FOR)
                    self.state = 4508
                    self.match(MySqlParser.MIGRATE)




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaPrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaPrepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaPrepareStatement" ):
                listener.enterXaPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaPrepareStatement" ):
                listener.exitXaPrepareStatement(self)




    def xaPrepareStatement(self):

        localctx = MySqlParser.XaPrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 366, self.RULE_xaPrepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4513
            self.match(MySqlParser.XA)
            self.state = 4514
            self.match(MySqlParser.PREPARE)
            self.state = 4515
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaCommitWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_xaCommitWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaCommitWork" ):
                listener.enterXaCommitWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaCommitWork" ):
                listener.exitXaCommitWork(self)




    def xaCommitWork(self):

        localctx = MySqlParser.XaCommitWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 368, self.RULE_xaCommitWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4517
            self.match(MySqlParser.XA)
            self.state = 4518
            self.match(MySqlParser.COMMIT)
            self.state = 4519
            self.xid()
            self.state = 4522
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==534:
                self.state = 4520
                self.match(MySqlParser.ONE)
                self.state = 4521
                self.match(MySqlParser.PHASE)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRollbackWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRollbackWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRollbackWork" ):
                listener.enterXaRollbackWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRollbackWork" ):
                listener.exitXaRollbackWork(self)




    def xaRollbackWork(self):

        localctx = MySqlParser.XaRollbackWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 370, self.RULE_xaRollbackWork)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4524
            self.match(MySqlParser.XA)
            self.state = 4525
            self.match(MySqlParser.ROLLBACK)
            self.state = 4526
            self.xid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XaRecoverWorkContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)

        def xid(self):
            return self.getTypedRuleContext(MySqlParser.XidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xaRecoverWork

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXaRecoverWork" ):
                listener.enterXaRecoverWork(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXaRecoverWork" ):
                listener.exitXaRecoverWork(self)




    def xaRecoverWork(self):

        localctx = MySqlParser.XaRecoverWorkContext(self, self._ctx, self.state)
        self.enterRule(localctx, 372, self.RULE_xaRecoverWork)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4528
            self.match(MySqlParser.XA)
            self.state = 4529
            self.match(MySqlParser.RECOVER)
            self.state = 4532
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==32:
                self.state = 4530
                self.match(MySqlParser.CONVERT)
                self.state = 4531
                self.xid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrepareStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.query = None # Token
            self.variable = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_prepareStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrepareStatement" ):
                listener.enterPrepareStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrepareStatement" ):
                listener.exitPrepareStatement(self)




    def prepareStatement(self):

        localctx = MySqlParser.PrepareStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 374, self.RULE_prepareStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4534
            self.match(MySqlParser.PREPARE)
            self.state = 4535
            self.uid()
            self.state = 4536
            self.match(MySqlParser.FROM)
            self.state = 4539
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1141]:
                self.state = 4537
                localctx.query = self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [1153]:
                self.state = 4538
                localctx.variable = self.match(MySqlParser.LOCAL_ID)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExecuteStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def USING(self):
            return self.getToken(MySqlParser.USING, 0)

        def userVariables(self):
            return self.getTypedRuleContext(MySqlParser.UserVariablesContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_executeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExecuteStatement" ):
                listener.enterExecuteStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExecuteStatement" ):
                listener.exitExecuteStatement(self)




    def executeStatement(self):

        localctx = MySqlParser.ExecuteStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 376, self.RULE_executeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4541
            self.match(MySqlParser.EXECUTE)
            self.state = 4542
            self.uid()
            self.state = 4545
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==185:
                self.state = 4543
                self.match(MySqlParser.USING)
                self.state = 4544
                self.userVariables()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeallocatePrepareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.dropFormat = None # Token

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_deallocatePrepare

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeallocatePrepare" ):
                listener.enterDeallocatePrepare(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeallocatePrepare" ):
                listener.exitDeallocatePrepare(self)




    def deallocatePrepare(self):

        localctx = MySqlParser.DeallocatePrepareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 378, self.RULE_deallocatePrepare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4547
            localctx.dropFormat = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==51 or _la==388):
                localctx.dropFormat = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4548
            self.match(MySqlParser.PREPARE)
            self.state = 4549
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoutineBodyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def blockStatement(self):
            return self.getTypedRuleContext(MySqlParser.BlockStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_routineBody

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoutineBody" ):
                listener.enterRoutineBody(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoutineBody" ):
                listener.exitRoutineBody(self)




    def routineBody(self):

        localctx = MySqlParser.RoutineBodyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 380, self.RULE_routineBody)
        try:
            self.state = 4553
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,653,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4551
                self.blockStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 4552
                self.sqlStatement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BlockStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def declareVariable(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareVariableContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareVariableContext,i)


        def SEMI(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SEMI)
            else:
                return self.getToken(MySqlParser.SEMI, i)

        def declareCondition(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareConditionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareConditionContext,i)


        def declareCursor(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareCursorContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareCursorContext,i)


        def declareHandler(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DeclareHandlerContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DeclareHandlerContext,i)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_blockStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBlockStatement" ):
                listener.enterBlockStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBlockStatement" ):
                listener.exitBlockStatement(self)




    def blockStatement(self):

        localctx = MySqlParser.BlockStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 382, self.RULE_blockStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4558
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,654,self._ctx)
            if la_ == 1:
                self.state = 4555
                self.uid()
                self.state = 4556
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4560
            self.match(MySqlParser.BEGIN)
            self.state = 4599
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,660,self._ctx)
            if la_ == 1:
                self.state = 4566
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,655,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4561
                        self.declareVariable()
                        self.state = 4562
                        self.match(MySqlParser.SEMI) 
                    self.state = 4568
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,655,self._ctx)

                self.state = 4574
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,656,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4569
                        self.declareCondition()
                        self.state = 4570
                        self.match(MySqlParser.SEMI) 
                    self.state = 4576
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,656,self._ctx)

                self.state = 4582
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,657,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4577
                        self.declareCursor()
                        self.state = 4578
                        self.match(MySqlParser.SEMI) 
                    self.state = 4584
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,657,self._ctx)

                self.state = 4590
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==41:
                    self.state = 4585
                    self.declareHandler()
                    self.state = 4586
                    self.match(MySqlParser.SEMI)
                    self.state = 4592
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4596
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,659,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 4593
                        self.procedureSqlStatement() 
                    self.state = 4598
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,659,self._ctx)



            self.state = 4601
            self.match(MySqlParser.END)
            self.state = 4603
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,661,self._ctx)
            if la_ == 1:
                self.state = 4602
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CASE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.CASE)
            else:
                return self.getToken(MySqlParser.CASE, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def caseAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseStatement" ):
                listener.enterCaseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseStatement" ):
                listener.exitCaseStatement(self)




    def caseStatement(self):

        localctx = MySqlParser.CaseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 384, self.RULE_caseStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4605
            self.match(MySqlParser.CASE)
            self.state = 4608
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,662,self._ctx)
            if la_ == 1:
                self.state = 4606
                self.uid()

            elif la_ == 2:
                self.state = 4607
                self.expression(0)


            self.state = 4611 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 4610
                self.caseAlternative()
                self.state = 4613 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==187):
                    break

            self.state = 4621
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 4615
                self.match(MySqlParser.ELSE)
                self.state = 4617 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4616
                        self.procedureSqlStatement()

                    else:
                        raise NoViableAltException(self)
                    self.state = 4619 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,664,self._ctx)



            self.state = 4623
            self.match(MySqlParser.END)
            self.state = 4624
            self.match(MySqlParser.CASE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self._procedureSqlStatement = None # ProcedureSqlStatementContext
            self.thenStatements = list() # of ProcedureSqlStatementContexts
            self.elseStatements = list() # of ProcedureSqlStatementContexts

        def IF(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IF)
            else:
                return self.getToken(MySqlParser.IF, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def elifAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ElifAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ElifAlternativeContext,i)


        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_ifStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfStatement" ):
                listener.enterIfStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfStatement" ):
                listener.exitIfStatement(self)




    def ifStatement(self):

        localctx = MySqlParser.IfStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 386, self.RULE_ifStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4626
            self.match(MySqlParser.IF)
            self.state = 4627
            self.expression(0)
            self.state = 4628
            self.match(MySqlParser.THEN)
            self.state = 4630 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4629
                    localctx._procedureSqlStatement = self.procedureSqlStatement()
                    localctx.thenStatements.append(localctx._procedureSqlStatement)

                else:
                    raise NoViableAltException(self)
                self.state = 4632 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,666,self._ctx)

            self.state = 4637
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==54:
                self.state = 4634
                self.elifAlternative()
                self.state = 4639
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4646
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==53:
                self.state = 4640
                self.match(MySqlParser.ELSE)
                self.state = 4642 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 4641
                        localctx._procedureSqlStatement = self.procedureSqlStatement()
                        localctx.elseStatements.append(localctx._procedureSqlStatement)

                    else:
                        raise NoViableAltException(self)
                    self.state = 4644 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,668,self._ctx)



            self.state = 4648
            self.match(MySqlParser.END)
            self.state = 4649
            self.match(MySqlParser.IF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IterateStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ITERATE(self):
            return self.getToken(MySqlParser.ITERATE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_iterateStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIterateStatement" ):
                listener.enterIterateStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIterateStatement" ):
                listener.exitIterateStatement(self)




    def iterateStatement(self):

        localctx = MySqlParser.IterateStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 388, self.RULE_iterateStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4651
            self.match(MySqlParser.ITERATE)
            self.state = 4652
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LeaveStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LEAVE(self):
            return self.getToken(MySqlParser.LEAVE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_leaveStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLeaveStatement" ):
                listener.enterLeaveStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLeaveStatement" ):
                listener.exitLeaveStatement(self)




    def leaveStatement(self):

        localctx = MySqlParser.LeaveStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 390, self.RULE_leaveStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4654
            self.match(MySqlParser.LEAVE)
            self.state = 4655
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOOP)
            else:
                return self.getToken(MySqlParser.LOOP, i)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_loopStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoopStatement" ):
                listener.enterLoopStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoopStatement" ):
                listener.exitLoopStatement(self)




    def loopStatement(self):

        localctx = MySqlParser.LoopStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 392, self.RULE_loopStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4657
                self.uid()
                self.state = 4658
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4662
            self.match(MySqlParser.LOOP)
            self.state = 4664 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4663
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4666 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,671,self._ctx)

            self.state = 4668
            self.match(MySqlParser.END)
            self.state = 4669
            self.match(MySqlParser.LOOP)
            self.state = 4671
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4670
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepeatStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEAT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.REPEAT)
            else:
                return self.getToken(MySqlParser.REPEAT, i)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_repeatStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepeatStatement" ):
                listener.enterRepeatStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepeatStatement" ):
                listener.exitRepeatStatement(self)




    def repeatStatement(self):

        localctx = MySqlParser.RepeatStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 394, self.RULE_repeatStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4676
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4673
                self.uid()
                self.state = 4674
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4678
            self.match(MySqlParser.REPEAT)
            self.state = 4680 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4679
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4682 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,674,self._ctx)

            self.state = 4684
            self.match(MySqlParser.UNTIL)
            self.state = 4685
            self.expression(0)
            self.state = 4686
            self.match(MySqlParser.END)
            self.state = 4687
            self.match(MySqlParser.REPEAT)
            self.state = 4689
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4688
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ReturnStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RETURN(self):
            return self.getToken(MySqlParser.RETURN, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_returnStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterReturnStatement" ):
                listener.enterReturnStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitReturnStatement" ):
                listener.exitReturnStatement(self)




    def returnStatement(self):

        localctx = MySqlParser.ReturnStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 396, self.RULE_returnStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4691
            self.match(MySqlParser.RETURN)
            self.state = 4692
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WhileStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHILE(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WHILE)
            else:
                return self.getToken(MySqlParser.WHILE, i)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COLON_SYMB(self):
            return self.getToken(MySqlParser.COLON_SYMB, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_whileStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWhileStatement" ):
                listener.enterWhileStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWhileStatement" ):
                listener.exitWhileStatement(self)




    def whileStatement(self):

        localctx = MySqlParser.WhileStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 398, self.RULE_whileStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4697
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4694
                self.uid()
                self.state = 4695
                self.match(MySqlParser.COLON_SYMB)


            self.state = 4699
            self.match(MySqlParser.WHILE)
            self.state = 4700
            self.expression(0)
            self.state = 4701
            self.match(MySqlParser.DO)
            self.state = 4703 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4702
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4705 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,677,self._ctx)

            self.state = 4707
            self.match(MySqlParser.END)
            self.state = 4708
            self.match(MySqlParser.WHILE)
            self.state = 4710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if ((_la) & ~0x3f) == 0 and ((1 << _la) & 324545768285552640) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055071174737) != 0 or (((_la - 140)) & ~0x3f) == 0 and ((1 << (_la - 140)) & 67109505) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17174494689) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & -1099511627777) != 0 or (((_la - 343)) & ~0x3f) == 0 and ((1 << (_la - 343)) & -2882305960540372993) != 0 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & -4398063288321) != 0 or (((_la - 471)) & ~0x3f) == 0 and ((1 << (_la - 471)) & -16325548649218049) != 0 or (((_la - 535)) & ~0x3f) == 0 and ((1 << (_la - 535)) & -81064793296864001) != 0 or (((_la - 599)) & ~0x3f) == 0 and ((1 << (_la - 599)) & -68719476801) != 0 or (((_la - 663)) & ~0x3f) == 0 and ((1 << (_la - 663)) & -2779573985216513) != 0 or (((_la - 727)) & ~0x3f) == 0 and ((1 << (_la - 727)) & -9) != 0 or (((_la - 791)) & ~0x3f) == 0 and ((1 << (_la - 791)) & -769) != 0 or (((_la - 855)) & ~0x3f) == 0 and ((1 << (_la - 855)) & -1) != 0 or (((_la - 919)) & ~0x3f) == 0 and ((1 << (_la - 919)) & -1) != 0 or (((_la - 983)) & ~0x3f) == 0 and ((1 << (_la - 983)) & -1) != 0 or (((_la - 1047)) & ~0x3f) == 0 and ((1 << (_la - 1047)) & 18014398509481983) != 0 or (((_la - 1116)) & ~0x3f) == 0 and ((1 << (_la - 1116)) & 25807552513) != 0:
                self.state = 4709
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CursorStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_cursorStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CloseCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCloseCursor" ):
                listener.enterCloseCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCloseCursor" ):
                listener.exitCloseCursor(self)


    class OpenCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOpenCursor" ):
                listener.enterOpenCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOpenCursor" ):
                listener.exitOpenCursor(self)


    class FetchCursorContext(CursorStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CursorStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FETCH(self):
            return self.getToken(MySqlParser.FETCH, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)
        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFetchCursor" ):
                listener.enterFetchCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFetchCursor" ):
                listener.exitFetchCursor(self)



    def cursorStatement(self):

        localctx = MySqlParser.CursorStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 400, self.RULE_cursorStatement)
        self._la = 0 # Token type
        try:
            self.state = 4727
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [359]:
                localctx = MySqlParser.CloseCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4712
                self.match(MySqlParser.CLOSE)
                self.state = 4713
                self.uid()
                pass
            elif token in [63]:
                localctx = MySqlParser.FetchCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4714
                self.match(MySqlParser.FETCH)
                self.state = 4719
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,680,self._ctx)
                if la_ == 1:
                    self.state = 4716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==518:
                        self.state = 4715
                        self.match(MySqlParser.NEXT)


                    self.state = 4718
                    self.match(MySqlParser.FROM)


                self.state = 4721
                self.uid()
                self.state = 4722
                self.match(MySqlParser.INTO)
                self.state = 4723
                self.uidList()
                pass
            elif token in [537]:
                localctx = MySqlParser.OpenCursorContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4725
                self.match(MySqlParser.OPEN)
                self.state = 4726
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def dataType(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareVariable" ):
                listener.enterDeclareVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareVariable" ):
                listener.exitDeclareVariable(self)




    def declareVariable(self):

        localctx = MySqlParser.DeclareVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 402, self.RULE_declareVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4729
            self.match(MySqlParser.DECLARE)
            self.state = 4730
            self.uidList()
            self.state = 4731
            self.dataType()
            self.state = 4734
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==42:
                self.state = 4732
                self.match(MySqlParser.DEFAULT)
                self.state = 4733
                self.expression(0)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareConditionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareCondition

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCondition" ):
                listener.enterDeclareCondition(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCondition" ):
                listener.exitDeclareCondition(self)




    def declareCondition(self):

        localctx = MySqlParser.DeclareConditionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 404, self.RULE_declareCondition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4736
            self.match(MySqlParser.DECLARE)
            self.state = 4737
            self.uid()
            self.state = 4738
            self.match(MySqlParser.CONDITION)
            self.state = 4739
            self.match(MySqlParser.FOR)
            self.state = 4746
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131, 1132, 1133, 1142, 1144]:
                self.state = 4740
                self.decimalLiteral()
                pass
            elif token in [160]:
                self.state = 4741
                self.match(MySqlParser.SQLSTATE)
                self.state = 4743
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==667:
                    self.state = 4742
                    self.match(MySqlParser.VALUE)


                self.state = 4745
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareCursorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def CURSOR(self):
            return self.getToken(MySqlParser.CURSOR, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_declareCursor

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareCursor" ):
                listener.enterDeclareCursor(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareCursor" ):
                listener.exitDeclareCursor(self)




    def declareCursor(self):

        localctx = MySqlParser.DeclareCursorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 406, self.RULE_declareCursor)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4748
            self.match(MySqlParser.DECLARE)
            self.state = 4749
            self.uid()
            self.state = 4750
            self.match(MySqlParser.CURSOR)
            self.state = 4751
            self.match(MySqlParser.FOR)
            self.state = 4752
            self.selectStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DeclareHandlerContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.handlerAction = None # Token

        def DECLARE(self):
            return self.getToken(MySqlParser.DECLARE, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def handlerConditionValue(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.HandlerConditionValueContext)
            else:
                return self.getTypedRuleContext(MySqlParser.HandlerConditionValueContext,i)


        def routineBody(self):
            return self.getTypedRuleContext(MySqlParser.RoutineBodyContext,0)


        def CONTINUE(self):
            return self.getToken(MySqlParser.CONTINUE, 0)

        def EXIT(self):
            return self.getToken(MySqlParser.EXIT, 0)

        def UNDO(self):
            return self.getToken(MySqlParser.UNDO, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_declareHandler

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDeclareHandler" ):
                listener.enterDeclareHandler(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDeclareHandler" ):
                listener.exitDeclareHandler(self)




    def declareHandler(self):

        localctx = MySqlParser.DeclareHandlerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 408, self.RULE_declareHandler)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4754
            self.match(MySqlParser.DECLARE)
            self.state = 4755
            localctx.handlerAction = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==31 or _la==60 or _la==177):
                localctx.handlerAction = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 4756
            self.match(MySqlParser.HANDLER)
            self.state = 4757
            self.match(MySqlParser.FOR)
            self.state = 4758
            self.handlerConditionValue()
            self.state = 4763
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4759
                self.match(MySqlParser.COMMA)
                self.state = 4760
                self.handlerConditionValue()
                self.state = 4765
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 4766
            self.routineBody()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HandlerConditionValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_handlerConditionValue

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class HandlerConditionWarningContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLWARNING(self):
            return self.getToken(MySqlParser.SQLWARNING, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionWarning" ):
                listener.enterHandlerConditionWarning(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionWarning" ):
                listener.exitHandlerConditionWarning(self)


    class HandlerConditionCodeContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionCode" ):
                listener.enterHandlerConditionCode(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionCode" ):
                listener.exitHandlerConditionCode(self)


    class HandlerConditionNotfoundContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionNotfound" ):
                listener.enterHandlerConditionNotfound(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionNotfound" ):
                listener.exitHandlerConditionNotfound(self)


    class HandlerConditionStateContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionState" ):
                listener.enterHandlerConditionState(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionState" ):
                listener.exitHandlerConditionState(self)


    class HandlerConditionExceptionContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SQLEXCEPTION(self):
            return self.getToken(MySqlParser.SQLEXCEPTION, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionException" ):
                listener.enterHandlerConditionException(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionException" ):
                listener.exitHandlerConditionException(self)


    class HandlerConditionNameContext(HandlerConditionValueContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.HandlerConditionValueContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHandlerConditionName" ):
                listener.enterHandlerConditionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHandlerConditionName" ):
                listener.exitHandlerConditionName(self)



    def handlerConditionValue(self):

        localctx = MySqlParser.HandlerConditionValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 410, self.RULE_handlerConditionValue)
        self._la = 0 # Token type
        try:
            self.state = 4779
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1131, 1132, 1133, 1142, 1144]:
                localctx = MySqlParser.HandlerConditionCodeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4768
                self.decimalLiteral()
                pass
            elif token in [160]:
                localctx = MySqlParser.HandlerConditionStateContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4769
                self.match(MySqlParser.SQLSTATE)
                self.state = 4771
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==667:
                    self.state = 4770
                    self.match(MySqlParser.VALUE)


                self.state = 4773
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                localctx = MySqlParser.HandlerConditionNameContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4774
                self.uid()
                pass
            elif token in [161]:
                localctx = MySqlParser.HandlerConditionWarningContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 4775
                self.match(MySqlParser.SQLWARNING)
                pass
            elif token in [113]:
                localctx = MySqlParser.HandlerConditionNotfoundContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 4776
                self.match(MySqlParser.NOT)
                self.state = 4777
                self.match(MySqlParser.FOUND)
                pass
            elif token in [159]:
                localctx = MySqlParser.HandlerConditionExceptionContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 4778
                self.match(MySqlParser.SQLEXCEPTION)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ProcedureSqlStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SEMI(self):
            return self.getToken(MySqlParser.SEMI, 0)

        def compoundStatement(self):
            return self.getTypedRuleContext(MySqlParser.CompoundStatementContext,0)


        def sqlStatement(self):
            return self.getTypedRuleContext(MySqlParser.SqlStatementContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_procedureSqlStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterProcedureSqlStatement" ):
                listener.enterProcedureSqlStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitProcedureSqlStatement" ):
                listener.exitProcedureSqlStatement(self)




    def procedureSqlStatement(self):

        localctx = MySqlParser.ProcedureSqlStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 412, self.RULE_procedureSqlStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4783
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,688,self._ctx)
            if la_ == 1:
                self.state = 4781
                self.compoundStatement()
                pass

            elif la_ == 2:
                self.state = 4782
                self.sqlStatement()
                pass


            self.state = 4785
            self.match(MySqlParser.SEMI)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseAlternative" ):
                listener.enterCaseAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseAlternative" ):
                listener.exitCaseAlternative(self)




    def caseAlternative(self):

        localctx = MySqlParser.CaseAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 414, self.RULE_caseAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4787
            self.match(MySqlParser.WHEN)
            self.state = 4790
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,689,self._ctx)
            if la_ == 1:
                self.state = 4788
                self.constant()
                pass

            elif la_ == 2:
                self.state = 4789
                self.expression(0)
                pass


            self.state = 4792
            self.match(MySqlParser.THEN)
            self.state = 4794 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4793
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4796 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,690,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ElifAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ELSEIF(self):
            return self.getToken(MySqlParser.ELSEIF, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def procedureSqlStatement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ProcedureSqlStatementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ProcedureSqlStatementContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_elifAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterElifAlternative" ):
                listener.enterElifAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitElifAlternative" ):
                listener.exitElifAlternative(self)




    def elifAlternative(self):

        localctx = MySqlParser.ElifAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 416, self.RULE_elifAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4798
            self.match(MySqlParser.ELSEIF)
            self.state = 4799
            self.expression(0)
            self.state = 4800
            self.match(MySqlParser.THEN)
            self.state = 4802 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 4801
                    self.procedureSqlStatement()

                else:
                    raise NoViableAltException(self)
                self.state = 4804 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,691,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AlterUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_alterUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class AlterUserMysqlV80Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ATTRIBUTE(self):
            return self.getToken(MySqlParser.ATTRIBUTE, 0)
        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)
        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV80" ):
                listener.enterAlterUserMysqlV80(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV80" ):
                listener.exitAlterUserMysqlV80(self)


    class AlterUserMysqlV56Context(AlterUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AlterUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userSpecification(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserSpecificationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserSpecificationContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAlterUserMysqlV56" ):
                listener.enterAlterUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAlterUserMysqlV56" ):
                listener.exitAlterUserMysqlV56(self)



    def alterUser(self):

        localctx = MySqlParser.AlterUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 418, self.RULE_alterUser)
        self._la = 0 # Token type
        try:
            self.state = 4879
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,706,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.AlterUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4806
                self.match(MySqlParser.ALTER)
                self.state = 4807
                self.match(MySqlParser.USER)
                self.state = 4808
                self.userSpecification()
                self.state = 4813
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4809
                    self.match(MySqlParser.COMMA)
                    self.state = 4810
                    self.userSpecification()
                    self.state = 4815
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.AlterUserMysqlV80Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4816
                self.match(MySqlParser.ALTER)
                self.state = 4817
                self.match(MySqlParser.USER)
                self.state = 4819
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 4818
                    self.ifExists()


                self.state = 4821
                self.userAuthOption()
                self.state = 4826
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4822
                    self.match(MySqlParser.COMMA)
                    self.state = 4823
                    self.userAuthOption()
                    self.state = 4828
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4843
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 4829
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4841
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [527]:
                        self.state = 4830
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [165, 356, 463, 638, 678]:
                        self.state = 4831
                        self.tlsOption()
                        self.state = 4838
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==10 or _la==165 or _la==356 or _la==463 or _la==638 or _la==678:
                            self.state = 4833
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==10:
                                self.state = 4832
                                self.match(MySqlParser.AND)


                            self.state = 4835
                            self.tlsOption()
                            self.state = 4840
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4851
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 4845
                    self.match(MySqlParser.WITH)
                    self.state = 4847 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4846
                        self.userResourceOption()
                        self.state = 4849 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la - 496)) & ~0x3f) == 0 and ((1 << (_la - 496)) & 51) != 0):
                            break



                self.state = 4857
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==330 or _la==422 or _la==549 or _la==550:
                    self.state = 4855
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [422, 549, 550]:
                        self.state = 4853
                        self.userPasswordOption()
                        pass
                    elif token in [330]:
                        self.state = 4854
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4859
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4864
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [366]:
                    self.state = 4860
                    self.match(MySqlParser.COMMENT)
                    self.state = 4861
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [14]:
                    self.state = 4862
                    self.match(MySqlParser.ATTRIBUTE)
                    self.state = 4863
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1129]:
                    pass
                else:
                    pass
                pass

            elif la_ == 3:
                localctx = MySqlParser.AlterUserMysqlV80Context(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 4866
                self.match(MySqlParser.ALTER)
                self.state = 4867
                self.match(MySqlParser.USER)
                self.state = 4869
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,704,self._ctx)
                if la_ == 1:
                    self.state = 4868
                    self.ifExists()


                self.state = 4873
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,705,self._ctx)
                if la_ == 1:
                    self.state = 4871
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 4872
                    self.uid()
                    pass


                self.state = 4875
                self.match(MySqlParser.DEFAULT)
                self.state = 4876
                self.match(MySqlParser.ROLE)
                self.state = 4877
                self.roleOption()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_createUser

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class CreateUserMysqlV56Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV56" ):
                listener.enterCreateUserMysqlV56(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV56" ):
                listener.exitCreateUserMysqlV56(self)


    class CreateUserMysqlV80Context(CreateUserContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.CreateUserContext
            super().__init__(parser)
            self.tlsNone = None # Token
            self.copyFrom(ctx)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)
        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def userPasswordOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserPasswordOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,i)

        def userLockOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserLockOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserLockOptionContext,i)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def ATTRIBUTE(self):
            return self.getToken(MySqlParser.ATTRIBUTE, 0)
        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)
        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)

        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUserMysqlV80" ):
                listener.enterCreateUserMysqlV80(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUserMysqlV80" ):
                listener.exitCreateUserMysqlV80(self)



    def createUser(self):

        localctx = MySqlParser.CreateUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 420, self.RULE_createUser)
        self._la = 0 # Token type
        try:
            self.state = 4946
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,720,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CreateUserMysqlV56Context(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 4881
                self.match(MySqlParser.CREATE)
                self.state = 4882
                self.match(MySqlParser.USER)
                self.state = 4883
                self.userAuthOption()
                self.state = 4888
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4884
                    self.match(MySqlParser.COMMA)
                    self.state = 4885
                    self.userAuthOption()
                    self.state = 4890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.CreateUserMysqlV80Context(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 4891
                self.match(MySqlParser.CREATE)
                self.state = 4892
                self.match(MySqlParser.USER)
                self.state = 4894
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==76:
                    self.state = 4893
                    self.ifNotExists()


                self.state = 4896
                self.userAuthOption()
                self.state = 4901
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4897
                    self.match(MySqlParser.COMMA)
                    self.state = 4898
                    self.userAuthOption()
                    self.state = 4903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4907
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42:
                    self.state = 4904
                    self.match(MySqlParser.DEFAULT)
                    self.state = 4905
                    self.match(MySqlParser.ROLE)
                    self.state = 4906
                    self.roleOption()


                self.state = 4923
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 4909
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4921
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [527]:
                        self.state = 4910
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [165, 356, 463, 638, 678]:
                        self.state = 4911
                        self.tlsOption()
                        self.state = 4918
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==10 or _la==165 or _la==356 or _la==463 or _la==638 or _la==678:
                            self.state = 4913
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==10:
                                self.state = 4912
                                self.match(MySqlParser.AND)


                            self.state = 4915
                            self.tlsOption()
                            self.state = 4920
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 4931
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 4925
                    self.match(MySqlParser.WITH)
                    self.state = 4927 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while True:
                        self.state = 4926
                        self.userResourceOption()
                        self.state = 4929 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if not ((((_la - 496)) & ~0x3f) == 0 and ((1 << (_la - 496)) & 51) != 0):
                            break



                self.state = 4937
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==330 or _la==422 or _la==549 or _la==550:
                    self.state = 4935
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [422, 549, 550]:
                        self.state = 4933
                        self.userPasswordOption()
                        pass
                    elif token in [330]:
                        self.state = 4934
                        self.userLockOption()
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 4939
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4944
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [366]:
                    self.state = 4940
                    self.match(MySqlParser.COMMENT)
                    self.state = 4941
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [14]:
                    self.state = 4942
                    self.match(MySqlParser.ATTRIBUTE)
                    self.state = 4943
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1129]:
                    pass
                else:
                    pass
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DropUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ifExists(self):
            return self.getTypedRuleContext(MySqlParser.IfExistsContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_dropUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDropUser" ):
                listener.enterDropUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDropUser" ):
                listener.exitDropUser(self)




    def dropUser(self):

        localctx = MySqlParser.DropUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 422, self.RULE_dropUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 4948
            self.match(MySqlParser.DROP)
            self.state = 4949
            self.match(MySqlParser.USER)
            self.state = 4951
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==76:
                self.state = 4950
                self.ifExists()


            self.state = 4953
            self.userName()
            self.state = 4958
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 4954
                self.match(MySqlParser.COMMA)
                self.state = 4955
                self.userName()
                self.state = 4960
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.privilegeObject = None # Token
            self.tlsNone = None # Token

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)


        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userAuthOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserAuthOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserAuthOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)

        def WITH(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.WITH)
            else:
                return self.getToken(MySqlParser.WITH, i)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def roleOption(self):
            return self.getTypedRuleContext(MySqlParser.RoleOptionContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def tlsOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TlsOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TlsOptionContext,i)


        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def OPTION(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.OPTION)
            else:
                return self.getToken(MySqlParser.OPTION, i)

        def userResourceOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserResourceOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserResourceOptionContext,i)


        def AND(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AND)
            else:
                return self.getToken(MySqlParser.AND, i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantStatement" ):
                listener.enterGrantStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantStatement" ):
                listener.exitGrantStatement(self)




    def grantStatement(self):

        localctx = MySqlParser.GrantStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 424, self.RULE_grantStatement)
        self._la = 0 # Token type
        try:
            self.state = 5054
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,741,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 4961
                self.match(MySqlParser.GRANT)
                self.state = 4962
                self.privelegeClause()
                self.state = 4967
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4963
                    self.match(MySqlParser.COMMA)
                    self.state = 4964
                    self.privelegeClause()
                    self.state = 4969
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4970
                self.match(MySqlParser.ON)
                self.state = 4972
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,724,self._ctx)
                if la_ == 1:
                    self.state = 4971
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==130 or _la==170 or _la==435):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 4974
                self.privilegeLevel()
                self.state = 4975
                self.match(MySqlParser.TO)
                self.state = 4976
                self.userAuthOption()
                self.state = 4981
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 4977
                    self.match(MySqlParser.COMMA)
                    self.state = 4978
                    self.userAuthOption()
                    self.state = 4983
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 4998
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==141:
                    self.state = 4984
                    self.match(MySqlParser.REQUIRE)
                    self.state = 4996
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [527]:
                        self.state = 4985
                        localctx.tlsNone = self.match(MySqlParser.NONE)
                        pass
                    elif token in [165, 356, 463, 638, 678]:
                        self.state = 4986
                        self.tlsOption()
                        self.state = 4993
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==10 or _la==165 or _la==356 or _la==463 or _la==638 or _la==678:
                            self.state = 4988
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if _la==10:
                                self.state = 4987
                                self.match(MySqlParser.AND)


                            self.state = 4990
                            self.tlsOption()
                            self.state = 4995
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        pass
                    else:
                        raise NoViableAltException(self)



                self.state = 5009
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 5000
                    self.match(MySqlParser.WITH)
                    self.state = 5006
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,731,self._ctx)
                    while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                        if _alt==1:
                            self.state = 5004
                            self._errHandler.sync(self)
                            token = self._input.LA(1)
                            if token in [71]:
                                self.state = 5001
                                self.match(MySqlParser.GRANT)
                                self.state = 5002
                                self.match(MySqlParser.OPTION)
                                pass
                            elif token in [496, 497, 500, 501]:
                                self.state = 5003
                                self.userResourceOption()
                                pass
                            else:
                                raise NoViableAltException(self)
                     
                        self.state = 5008
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,731,self._ctx)



                self.state = 5017
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 5011
                    self.match(MySqlParser.AS)
                    self.state = 5012
                    self.userName()
                    self.state = 5013
                    self.match(MySqlParser.WITH)
                    self.state = 5014
                    self.match(MySqlParser.ROLE)
                    self.state = 5015
                    self.roleOption()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5019
                self.match(MySqlParser.GRANT)
                self.state = 5022
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,734,self._ctx)
                if la_ == 1:
                    self.state = 5020
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5021
                    self.uid()
                    pass


                self.state = 5031
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5024
                    self.match(MySqlParser.COMMA)
                    self.state = 5027
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,735,self._ctx)
                    if la_ == 1:
                        self.state = 5025
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5026
                        self.uid()
                        pass


                    self.state = 5033
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5034
                self.match(MySqlParser.TO)
                self.state = 5037
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,737,self._ctx)
                if la_ == 1:
                    self.state = 5035
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5036
                    self.uid()
                    pass


                self.state = 5046
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5039
                    self.match(MySqlParser.COMMA)
                    self.state = 5042
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,738,self._ctx)
                    if la_ == 1:
                        self.state = 5040
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5041
                        self.uid()
                        pass


                    self.state = 5048
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5052
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 5049
                    self.match(MySqlParser.WITH)
                    self.state = 5050
                    self.match(MySqlParser.ADMIN)
                    self.state = 5051
                    self.match(MySqlParser.OPTION)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def EXCEPT(self):
            return self.getToken(MySqlParser.EXCEPT, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_roleOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleOption" ):
                listener.enterRoleOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleOption" ):
                listener.exitRoleOption(self)




    def roleOption(self):

        localctx = MySqlParser.RoleOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 426, self.RULE_roleOption)
        self._la = 0 # Token type
        try:
            self.state = 5078
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,745,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5056
                self.match(MySqlParser.DEFAULT)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5057
                self.match(MySqlParser.NONE)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5058
                self.match(MySqlParser.ALL)
                self.state = 5068
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==58:
                    self.state = 5059
                    self.match(MySqlParser.EXCEPT)
                    self.state = 5060
                    self.userName()
                    self.state = 5065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 5061
                        self.match(MySqlParser.COMMA)
                        self.state = 5062
                        self.userName()
                        self.state = 5067
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5070
                self.userName()
                self.state = 5075
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5071
                    self.match(MySqlParser.COMMA)
                    self.state = 5072
                    self.userName()
                    self.state = 5077
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class GrantProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.toOther = list() # of UserNameContexts

        def GRANT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GRANT)
            else:
                return self.getToken(MySqlParser.GRANT, i)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_grantProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGrantProxy" ):
                listener.enterGrantProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGrantProxy" ):
                listener.exitGrantProxy(self)




    def grantProxy(self):

        localctx = MySqlParser.GrantProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 428, self.RULE_grantProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5080
            self.match(MySqlParser.GRANT)
            self.state = 5081
            self.match(MySqlParser.PROXY)
            self.state = 5082
            self.match(MySqlParser.ON)
            self.state = 5083
            localctx.fromFirst = self.userName()
            self.state = 5084
            self.match(MySqlParser.TO)
            self.state = 5085
            localctx.toFirst = self.userName()
            self.state = 5090
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5086
                self.match(MySqlParser.COMMA)
                self.state = 5087
                localctx._userName = self.userName()
                localctx.toOther.append(localctx._userName)
                self.state = 5092
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5096
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==190:
                self.state = 5093
                self.match(MySqlParser.WITH)
                self.state = 5094
                self.match(MySqlParser.GRANT)
                self.state = 5095
                self.match(MySqlParser.OPTION)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RENAME(self):
            return self.getToken(MySqlParser.RENAME, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def renameUserClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.RenameUserClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.RenameUserClauseContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_renameUser

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUser" ):
                listener.enterRenameUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUser" ):
                listener.exitRenameUser(self)




    def renameUser(self):

        localctx = MySqlParser.RenameUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 430, self.RULE_renameUser)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5098
            self.match(MySqlParser.RENAME)
            self.state = 5099
            self.match(MySqlParser.USER)
            self.state = 5100
            self.renameUserClause()
            self.state = 5105
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5101
                self.match(MySqlParser.COMMA)
                self.state = 5102
                self.renameUserClause()
                self.state = 5107
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_revokeStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DetailRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.privilegeObject = None # Token
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def privelegeClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PrivelegeClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PrivelegeClauseContext,i)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)
        def privilegeLevel(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeLevelContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDetailRevoke" ):
                listener.enterDetailRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDetailRevoke" ):
                listener.exitDetailRevoke(self)


    class RoleRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleRevoke" ):
                listener.enterRoleRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleRevoke" ):
                listener.exitRoleRevoke(self)


    class ShortRevokeContext(RevokeStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.RevokeStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)
        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShortRevoke" ):
                listener.enterShortRevoke(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShortRevoke" ):
                listener.exitShortRevoke(self)



    def revokeStatement(self):

        localctx = MySqlParser.RevokeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 432, self.RULE_revokeStatement)
        self._la = 0 # Token type
        try:
            self.state = 5178
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,760,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.DetailRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5108
                self.match(MySqlParser.REVOKE)
                self.state = 5109
                self.privelegeClause()
                self.state = 5114
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5110
                    self.match(MySqlParser.COMMA)
                    self.state = 5111
                    self.privelegeClause()
                    self.state = 5116
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5117
                self.match(MySqlParser.ON)
                self.state = 5119
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,750,self._ctx)
                if la_ == 1:
                    self.state = 5118
                    localctx.privilegeObject = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==130 or _la==170 or _la==435):
                        localctx.privilegeObject = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5121
                self.privilegeLevel()
                self.state = 5122
                self.match(MySqlParser.FROM)
                self.state = 5123
                self.userName()
                self.state = 5128
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5124
                    self.match(MySqlParser.COMMA)
                    self.state = 5125
                    self.userName()
                    self.state = 5130
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ShortRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5131
                self.match(MySqlParser.REVOKE)
                self.state = 5132
                self.match(MySqlParser.ALL)
                self.state = 5134
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==720:
                    self.state = 5133
                    self.match(MySqlParser.PRIVILEGES)


                self.state = 5136
                self.match(MySqlParser.COMMA)
                self.state = 5137
                self.match(MySqlParser.GRANT)
                self.state = 5138
                self.match(MySqlParser.OPTION)
                self.state = 5139
                self.match(MySqlParser.FROM)
                self.state = 5140
                self.userName()
                self.state = 5145
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5141
                    self.match(MySqlParser.COMMA)
                    self.state = 5142
                    self.userName()
                    self.state = 5147
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 3:
                localctx = MySqlParser.RoleRevokeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5148
                self.match(MySqlParser.REVOKE)
                self.state = 5151
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,754,self._ctx)
                if la_ == 1:
                    self.state = 5149
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5150
                    self.uid()
                    pass


                self.state = 5160
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5153
                    self.match(MySqlParser.COMMA)
                    self.state = 5156
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,755,self._ctx)
                    if la_ == 1:
                        self.state = 5154
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5155
                        self.uid()
                        pass


                    self.state = 5162
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5163
                self.match(MySqlParser.FROM)
                self.state = 5166
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,757,self._ctx)
                if la_ == 1:
                    self.state = 5164
                    self.userName()
                    pass

                elif la_ == 2:
                    self.state = 5165
                    self.uid()
                    pass


                self.state = 5175
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5168
                    self.match(MySqlParser.COMMA)
                    self.state = 5171
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,758,self._ctx)
                    if la_ == 1:
                        self.state = 5169
                        self.userName()
                        pass

                    elif la_ == 2:
                        self.state = 5170
                        self.uid()
                        pass


                    self.state = 5177
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RevokeProxyContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.onUser = None # UserNameContext
            self.fromFirst = None # UserNameContext
            self._userName = None # UserNameContext
            self.fromOther = list() # of UserNameContexts

        def REVOKE(self):
            return self.getToken(MySqlParser.REVOKE, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_revokeProxy

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRevokeProxy" ):
                listener.enterRevokeProxy(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRevokeProxy" ):
                listener.exitRevokeProxy(self)




    def revokeProxy(self):

        localctx = MySqlParser.RevokeProxyContext(self, self._ctx, self.state)
        self.enterRule(localctx, 434, self.RULE_revokeProxy)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5180
            self.match(MySqlParser.REVOKE)
            self.state = 5181
            self.match(MySqlParser.PROXY)
            self.state = 5182
            self.match(MySqlParser.ON)
            self.state = 5183
            localctx.onUser = self.userName()
            self.state = 5184
            self.match(MySqlParser.FROM)
            self.state = 5185
            localctx.fromFirst = self.userName()
            self.state = 5190
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5186
                self.match(MySqlParser.COMMA)
                self.state = 5187
                localctx._userName = self.userName()
                localctx.fromOther.append(localctx._userName)
                self.state = 5192
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetPasswordStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_setPasswordStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPasswordStatement" ):
                listener.enterSetPasswordStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPasswordStatement" ):
                listener.exitSetPasswordStatement(self)




    def setPasswordStatement(self):

        localctx = MySqlParser.SetPasswordStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 436, self.RULE_setPasswordStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5193
            self.match(MySqlParser.SET)
            self.state = 5194
            self.match(MySqlParser.PASSWORD)
            self.state = 5197
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==64:
                self.state = 5195
                self.match(MySqlParser.FOR)
                self.state = 5196
                self.userName()


            self.state = 5199
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 5202
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [533, 549]:
                self.state = 5200
                self.passwordFunctionClause()
                pass
            elif token in [1141]:
                self.state = 5201
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserSpecificationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def userPasswordOption(self):
            return self.getTypedRuleContext(MySqlParser.UserPasswordOptionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userSpecification

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserSpecification" ):
                listener.enterUserSpecification(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserSpecification" ):
                listener.exitUserSpecification(self)




    def userSpecification(self):

        localctx = MySqlParser.UserSpecificationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 438, self.RULE_userSpecification)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5204
            self.userName()
            self.state = 5205
            self.userPasswordOption()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserAuthOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_userAuthOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SimpleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleAuthOption" ):
                listener.enterSimpleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleAuthOption" ):
                listener.exitSimpleAuthOption(self)


    class ModuleAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def authenticationRule(self):
            return self.getTypedRuleContext(MySqlParser.AuthenticationRuleContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModuleAuthOption" ):
                listener.enterModuleAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModuleAuthOption" ):
                listener.exitModuleAuthOption(self)


    class StringAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def RETAIN(self):
            return self.getToken(MySqlParser.RETAIN, 0)
        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringAuthOption" ):
                listener.enterStringAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringAuthOption" ):
                listener.exitStringAuthOption(self)


    class HashAuthOptionContext(UserAuthOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.UserAuthOptionContext
            super().__init__(parser)
            self.hashed = None # Token
            self.copyFrom(ctx)

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHashAuthOption" ):
                listener.enterHashAuthOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHashAuthOption" ):
                listener.exitHashAuthOption(self)



    def userAuthOption(self):

        localctx = MySqlParser.UserAuthOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 440, self.RULE_userAuthOption)
        self._la = 0 # Token type
        try:
            self.state = 5228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,765,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.HashAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5207
                self.userName()
                self.state = 5208
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5209
                self.match(MySqlParser.BY)
                self.state = 5210
                self.match(MySqlParser.PASSWORD)
                self.state = 5211
                localctx.hashed = self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 2:
                localctx = MySqlParser.StringAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5213
                self.userName()
                self.state = 5214
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5215
                self.match(MySqlParser.BY)
                self.state = 5216
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 5220
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==144:
                    self.state = 5217
                    self.match(MySqlParser.RETAIN)
                    self.state = 5218
                    self.match(MySqlParser.CURRENT)
                    self.state = 5219
                    self.match(MySqlParser.PASSWORD)


                pass

            elif la_ == 3:
                localctx = MySqlParser.ModuleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5222
                self.userName()
                self.state = 5223
                self.match(MySqlParser.IDENTIFIED)
                self.state = 5224
                self.match(MySqlParser.WITH)
                self.state = 5225
                self.authenticationRule()
                pass

            elif la_ == 4:
                localctx = MySqlParser.SimpleAuthOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5227
                self.userName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthenticationRuleContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_authenticationRule

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PasswordModuleOptionContext(AuthenticationRuleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AuthenticationRuleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordModuleOption" ):
                listener.enterPasswordModuleOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordModuleOption" ):
                listener.exitPasswordModuleOption(self)


    class ModuleContext(AuthenticationRuleContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.AuthenticationRuleContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def authPlugin(self):
            return self.getTypedRuleContext(MySqlParser.AuthPluginContext,0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def BY(self):
            return self.getToken(MySqlParser.BY, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterModule" ):
                listener.enterModule(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitModule" ):
                listener.exitModule(self)



    def authenticationRule(self):

        localctx = MySqlParser.AuthenticationRuleContext(self, self._ctx, self.state)
        self.enterRule(localctx, 442, self.RULE_authenticationRule)
        self._la = 0 # Token type
        try:
            self.state = 5239
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,767,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ModuleContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5230
                self.authPlugin()
                self.state = 5233
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,766,self._ctx)
                if la_ == 1:
                    self.state = 5231
                    _la = self._input.LA(1)
                    if not(_la==12 or _la==19 or _la==185):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5232
                    self.match(MySqlParser.STRING_LITERAL)


                pass

            elif la_ == 2:
                localctx = MySqlParser.PasswordModuleOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5235
                self.authPlugin()
                self.state = 5236
                self.match(MySqlParser.USING)
                self.state = 5237
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TlsOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSL(self):
            return self.getToken(MySqlParser.SSL, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tlsOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTlsOption" ):
                listener.enterTlsOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTlsOption" ):
                listener.exitTlsOption(self)




    def tlsOption(self):

        localctx = MySqlParser.TlsOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 444, self.RULE_tlsOption)
        try:
            self.state = 5249
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [165]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5241
                self.match(MySqlParser.SSL)
                pass
            elif token in [678]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5242
                self.match(MySqlParser.X509)
                pass
            elif token in [356]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5243
                self.match(MySqlParser.CIPHER)
                self.state = 5244
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [463]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5245
                self.match(MySqlParser.ISSUER)
                self.state = 5246
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [638]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5247
                self.match(MySqlParser.SUBJECT)
                self.state = 5248
                self.match(MySqlParser.STRING_LITERAL)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserResourceOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userResourceOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserResourceOption" ):
                listener.enterUserResourceOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserResourceOption" ):
                listener.exitUserResourceOption(self)




    def userResourceOption(self):

        localctx = MySqlParser.UserResourceOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 446, self.RULE_userResourceOption)
        try:
            self.state = 5259
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [497]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5251
                self.match(MySqlParser.MAX_QUERIES_PER_HOUR)
                self.state = 5252
                self.decimalLiteral()
                pass
            elif token in [500]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5253
                self.match(MySqlParser.MAX_UPDATES_PER_HOUR)
                self.state = 5254
                self.decimalLiteral()
                pass
            elif token in [496]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5255
                self.match(MySqlParser.MAX_CONNECTIONS_PER_HOUR)
                self.state = 5256
                self.decimalLiteral()
                pass
            elif token in [501]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5257
                self.match(MySqlParser.MAX_USER_CONNECTIONS)
                self.state = 5258
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserPasswordOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.expireType = None # Token

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)

        def HISTORY(self):
            return self.getToken(MySqlParser.HISTORY, 0)

        def REUSE(self):
            return self.getToken(MySqlParser.REUSE, 0)

        def REQUIRE(self):
            return self.getToken(MySqlParser.REQUIRE, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def OPTIONAL(self):
            return self.getToken(MySqlParser.OPTIONAL, 0)

        def FAILED_LOGIN_ATTEMPTS(self):
            return self.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0)

        def PASSWORD_LOCK_TIME(self):
            return self.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0)

        def UNBOUNDED(self):
            return self.getToken(MySqlParser.UNBOUNDED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userPasswordOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserPasswordOption" ):
                listener.enterUserPasswordOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserPasswordOption" ):
                listener.exitUserPasswordOption(self)




    def userPasswordOption(self):

        localctx = MySqlParser.UserPasswordOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 448, self.RULE_userPasswordOption)
        self._la = 0 # Token type
        try:
            self.state = 5299
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,775,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5261
                self.match(MySqlParser.PASSWORD)
                self.state = 5262
                self.match(MySqlParser.EXPIRE)
                self.state = 5269
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 5263
                    localctx.expireType = self.match(MySqlParser.DEFAULT)
                    pass
                elif token in [517]:
                    self.state = 5264
                    localctx.expireType = self.match(MySqlParser.NEVER)
                    pass
                elif token in [85]:
                    self.state = 5265
                    localctx.expireType = self.match(MySqlParser.INTERVAL)
                    self.state = 5266
                    self.decimalLiteral()
                    self.state = 5267
                    self.match(MySqlParser.DAY)
                    pass
                elif token in [-1, 7, 9, 14, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 330, 342, 343, 349, 354, 366, 367, 388, 397, 422, 430, 440, 442, 454, 549, 550, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1128, 1129]:
                    pass
                else:
                    pass
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5271
                self.match(MySqlParser.PASSWORD)
                self.state = 5272
                self.match(MySqlParser.HISTORY)
                self.state = 5275
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 5273
                    self.match(MySqlParser.DEFAULT)
                    pass
                elif token in [1131, 1132, 1133, 1142, 1144]:
                    self.state = 5274
                    self.decimalLiteral()
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5277
                self.match(MySqlParser.PASSWORD)
                self.state = 5278
                self.match(MySqlParser.REUSE)
                self.state = 5279
                self.match(MySqlParser.INTERVAL)
                self.state = 5284
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [42]:
                    self.state = 5280
                    self.match(MySqlParser.DEFAULT)
                    pass
                elif token in [1131, 1132, 1133, 1142, 1144]:
                    self.state = 5281
                    self.decimalLiteral()
                    self.state = 5282
                    self.match(MySqlParser.DAY)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5286
                self.match(MySqlParser.PASSWORD)
                self.state = 5287
                self.match(MySqlParser.REQUIRE)
                self.state = 5288
                self.match(MySqlParser.CURRENT)
                self.state = 5290
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42 or _la==120:
                    self.state = 5289
                    _la = self._input.LA(1)
                    if not(_la==42 or _la==120):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5292
                self.match(MySqlParser.FAILED_LOGIN_ATTEMPTS)
                self.state = 5293
                self.decimalLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5294
                self.match(MySqlParser.PASSWORD_LOCK_TIME)
                self.state = 5297
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1131, 1132, 1133, 1142, 1144]:
                    self.state = 5295
                    self.decimalLiteral()
                    pass
                elif token in [655]:
                    self.state = 5296
                    self.match(MySqlParser.UNBOUNDED)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserLockOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.lockType = None # Token

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def UNLOCK(self):
            return self.getToken(MySqlParser.UNLOCK, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_userLockOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserLockOption" ):
                listener.enterUserLockOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserLockOption" ):
                listener.exitUserLockOption(self)




    def userLockOption(self):

        localctx = MySqlParser.UserLockOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 450, self.RULE_userLockOption)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5301
            self.match(MySqlParser.ACCOUNT)
            self.state = 5302
            localctx.lockType = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==102 or _la==180):
                localctx.lockType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivelegeClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def privilege(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegeContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privelegeClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivelegeClause" ):
                listener.enterPrivelegeClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivelegeClause" ):
                listener.exitPrivelegeClause(self)




    def privelegeClause(self):

        localctx = MySqlParser.PrivelegeClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 452, self.RULE_privelegeClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5304
            self.privilege()
            self.state = 5309
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1126:
                self.state = 5305
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5306
                self.uidList()
                self.state = 5307
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def ALTER(self):
            return self.getToken(MySqlParser.ALTER, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def DELETE(self):
            return self.getToken(MySqlParser.DELETE, 0)

        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def GRANT(self):
            return self.getToken(MySqlParser.GRANT, 0)

        def OPTION(self):
            return self.getToken(MySqlParser.OPTION, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def REFERENCES(self):
            return self.getToken(MySqlParser.REFERENCES, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SELECT(self):
            return self.getToken(MySqlParser.SELECT, 0)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def USAGE(self):
            return self.getToken(MySqlParser.USAGE, 0)

        def APPLICATION_PASSWORD_ADMIN(self):
            return self.getToken(MySqlParser.APPLICATION_PASSWORD_ADMIN, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FLUSH_OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.FLUSH_OPTIMIZER_COSTS, 0)

        def FLUSH_STATUS(self):
            return self.getToken(MySqlParser.FLUSH_STATUS, 0)

        def FLUSH_TABLES(self):
            return self.getToken(MySqlParser.FLUSH_TABLES, 0)

        def FLUSH_USER_RESOURCES(self):
            return self.getToken(MySqlParser.FLUSH_USER_RESOURCES, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INNODB_REDO_LOG_ENABLE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ENABLE, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def PASSWORDLESS_USER_ADMIN(self):
            return self.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def SERVICE_CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.SERVICE_CONNECTION_ADMIN, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)

        def S3(self):
            return self.getToken(MySqlParser.S3, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def INVOKE(self):
            return self.getToken(MySqlParser.INVOKE, 0)

        def LAMBDA(self):
            return self.getToken(MySqlParser.LAMBDA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilege

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilege" ):
                listener.enterPrivilege(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilege" ):
                listener.exitPrivilege(self)




    def privilege(self):

        localctx = MySqlParser.PrivilegeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 454, self.RULE_privilege)
        self._la = 0 # Token type
        try:
            self.state = 5399
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,781,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 5311
                self.match(MySqlParser.ALL)
                self.state = 5313
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==720:
                    self.state = 5312
                    self.match(MySqlParser.PRIVILEGES)


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 5315
                self.match(MySqlParser.ALTER)
                self.state = 5317
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==728:
                    self.state = 5316
                    self.match(MySqlParser.ROUTINE)


                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 5319
                self.match(MySqlParser.CREATE)
                self.state = 5327
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [647]:
                    self.state = 5320
                    self.match(MySqlParser.TEMPORARY)
                    self.state = 5321
                    self.match(MySqlParser.TABLES)
                    pass
                elif token in [728]:
                    self.state = 5322
                    self.match(MySqlParser.ROUTINE)
                    pass
                elif token in [669]:
                    self.state = 5323
                    self.match(MySqlParser.VIEW)
                    pass
                elif token in [663]:
                    self.state = 5324
                    self.match(MySqlParser.USER)
                    pass
                elif token in [645]:
                    self.state = 5325
                    self.match(MySqlParser.TABLESPACE)
                    pass
                elif token in [594]:
                    self.state = 5326
                    self.match(MySqlParser.ROLE)
                    pass
                elif token in [117, 1126, 1128]:
                    pass
                else:
                    pass
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 5329
                self.match(MySqlParser.DELETE)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 5330
                self.match(MySqlParser.DROP)
                self.state = 5332
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==594:
                    self.state = 5331
                    self.match(MySqlParser.ROLE)


                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 5334
                self.match(MySqlParser.EVENT)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 5335
                self.match(MySqlParser.EXECUTE)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 5336
                self.match(MySqlParser.FILE)
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 5337
                self.match(MySqlParser.GRANT)
                self.state = 5338
                self.match(MySqlParser.OPTION)
                pass

            elif la_ == 10:
                self.enterOuterAlt(localctx, 10)
                self.state = 5339
                self.match(MySqlParser.INDEX)
                pass

            elif la_ == 11:
                self.enterOuterAlt(localctx, 11)
                self.state = 5340
                self.match(MySqlParser.INSERT)
                pass

            elif la_ == 12:
                self.enterOuterAlt(localctx, 12)
                self.state = 5341
                self.match(MySqlParser.LOCK)
                self.state = 5342
                self.match(MySqlParser.TABLES)
                pass

            elif la_ == 13:
                self.enterOuterAlt(localctx, 13)
                self.state = 5343
                self.match(MySqlParser.PROCESS)
                pass

            elif la_ == 14:
                self.enterOuterAlt(localctx, 14)
                self.state = 5344
                self.match(MySqlParser.PROXY)
                pass

            elif la_ == 15:
                self.enterOuterAlt(localctx, 15)
                self.state = 5345
                self.match(MySqlParser.REFERENCES)
                pass

            elif la_ == 16:
                self.enterOuterAlt(localctx, 16)
                self.state = 5346
                self.match(MySqlParser.RELOAD)
                pass

            elif la_ == 17:
                self.enterOuterAlt(localctx, 17)
                self.state = 5347
                self.match(MySqlParser.REPLICATION)
                self.state = 5348
                _la = self._input.LA(1)
                if not(_la==358 or _la==612):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 18:
                self.enterOuterAlt(localctx, 18)
                self.state = 5349
                self.match(MySqlParser.SELECT)
                pass

            elif la_ == 19:
                self.enterOuterAlt(localctx, 19)
                self.state = 5350
                self.match(MySqlParser.SHOW)
                self.state = 5351
                _la = self._input.LA(1)
                if not(_la==40 or _la==669):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 20:
                self.enterOuterAlt(localctx, 20)
                self.state = 5352
                self.match(MySqlParser.SHUTDOWN)
                pass

            elif la_ == 21:
                self.enterOuterAlt(localctx, 21)
                self.state = 5353
                self.match(MySqlParser.SUPER)
                pass

            elif la_ == 22:
                self.enterOuterAlt(localctx, 22)
                self.state = 5354
                self.match(MySqlParser.TRIGGER)
                pass

            elif la_ == 23:
                self.enterOuterAlt(localctx, 23)
                self.state = 5355
                self.match(MySqlParser.UPDATE)
                pass

            elif la_ == 24:
                self.enterOuterAlt(localctx, 24)
                self.state = 5356
                self.match(MySqlParser.USAGE)
                pass

            elif la_ == 25:
                self.enterOuterAlt(localctx, 25)
                self.state = 5357
                self.match(MySqlParser.APPLICATION_PASSWORD_ADMIN)
                pass

            elif la_ == 26:
                self.enterOuterAlt(localctx, 26)
                self.state = 5358
                self.match(MySqlParser.AUDIT_ADMIN)
                pass

            elif la_ == 27:
                self.enterOuterAlt(localctx, 27)
                self.state = 5359
                self.match(MySqlParser.BACKUP_ADMIN)
                pass

            elif la_ == 28:
                self.enterOuterAlt(localctx, 28)
                self.state = 5360
                self.match(MySqlParser.BINLOG_ADMIN)
                pass

            elif la_ == 29:
                self.enterOuterAlt(localctx, 29)
                self.state = 5361
                self.match(MySqlParser.BINLOG_ENCRYPTION_ADMIN)
                pass

            elif la_ == 30:
                self.enterOuterAlt(localctx, 30)
                self.state = 5362
                self.match(MySqlParser.CLONE_ADMIN)
                pass

            elif la_ == 31:
                self.enterOuterAlt(localctx, 31)
                self.state = 5363
                self.match(MySqlParser.CONNECTION_ADMIN)
                pass

            elif la_ == 32:
                self.enterOuterAlt(localctx, 32)
                self.state = 5364
                self.match(MySqlParser.ENCRYPTION_KEY_ADMIN)
                pass

            elif la_ == 33:
                self.enterOuterAlt(localctx, 33)
                self.state = 5365
                self.match(MySqlParser.FIREWALL_ADMIN)
                pass

            elif la_ == 34:
                self.enterOuterAlt(localctx, 34)
                self.state = 5366
                self.match(MySqlParser.FIREWALL_USER)
                pass

            elif la_ == 35:
                self.enterOuterAlt(localctx, 35)
                self.state = 5367
                self.match(MySqlParser.FLUSH_OPTIMIZER_COSTS)
                pass

            elif la_ == 36:
                self.enterOuterAlt(localctx, 36)
                self.state = 5368
                self.match(MySqlParser.FLUSH_STATUS)
                pass

            elif la_ == 37:
                self.enterOuterAlt(localctx, 37)
                self.state = 5369
                self.match(MySqlParser.FLUSH_TABLES)
                pass

            elif la_ == 38:
                self.enterOuterAlt(localctx, 38)
                self.state = 5370
                self.match(MySqlParser.FLUSH_USER_RESOURCES)
                pass

            elif la_ == 39:
                self.enterOuterAlt(localctx, 39)
                self.state = 5371
                self.match(MySqlParser.GROUP_REPLICATION_ADMIN)
                pass

            elif la_ == 40:
                self.enterOuterAlt(localctx, 40)
                self.state = 5372
                self.match(MySqlParser.INNODB_REDO_LOG_ARCHIVE)
                pass

            elif la_ == 41:
                self.enterOuterAlt(localctx, 41)
                self.state = 5373
                self.match(MySqlParser.INNODB_REDO_LOG_ENABLE)
                pass

            elif la_ == 42:
                self.enterOuterAlt(localctx, 42)
                self.state = 5374
                self.match(MySqlParser.NDB_STORED_USER)
                pass

            elif la_ == 43:
                self.enterOuterAlt(localctx, 43)
                self.state = 5375
                self.match(MySqlParser.PASSWORDLESS_USER_ADMIN)
                pass

            elif la_ == 44:
                self.enterOuterAlt(localctx, 44)
                self.state = 5376
                self.match(MySqlParser.PERSIST_RO_VARIABLES_ADMIN)
                pass

            elif la_ == 45:
                self.enterOuterAlt(localctx, 45)
                self.state = 5377
                self.match(MySqlParser.REPLICATION_APPLIER)
                pass

            elif la_ == 46:
                self.enterOuterAlt(localctx, 46)
                self.state = 5378
                self.match(MySqlParser.REPLICATION_SLAVE_ADMIN)
                pass

            elif la_ == 47:
                self.enterOuterAlt(localctx, 47)
                self.state = 5379
                self.match(MySqlParser.RESOURCE_GROUP_ADMIN)
                pass

            elif la_ == 48:
                self.enterOuterAlt(localctx, 48)
                self.state = 5380
                self.match(MySqlParser.RESOURCE_GROUP_USER)
                pass

            elif la_ == 49:
                self.enterOuterAlt(localctx, 49)
                self.state = 5381
                self.match(MySqlParser.ROLE_ADMIN)
                pass

            elif la_ == 50:
                self.enterOuterAlt(localctx, 50)
                self.state = 5382
                self.match(MySqlParser.SERVICE_CONNECTION_ADMIN)
                pass

            elif la_ == 51:
                self.enterOuterAlt(localctx, 51)
                self.state = 5383
                self.match(MySqlParser.SESSION_VARIABLES_ADMIN)
                pass

            elif la_ == 52:
                self.enterOuterAlt(localctx, 52)
                self.state = 5384
                self.match(MySqlParser.SET_USER_ID)
                pass

            elif la_ == 53:
                self.enterOuterAlt(localctx, 53)
                self.state = 5385
                self.match(MySqlParser.SHOW_ROUTINE)
                pass

            elif la_ == 54:
                self.enterOuterAlt(localctx, 54)
                self.state = 5386
                self.match(MySqlParser.SYSTEM_USER)
                pass

            elif la_ == 55:
                self.enterOuterAlt(localctx, 55)
                self.state = 5387
                self.match(MySqlParser.SYSTEM_VARIABLES_ADMIN)
                pass

            elif la_ == 56:
                self.enterOuterAlt(localctx, 56)
                self.state = 5388
                self.match(MySqlParser.TABLE_ENCRYPTION_ADMIN)
                pass

            elif la_ == 57:
                self.enterOuterAlt(localctx, 57)
                self.state = 5389
                self.match(MySqlParser.VERSION_TOKEN_ADMIN)
                pass

            elif la_ == 58:
                self.enterOuterAlt(localctx, 58)
                self.state = 5390
                self.match(MySqlParser.XA_RECOVER_ADMIN)
                pass

            elif la_ == 59:
                self.enterOuterAlt(localctx, 59)
                self.state = 5391
                self.match(MySqlParser.LOAD)
                self.state = 5392
                self.match(MySqlParser.FROM)
                self.state = 5393
                self.match(MySqlParser.S3)
                pass

            elif la_ == 60:
                self.enterOuterAlt(localctx, 60)
                self.state = 5394
                self.match(MySqlParser.SELECT)
                self.state = 5395
                self.match(MySqlParser.INTO)
                self.state = 5396
                self.match(MySqlParser.S3)
                pass

            elif la_ == 61:
                self.enterOuterAlt(localctx, 61)
                self.state = 5397
                self.match(MySqlParser.INVOKE)
                self.state = 5398
                self.match(MySqlParser.LAMBDA)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegeLevelContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_privilegeLevel

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DefiniteSchemaPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteSchemaPrivLevel" ):
                listener.enterDefiniteSchemaPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteSchemaPrivLevel" ):
                listener.exitDefiniteSchemaPrivLevel(self)


    class DefiniteFullTablePrivLevel2Context(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def dottedId(self):
            return self.getTypedRuleContext(MySqlParser.DottedIdContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel2" ):
                listener.enterDefiniteFullTablePrivLevel2(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel2" ):
                listener.exitDefiniteFullTablePrivLevel2(self)


    class DefiniteFullTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteFullTablePrivLevel" ):
                listener.enterDefiniteFullTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteFullTablePrivLevel" ):
                listener.exitDefiniteFullTablePrivLevel(self)


    class GlobalPrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STAR)
            else:
                return self.getToken(MySqlParser.STAR, i)
        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGlobalPrivLevel" ):
                listener.enterGlobalPrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGlobalPrivLevel" ):
                listener.exitGlobalPrivLevel(self)


    class DefiniteTablePrivLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefiniteTablePrivLevel" ):
                listener.enterDefiniteTablePrivLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefiniteTablePrivLevel" ):
                listener.exitDefiniteTablePrivLevel(self)


    class CurrentSchemaPriviLevelContext(PrivilegeLevelContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PrivilegeLevelContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentSchemaPriviLevel" ):
                listener.enterCurrentSchemaPriviLevel(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentSchemaPriviLevel" ):
                listener.exitCurrentSchemaPriviLevel(self)



    def privilegeLevel(self):

        localctx = MySqlParser.PrivilegeLevelContext(self, self._ctx, self.state)
        self.enterRule(localctx, 456, self.RULE_privilegeLevel)
        try:
            self.state = 5417
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,782,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.CurrentSchemaPriviLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5401
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 2:
                localctx = MySqlParser.GlobalPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5402
                self.match(MySqlParser.STAR)
                self.state = 5403
                self.match(MySqlParser.DOT)
                self.state = 5404
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DefiniteSchemaPrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5405
                self.uid()
                self.state = 5406
                self.match(MySqlParser.DOT)
                self.state = 5407
                self.match(MySqlParser.STAR)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DefiniteFullTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5409
                self.uid()
                self.state = 5410
                self.match(MySqlParser.DOT)
                self.state = 5411
                self.uid()
                pass

            elif la_ == 5:
                localctx = MySqlParser.DefiniteFullTablePrivLevel2Context(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5413
                self.uid()
                self.state = 5414
                self.dottedId()
                pass

            elif la_ == 6:
                localctx = MySqlParser.DefiniteTablePrivLevelContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5416
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RenameUserClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.fromFirst = None # UserNameContext
            self.toFirst = None # UserNameContext

        def TO(self):
            return self.getToken(MySqlParser.TO, 0)

        def userName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UserNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UserNameContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_renameUserClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRenameUserClause" ):
                listener.enterRenameUserClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRenameUserClause" ):
                listener.exitRenameUserClause(self)




    def renameUserClause(self):

        localctx = MySqlParser.RenameUserClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 458, self.RULE_renameUserClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5419
            localctx.fromFirst = self.userName()
            self.state = 5420
            self.match(MySqlParser.TO)
            self.state = 5421
            localctx.toFirst = self.userName()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AnalyzeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def ANALYZE(self):
            return self.getToken(MySqlParser.ANALYZE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def HISTOGRAM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.HISTOGRAM)
            else:
                return self.getToken(MySqlParser.HISTOGRAM, i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)

        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def DROP(self):
            return self.getToken(MySqlParser.DROP, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def BUCKETS(self):
            return self.getToken(MySqlParser.BUCKETS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_analyzeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAnalyzeTable" ):
                listener.enterAnalyzeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAnalyzeTable" ):
                listener.exitAnalyzeTable(self)




    def analyzeTable(self):

        localctx = MySqlParser.AnalyzeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 460, self.RULE_analyzeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5423
            self.match(MySqlParser.ANALYZE)
            self.state = 5425
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==472:
                self.state = 5424
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==472):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5427
            _la = self._input.LA(1)
            if not(_la==170 or _la==737):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5428
            self.tables()
            self.state = 5446
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,786,self._ctx)
            if la_ == 1:
                self.state = 5429
                self.match(MySqlParser.UPDATE)
                self.state = 5430
                self.match(MySqlParser.HISTOGRAM)
                self.state = 5431
                self.match(MySqlParser.ON)
                self.state = 5432
                self.fullColumnName()
                self.state = 5437
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5433
                    self.match(MySqlParser.COMMA)
                    self.state = 5434
                    self.fullColumnName()
                    self.state = 5439
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5444
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==190:
                    self.state = 5440
                    self.match(MySqlParser.WITH)
                    self.state = 5441
                    self.decimalLiteral()
                    self.state = 5442
                    self.match(MySqlParser.BUCKETS)




            self.state = 5459
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,788,self._ctx)
            if la_ == 1:
                self.state = 5448
                self.match(MySqlParser.DROP)
                self.state = 5449
                self.match(MySqlParser.HISTOGRAM)
                self.state = 5450
                self.match(MySqlParser.ON)
                self.state = 5451
                self.fullColumnName()
                self.state = 5456
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5452
                    self.match(MySqlParser.COMMA)
                    self.state = 5453
                    self.fullColumnName()
                    self.state = 5458
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHECK(self):
            return self.getToken(MySqlParser.CHECK, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def checkTableOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CheckTableOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CheckTableOptionContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_checkTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTable" ):
                listener.enterCheckTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTable" ):
                listener.exitCheckTable(self)




    def checkTable(self):

        localctx = MySqlParser.CheckTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 462, self.RULE_checkTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5461
            self.match(MySqlParser.CHECK)
            self.state = 5462
            self.match(MySqlParser.TABLE)
            self.state = 5463
            self.tables()
            self.state = 5467
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==64 or _la==352 or _la==420 or _la==423 or _la==502 or _la==566:
                self.state = 5464
                self.checkTableOption()
                self.state = 5469
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ChecksumTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checksumTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChecksumTable" ):
                listener.enterChecksumTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChecksumTable" ):
                listener.exitChecksumTable(self)




    def checksumTable(self):

        localctx = MySqlParser.ChecksumTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 464, self.RULE_checksumTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5470
            self.match(MySqlParser.CHECKSUM)
            self.state = 5471
            self.match(MySqlParser.TABLE)
            self.state = 5472
            self.tables()
            self.state = 5474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==420 or _la==566:
                self.state = 5473
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==420 or _la==566):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OptimizeTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def OPTIMIZE(self):
            return self.getToken(MySqlParser.OPTIMIZE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_optimizeTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOptimizeTable" ):
                listener.enterOptimizeTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOptimizeTable" ):
                listener.exitOptimizeTable(self)




    def optimizeTable(self):

        localctx = MySqlParser.OptimizeTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 466, self.RULE_optimizeTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5476
            self.match(MySqlParser.OPTIMIZE)
            self.state = 5478
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==472:
                self.state = 5477
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==472):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5480
            _la = self._input.LA(1)
            if not(_la==170 or _la==737):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5481
            self.tables()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RepairTableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.actionOption = None # Token

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)


        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_repairTable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRepairTable" ):
                listener.enterRepairTable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRepairTable" ):
                listener.exitRepairTable(self)




    def repairTable(self):

        localctx = MySqlParser.RepairTableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 468, self.RULE_repairTable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5483
            self.match(MySqlParser.REPAIR)
            self.state = 5485
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==472:
                self.state = 5484
                localctx.actionOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==472):
                    localctx.actionOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5487
            self.match(MySqlParser.TABLE)
            self.state = 5488
            self.tables()
            self.state = 5490
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==566:
                self.state = 5489
                self.match(MySqlParser.QUICK)


            self.state = 5493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==420:
                self.state = 5492
                self.match(MySqlParser.EXTENDED)


            self.state = 5496
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==664:
                self.state = 5495
                self.match(MySqlParser.USE_FRM)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CheckTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_checkTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCheckTableOption" ):
                listener.enterCheckTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCheckTableOption" ):
                listener.exitCheckTableOption(self)




    def checkTableOption(self):

        localctx = MySqlParser.CheckTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 470, self.RULE_checkTableOption)
        try:
            self.state = 5505
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [64]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5498
                self.match(MySqlParser.FOR)
                self.state = 5499
                self.match(MySqlParser.UPGRADE)
                pass
            elif token in [566]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5500
                self.match(MySqlParser.QUICK)
                pass
            elif token in [423]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5501
                self.match(MySqlParser.FAST)
                pass
            elif token in [502]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5502
                self.match(MySqlParser.MEDIUM)
                pass
            elif token in [420]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5503
                self.match(MySqlParser.EXTENDED)
                pass
            elif token in [352]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5504
                self.match(MySqlParser.CHANGED)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CreateUdfunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.returnType = None # Token

        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_createUdfunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCreateUdfunction" ):
                listener.enterCreateUdfunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCreateUdfunction" ):
                listener.exitCreateUdfunction(self)




    def createUdfunction(self):

        localctx = MySqlParser.CreateUdfunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 472, self.RULE_createUdfunction)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5507
            self.match(MySqlParser.CREATE)
            self.state = 5509
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==333:
                self.state = 5508
                self.match(MySqlParser.AGGREGATE)


            self.state = 5511
            self.match(MySqlParser.FUNCTION)
            self.state = 5513
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,798,self._ctx)
            if la_ == 1:
                self.state = 5512
                self.ifNotExists()


            self.state = 5515
            self.uid()
            self.state = 5516
            self.match(MySqlParser.RETURNS)
            self.state = 5517
            localctx.returnType = self._input.LT(1)
            _la = self._input.LA(1)
            if not((((_la - 204)) & ~0x3f) == 0 and ((1 << (_la - 204)) & 261) != 0 or _la==636):
                localctx.returnType = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5518
            self.match(MySqlParser.SONAME)
            self.state = 5519
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class InstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_installPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInstallPlugin" ):
                listener.enterInstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInstallPlugin" ):
                listener.exitInstallPlugin(self)




    def installPlugin(self):

        localctx = MySqlParser.InstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 474, self.RULE_installPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5521
            self.match(MySqlParser.INSTALL)
            self.state = 5522
            self.match(MySqlParser.PLUGIN)
            self.state = 5523
            self.uid()
            self.state = 5524
            self.match(MySqlParser.SONAME)
            self.state = 5525
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UninstallPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_uninstallPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUninstallPlugin" ):
                listener.enterUninstallPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUninstallPlugin" ):
                listener.exitUninstallPlugin(self)




    def uninstallPlugin(self):

        localctx = MySqlParser.UninstallPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 476, self.RULE_uninstallPlugin)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5527
            self.match(MySqlParser.UNINSTALL)
            self.state = 5528
            self.match(MySqlParser.PLUGIN)
            self.state = 5529
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_setStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SetTransactionContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setTransactionStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetTransactionStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetTransaction" ):
                listener.enterSetTransaction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetTransaction" ):
                listener.exitSetTransaction(self)


    class SetCharsetContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetCharset" ):
                listener.enterSetCharset(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetCharset" ):
                listener.exitSetCharset(self)


    class SetNamesContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)
        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNames" ):
                listener.enterSetNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNames" ):
                listener.exitSetNames(self)


    class SetPasswordContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setPasswordStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetPasswordStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetPassword" ):
                listener.enterSetPassword(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetPassword" ):
                listener.exitSetPassword(self)


    class SetAutocommitContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def setAutocommitStatement(self):
            return self.getTypedRuleContext(MySqlParser.SetAutocommitStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetAutocommit" ):
                listener.enterSetAutocommit(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetAutocommit" ):
                listener.exitSetAutocommit(self)


    class SetNewValueInsideTriggerContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def fullId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullIdContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetNewValueInsideTrigger" ):
                listener.enterSetNewValueInsideTrigger(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetNewValueInsideTrigger" ):
                listener.exitSetNewValueInsideTrigger(self)


    class SetVariableContext(SetStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SetStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)

        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)
        def VAR_ASSIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.VAR_ASSIGN)
            else:
                return self.getToken(MySqlParser.VAR_ASSIGN, i)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def ON(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ON)
            else:
                return self.getToken(MySqlParser.ON, i)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSetVariable" ):
                listener.enterSetVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSetVariable" ):
                listener.exitSetVariable(self)



    def setStatement(self):

        localctx = MySqlParser.SetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 478, self.RULE_setStatement)
        self._la = 0 # Token type
        try:
            self.state = 5583
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,806,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SetVariableContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5531
                self.match(MySqlParser.SET)
                self.state = 5532
                self.variableClause()
                self.state = 5533
                _la = self._input.LA(1)
                if not(_la==1101 or _la==1117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5536
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,799,self._ctx)
                if la_ == 1:
                    self.state = 5534
                    self.expression(0)
                    pass

                elif la_ == 2:
                    self.state = 5535
                    self.match(MySqlParser.ON)
                    pass


                self.state = 5547
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5538
                    self.match(MySqlParser.COMMA)
                    self.state = 5539
                    self.variableClause()
                    self.state = 5540
                    _la = self._input.LA(1)
                    if not(_la==1101 or _la==1117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5543
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,800,self._ctx)
                    if la_ == 1:
                        self.state = 5541
                        self.expression(0)
                        pass

                    elif la_ == 2:
                        self.state = 5542
                        self.match(MySqlParser.ON)
                        pass


                    self.state = 5549
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.SetCharsetContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5550
                self.match(MySqlParser.SET)
                self.state = 5551
                self.charSet()
                self.state = 5554
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1138, 1141]:
                    self.state = 5552
                    self.charsetName()
                    pass
                elif token in [42]:
                    self.state = 5553
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 3:
                localctx = MySqlParser.SetNamesContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5556
                self.match(MySqlParser.SET)
                self.state = 5557
                self.match(MySqlParser.NAMES)
                self.state = 5564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [224, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 1138, 1141]:
                    self.state = 5558
                    self.charsetName()
                    self.state = 5561
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==27:
                        self.state = 5559
                        self.match(MySqlParser.COLLATE)
                        self.state = 5560
                        self.collationName()


                    pass
                elif token in [42]:
                    self.state = 5563
                    self.match(MySqlParser.DEFAULT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 4:
                localctx = MySqlParser.SetPasswordContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5566
                self.setPasswordStatement()
                pass

            elif la_ == 5:
                localctx = MySqlParser.SetTransactionContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5567
                self.setTransactionStatement()
                pass

            elif la_ == 6:
                localctx = MySqlParser.SetAutocommitContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5568
                self.setAutocommitStatement()
                pass

            elif la_ == 7:
                localctx = MySqlParser.SetNewValueInsideTriggerContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5569
                self.match(MySqlParser.SET)
                self.state = 5570
                self.fullId()
                self.state = 5571
                _la = self._input.LA(1)
                if not(_la==1101 or _la==1117):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5572
                self.expression(0)
                self.state = 5580
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5573
                    self.match(MySqlParser.COMMA)
                    self.state = 5574
                    self.fullId()
                    self.state = 5575
                    _la = self._input.LA(1)
                    if not(_la==1101 or _la==1117):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5576
                    self.expression(0)
                    self.state = 5582
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_showStatement

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class ShowOpenTablesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowOpenTables" ):
                listener.enterShowOpenTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowOpenTables" ):
                listener.exitShowOpenTables(self)


    class ShowGlobalInfoContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showGlobalInfoClause(self):
            return self.getTypedRuleContext(MySqlParser.ShowGlobalInfoClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfo" ):
                listener.enterShowGlobalInfo(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfo" ):
                listener.exitShowGlobalInfo(self)


    class ShowCreateFullIdObjectContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.namedEntity = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)
        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)
        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TRIGGER(self):
            return self.getToken(MySqlParser.TRIGGER, 0)
        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateFullIdObject" ):
                listener.enterShowCreateFullIdObject(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateFullIdObject" ):
                listener.exitShowCreateFullIdObject(self)


    class ShowCreateUserContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def USER(self):
            return self.getToken(MySqlParser.USER, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateUser" ):
                listener.enterShowCreateUser(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateUser" ):
                listener.exitShowCreateUser(self)


    class ShowErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowErrors" ):
                listener.enterShowErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowErrors" ):
                listener.exitShowErrors(self)


    class ShowCountErrorsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.errorFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)
        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCountErrors" ):
                listener.enterShowCountErrors(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCountErrors" ):
                listener.exitShowCountErrors(self)


    class ShowObjectFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showCommonEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowCommonEntityContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowObjectFilter" ):
                listener.enterShowObjectFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowObjectFilter" ):
                listener.exitShowObjectFilter(self)


    class ShowCreateDbContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CREATE(self):
            return self.getToken(MySqlParser.CREATE, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def ifNotExists(self):
            return self.getTypedRuleContext(MySqlParser.IfNotExistsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCreateDb" ):
                listener.enterShowCreateDb(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCreateDb" ):
                listener.exitShowCreateDb(self)


    class ShowEngineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.engineOption = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowEngine" ):
                listener.enterShowEngine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowEngine" ):
                listener.exitShowEngine(self)


    class ShowSchemaFilterContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def showSchemaEntity(self):
            return self.getTypedRuleContext(MySqlParser.ShowSchemaEntityContext,0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaFilter" ):
                listener.enterShowSchemaFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaFilter" ):
                listener.exitShowSchemaFilter(self)


    class ShowIndexesContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.indexFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)
        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)
        def KEYS(self):
            return self.getToken(MySqlParser.KEYS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowIndexes" ):
                listener.enterShowIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowIndexes" ):
                listener.exitShowIndexes(self)


    class ShowLogEventsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.filename = None # Token
            self.fromPosition = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)
        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)
        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowLogEvents" ):
                listener.enterShowLogEvents(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowLogEvents" ):
                listener.exitShowLogEvents(self)


    class ShowMasterLogsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.logFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowMasterLogs" ):
                listener.enterShowMasterLogs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowMasterLogs" ):
                listener.exitShowMasterLogs(self)


    class ShowGrantsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGrants" ):
                listener.enterShowGrants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGrants" ):
                listener.exitShowGrants(self)


    class ShowSlaveStatusContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSlaveStatus" ):
                listener.enterShowSlaveStatus(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSlaveStatus" ):
                listener.exitShowSlaveStatus(self)


    class ShowRoutineContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.routine = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)
        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)
        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowRoutine" ):
                listener.enterShowRoutine(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowRoutine" ):
                listener.exitShowRoutine(self)


    class ShowProfileContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.queryCount = None # DecimalLiteralContext
            self.offset = None # DecimalLiteralContext
            self.rowCount = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)
        def showProfileType(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ShowProfileTypeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ShowProfileTypeContext,i)

        def LIMIT(self):
            return self.getToken(MySqlParser.LIMIT, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)
        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfile" ):
                listener.enterShowProfile(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfile" ):
                listener.exitShowProfile(self)


    class ShowColumnsContext(ShowStatementContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ShowStatementContext
            super().__init__(parser)
            self.columnsFormat = None # Token
            self.tableFormat = None # Token
            self.schemaFormat = None # Token
            self.copyFrom(ctx)

        def SHOW(self):
            return self.getToken(MySqlParser.SHOW, 0)
        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)
        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)
        def FROM(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.FROM)
            else:
                return self.getToken(MySqlParser.FROM, i)
        def IN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.IN)
            else:
                return self.getToken(MySqlParser.IN, i)
        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)

        def showFilter(self):
            return self.getTypedRuleContext(MySqlParser.ShowFilterContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowColumns" ):
                listener.enterShowColumns(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowColumns" ):
                listener.exitShowColumns(self)



    def showStatement(self):

        localctx = MySqlParser.ShowStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 480, self.RULE_showStatement)
        self._la = 0 # Token type
        try:
            self.state = 5738
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,829,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ShowMasterLogsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5585
                self.match(MySqlParser.SHOW)
                self.state = 5586
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==224 or _la==475):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5587
                self.match(MySqlParser.LOGS)
                pass

            elif la_ == 2:
                localctx = MySqlParser.ShowLogEventsContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5588
                self.match(MySqlParser.SHOW)
                self.state = 5589
                localctx.logFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==343 or _la==575):
                    localctx.logFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5590
                self.match(MySqlParser.EVENTS)
                self.state = 5593
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==79:
                    self.state = 5591
                    self.match(MySqlParser.IN)
                    self.state = 5592
                    localctx.filename = self.match(MySqlParser.STRING_LITERAL)


                self.state = 5597
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67:
                    self.state = 5595
                    self.match(MySqlParser.FROM)
                    self.state = 5596
                    localctx.fromPosition = self.decimalLiteral()


                self.state = 5606
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 5599
                    self.match(MySqlParser.LIMIT)
                    self.state = 5603
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,809,self._ctx)
                    if la_ == 1:
                        self.state = 5600
                        localctx.offset = self.decimalLiteral()
                        self.state = 5601
                        self.match(MySqlParser.COMMA)


                    self.state = 5605
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 3:
                localctx = MySqlParser.ShowObjectFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5608
                self.match(MySqlParser.SHOW)
                self.state = 5609
                self.showCommonEntity()
                self.state = 5611
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97 or _la==188:
                    self.state = 5610
                    self.showFilter()


                pass

            elif la_ == 4:
                localctx = MySqlParser.ShowColumnsContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 5613
                self.match(MySqlParser.SHOW)
                self.state = 5615
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==434:
                    self.state = 5614
                    self.match(MySqlParser.FULL)


                self.state = 5617
                localctx.columnsFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==363 or _la==425):
                    localctx.columnsFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5618
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==79):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5619
                self.tableName()
                self.state = 5622
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==79:
                    self.state = 5620
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==79):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5621
                    self.uid()


                self.state = 5625
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97 or _la==188:
                    self.state = 5624
                    self.showFilter()


                pass

            elif la_ == 5:
                localctx = MySqlParser.ShowCreateDbContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 5627
                self.match(MySqlParser.SHOW)
                self.state = 5628
                self.match(MySqlParser.CREATE)
                self.state = 5629
                localctx.schemaFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==39 or _la==149):
                    localctx.schemaFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5631
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,815,self._ctx)
                if la_ == 1:
                    self.state = 5630
                    self.ifNotExists()


                self.state = 5633
                self.uid()
                pass

            elif la_ == 6:
                localctx = MySqlParser.ShowCreateFullIdObjectContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 5634
                self.match(MySqlParser.SHOW)
                self.state = 5635
                self.match(MySqlParser.CREATE)
                self.state = 5636
                localctx.namedEntity = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 130)) & ~0x3f) == 0 and ((1 << (_la - 130)) & 36283883716609) != 0 or _la==413 or _la==435 or _la==669):
                    localctx.namedEntity = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5637
                self.fullId()
                pass

            elif la_ == 7:
                localctx = MySqlParser.ShowCreateUserContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 5638
                self.match(MySqlParser.SHOW)
                self.state = 5639
                self.match(MySqlParser.CREATE)
                self.state = 5640
                self.match(MySqlParser.USER)
                self.state = 5641
                self.userName()
                pass

            elif la_ == 8:
                localctx = MySqlParser.ShowEngineContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 5642
                self.match(MySqlParser.SHOW)
                self.state = 5643
                self.match(MySqlParser.ENGINE)
                self.state = 5644
                self.engineName()
                self.state = 5645
                localctx.engineOption = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==511 or _la==632):
                    localctx.engineOption = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                localctx = MySqlParser.ShowGlobalInfoContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 5647
                self.match(MySqlParser.SHOW)
                self.state = 5648
                self.showGlobalInfoClause()
                pass

            elif la_ == 10:
                localctx = MySqlParser.ShowErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 5649
                self.match(MySqlParser.SHOW)
                self.state = 5650
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==410 or _la==673):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5658
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==98:
                    self.state = 5651
                    self.match(MySqlParser.LIMIT)
                    self.state = 5655
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,816,self._ctx)
                    if la_ == 1:
                        self.state = 5652
                        localctx.offset = self.decimalLiteral()
                        self.state = 5653
                        self.match(MySqlParser.COMMA)


                    self.state = 5657
                    localctx.rowCount = self.decimalLiteral()


                pass

            elif la_ == 11:
                localctx = MySqlParser.ShowCountErrorsContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 5660
                self.match(MySqlParser.SHOW)
                self.state = 5661
                self.match(MySqlParser.COUNT)
                self.state = 5662
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5663
                self.match(MySqlParser.STAR)
                self.state = 5664
                self.match(MySqlParser.RR_BRACKET)
                self.state = 5665
                localctx.errorFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==410 or _la==673):
                    localctx.errorFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 12:
                localctx = MySqlParser.ShowSchemaFilterContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 5666
                self.match(MySqlParser.SHOW)
                self.state = 5667
                self.showSchemaEntity()
                self.state = 5670
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==79:
                    self.state = 5668
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==79):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5669
                    self.uid()


                self.state = 5673
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97 or _la==188:
                    self.state = 5672
                    self.showFilter()


                pass

            elif la_ == 13:
                localctx = MySqlParser.ShowRoutineContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 5675
                self.match(MySqlParser.SHOW)
                self.state = 5676
                localctx.routine = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==130 or _la==435):
                    localctx.routine = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5677
                self.match(MySqlParser.CODE)
                self.state = 5678
                self.fullId()
                pass

            elif la_ == 14:
                localctx = MySqlParser.ShowGrantsContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 5679
                self.match(MySqlParser.SHOW)
                self.state = 5680
                self.match(MySqlParser.GRANTS)
                self.state = 5683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 5681
                    self.match(MySqlParser.FOR)
                    self.state = 5682
                    self.userName()


                pass

            elif la_ == 15:
                localctx = MySqlParser.ShowIndexesContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 5685
                self.match(MySqlParser.SHOW)
                self.state = 5686
                localctx.indexFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==80 or _la==91 or _la==450):
                    localctx.indexFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5687
                localctx.tableFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==67 or _la==79):
                    localctx.tableFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5688
                self.tableName()
                self.state = 5691
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==79:
                    self.state = 5689
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==79):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5690
                    self.uid()


                self.state = 5695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==188:
                    self.state = 5693
                    self.match(MySqlParser.WHERE)
                    self.state = 5694
                    self.expression(0)


                pass

            elif la_ == 16:
                localctx = MySqlParser.ShowOpenTablesContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 5697
                self.match(MySqlParser.SHOW)
                self.state = 5698
                self.match(MySqlParser.OPEN)
                self.state = 5699
                self.match(MySqlParser.TABLES)
                self.state = 5702
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==67 or _la==79:
                    self.state = 5700
                    localctx.schemaFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==67 or _la==79):
                        localctx.schemaFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 5701
                    self.uid()


                self.state = 5705
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==97 or _la==188:
                    self.state = 5704
                    self.showFilter()


                pass

            elif la_ == 17:
                localctx = MySqlParser.ShowProfileContext(self, localctx)
                self.enterOuterAlt(localctx, 17)
                self.state = 5707
                self.match(MySqlParser.SHOW)
                self.state = 5708
                self.match(MySqlParser.PROFILE)
                self.state = 5709
                self.showProfileType()
                self.state = 5714
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5710
                    self.match(MySqlParser.COMMA)
                    self.state = 5711
                    self.showProfileType()
                    self.state = 5716
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 5720
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 5717
                    self.match(MySqlParser.FOR)
                    self.state = 5718
                    self.match(MySqlParser.QUERY)
                    self.state = 5719
                    localctx.queryCount = self.decimalLiteral()


                self.state = 5722
                self.match(MySqlParser.LIMIT)
                self.state = 5726
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,827,self._ctx)
                if la_ == 1:
                    self.state = 5723
                    localctx.offset = self.decimalLiteral()
                    self.state = 5724
                    self.match(MySqlParser.COMMA)


                self.state = 5728
                localctx.rowCount = self.decimalLiteral()
                pass

            elif la_ == 18:
                localctx = MySqlParser.ShowSlaveStatusContext(self, localctx)
                self.enterOuterAlt(localctx, 18)
                self.state = 5730
                self.match(MySqlParser.SHOW)
                self.state = 5731
                self.match(MySqlParser.SLAVE)
                self.state = 5732
                self.match(MySqlParser.STATUS)
                self.state = 5736
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 5733
                    self.match(MySqlParser.FOR)
                    self.state = 5734
                    self.match(MySqlParser.CHANNEL)
                    self.state = 5735
                    self.match(MySqlParser.STRING_LITERAL)


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class VariableClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def AT_SIGN(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.AT_SIGN)
            else:
                return self.getToken(MySqlParser.AT_SIGN, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_variableClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterVariableClause" ):
                listener.enterVariableClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitVariableClause" ):
                listener.exitVariableClause(self)




    def variableClause(self):

        localctx = MySqlParser.VariableClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 482, self.RULE_variableClause)
        self._la = 0 # Token type
        try:
            self.state = 5750
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1153]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5740
                self.match(MySqlParser.LOCAL_ID)
                pass
            elif token in [1154]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5741
                self.match(MySqlParser.GLOBAL_ID)
                pass
            elif token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1130, 1138, 1141, 1149, 1150]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5747
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,831,self._ctx)
                if la_ == 1:
                    self.state = 5744
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1130:
                        self.state = 5742
                        self.match(MySqlParser.AT_SIGN)
                        self.state = 5743
                        self.match(MySqlParser.AT_SIGN)


                    self.state = 5746
                    _la = self._input.LA(1)
                    if not(_la==437 or _la==472 or _la==607):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5749
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowCommonEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def DATABASES(self):
            return self.getToken(MySqlParser.DATABASES, 0)

        def SCHEMAS(self):
            return self.getToken(MySqlParser.SCHEMAS, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PROCEDURE(self):
            return self.getToken(MySqlParser.PROCEDURE, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showCommonEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowCommonEntity" ):
                listener.enterShowCommonEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowCommonEntity" ):
                listener.exitShowCommonEntity(self)




    def showCommonEntity(self):

        localctx = MySqlParser.ShowCommonEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 484, self.RULE_showCommonEntity)
        self._la = 0 # Token type
        try:
            self.state = 5765
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [25]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5752
                self.match(MySqlParser.CHARACTER)
                self.state = 5753
                self.match(MySqlParser.SET)
                pass
            elif token in [839]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5754
                self.match(MySqlParser.COLLATION)
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5755
                self.match(MySqlParser.DATABASES)
                pass
            elif token in [150]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5756
                self.match(MySqlParser.SCHEMAS)
                pass
            elif token in [435]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5757
                self.match(MySqlParser.FUNCTION)
                self.state = 5758
                self.match(MySqlParser.STATUS)
                pass
            elif token in [130]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5759
                self.match(MySqlParser.PROCEDURE)
                self.state = 5760
                self.match(MySqlParser.STATUS)
                pass
            elif token in [437, 607, 632, 668]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==437 or _la==607:
                    self.state = 5761
                    _la = self._input.LA(1)
                    if not(_la==437 or _la==607):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5764
                _la = self._input.LA(1)
                if not(_la==632 or _la==668):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowFilterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def WHERE(self):
            return self.getToken(MySqlParser.WHERE, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_showFilter

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowFilter" ):
                listener.enterShowFilter(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowFilter" ):
                listener.exitShowFilter(self)




    def showFilter(self):

        localctx = MySqlParser.ShowFilterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 486, self.RULE_showFilter)
        try:
            self.state = 5771
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [97]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5767
                self.match(MySqlParser.LIKE)
                self.state = 5768
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [188]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5769
                self.match(MySqlParser.WHERE)
                self.state = 5770
                self.expression(0)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowGlobalInfoClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showGlobalInfoClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowGlobalInfoClause" ):
                listener.enterShowGlobalInfoClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowGlobalInfoClause" ):
                listener.exitShowGlobalInfoClause(self)




    def showGlobalInfoClause(self):

        localctx = MySqlParser.ShowGlobalInfoClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 488, self.RULE_showGlobalInfoClause)
        self._la = 0 # Token type
        try:
            self.state = 5790
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [408, 634]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5774
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==634:
                    self.state = 5773
                    self.match(MySqlParser.STORAGE)


                self.state = 5776
                self.match(MySqlParser.ENGINES)
                pass
            elif token in [475]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5777
                self.match(MySqlParser.MASTER)
                self.state = 5778
                self.match(MySqlParser.STATUS)
                pass
            elif token in [554]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5779
                self.match(MySqlParser.PLUGINS)
                pass
            elif token in [720]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5780
                self.match(MySqlParser.PRIVILEGES)
                pass
            elif token in [434, 561]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==434:
                    self.state = 5781
                    self.match(MySqlParser.FULL)


                self.state = 5784
                self.match(MySqlParser.PROCESSLIST)
                pass
            elif token in [563]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5785
                self.match(MySqlParser.PROFILES)
                pass
            elif token in [612]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5786
                self.match(MySqlParser.SLAVE)
                self.state = 5787
                self.match(MySqlParser.HOSTS)
                pass
            elif token in [337]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5788
                self.match(MySqlParser.AUTHORS)
                pass
            elif token in [381]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5789
                self.match(MySqlParser.CONTRIBUTORS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowSchemaEntityContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showSchemaEntity

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowSchemaEntity" ):
                listener.enterShowSchemaEntity(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowSchemaEntity" ):
                listener.exitShowSchemaEntity(self)




    def showSchemaEntity(self):

        localctx = MySqlParser.ShowSchemaEntityContext(self, self._ctx, self.state)
        self.enterRule(localctx, 490, self.RULE_showSchemaEntity)
        self._la = 0 # Token type
        try:
            self.state = 5800
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [414]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5792
                self.match(MySqlParser.EVENTS)
                pass
            elif token in [170]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5793
                self.match(MySqlParser.TABLE)
                self.state = 5794
                self.match(MySqlParser.STATUS)
                pass
            elif token in [434, 737]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5796
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==434:
                    self.state = 5795
                    self.match(MySqlParser.FULL)


                self.state = 5798
                self.match(MySqlParser.TABLES)
                pass
            elif token in [653]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5799
                self.match(MySqlParser.TRIGGERS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShowProfileTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_showProfileType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShowProfileType" ):
                listener.enterShowProfileType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShowProfileType" ):
                listener.exitShowProfileType(self)




    def showProfileType(self):

        localctx = MySqlParser.ShowProfileTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 492, self.RULE_showProfileType)
        try:
            self.state = 5814
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [6]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5802
                self.match(MySqlParser.ALL)
                pass
            elif token in [345]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5803
                self.match(MySqlParser.BLOCK)
                self.state = 5804
                self.match(MySqlParser.IO)
                pass
            elif token in [380]:
                self.enterOuterAlt(localctx, 3)
                self.state = 5805
                self.match(MySqlParser.CONTEXT)
                self.state = 5806
                self.match(MySqlParser.SWITCHES)
                pass
            elif token in [383]:
                self.enterOuterAlt(localctx, 4)
                self.state = 5807
                self.match(MySqlParser.CPU)
                pass
            elif token in [461]:
                self.enterOuterAlt(localctx, 5)
                self.state = 5808
                self.match(MySqlParser.IPC)
                pass
            elif token in [787]:
                self.enterOuterAlt(localctx, 6)
                self.state = 5809
                self.match(MySqlParser.MEMORY)
                pass
            elif token in [542]:
                self.enterOuterAlt(localctx, 7)
                self.state = 5810
                self.match(MySqlParser.PAGE)
                self.state = 5811
                self.match(MySqlParser.FAULTS)
                pass
            elif token in [619]:
                self.enterOuterAlt(localctx, 8)
                self.state = 5812
                self.match(MySqlParser.SOURCE)
                pass
            elif token in [642]:
                self.enterOuterAlt(localctx, 9)
                self.state = 5813
                self.match(MySqlParser.SWAPS)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BinlogStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_binlogStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinlogStatement" ):
                listener.enterBinlogStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinlogStatement" ):
                listener.exitBinlogStatement(self)




    def binlogStatement(self):

        localctx = MySqlParser.BinlogStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 494, self.RULE_binlogStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5816
            self.match(MySqlParser.BINLOG)
            self.state = 5817
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CacheIndexStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.schema = None # UidContext

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def tableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableIndexesContext,i)


        def IN(self):
            return self.getToken(MySqlParser.IN, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_cacheIndexStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCacheIndexStatement" ):
                listener.enterCacheIndexStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCacheIndexStatement" ):
                listener.exitCacheIndexStatement(self)




    def cacheIndexStatement(self):

        localctx = MySqlParser.CacheIndexStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 496, self.RULE_cacheIndexStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5819
            self.match(MySqlParser.CACHE)
            self.state = 5820
            self.match(MySqlParser.INDEX)
            self.state = 5821
            self.tableIndexes()
            self.state = 5826
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5822
                self.match(MySqlParser.COMMA)
                self.state = 5823
                self.tableIndexes()
                self.state = 5828
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 5836
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 5829
                self.match(MySqlParser.PARTITION)
                self.state = 5830
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5833
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 5831
                    self.uidList()
                    pass
                elif token in [6]:
                    self.state = 5832
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5835
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5838
            self.match(MySqlParser.IN)
            self.state = 5839
            localctx.schema = self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.flushFormat = None # Token

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def flushOption(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FlushOptionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FlushOptionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def NO_WRITE_TO_BINLOG(self):
            return self.getToken(MySqlParser.NO_WRITE_TO_BINLOG, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushStatement" ):
                listener.enterFlushStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushStatement" ):
                listener.exitFlushStatement(self)




    def flushStatement(self):

        localctx = MySqlParser.FlushStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 498, self.RULE_flushStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5841
            self.match(MySqlParser.FLUSH)
            self.state = 5843
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==114 or _la==472:
                self.state = 5842
                localctx.flushFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==114 or _la==472):
                    localctx.flushFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5845
            self.flushOption()
            self.state = 5850
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5846
                self.match(MySqlParser.COMMA)
                self.state = 5847
                self.flushOption()
                self.state = 5852
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KillStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.connectionFormat = None # Token

        def KILL(self):
            return self.getToken(MySqlParser.KILL, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_killStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKillStatement" ):
                listener.enterKillStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKillStatement" ):
                listener.exitKillStatement(self)




    def killStatement(self):

        localctx = MySqlParser.KillStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 500, self.RULE_killStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5853
            self.match(MySqlParser.KILL)
            self.state = 5855
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,847,self._ctx)
            if la_ == 1:
                self.state = 5854
                localctx.connectionFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==374 or _la==565):
                    localctx.connectionFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5857
            self.expression(0)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadIndexIntoCacheContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(MySqlParser.LOAD, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def INTO(self):
            return self.getToken(MySqlParser.INTO, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def loadedTableIndexes(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LoadedTableIndexesContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LoadedTableIndexesContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadIndexIntoCache

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadIndexIntoCache" ):
                listener.enterLoadIndexIntoCache(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadIndexIntoCache" ):
                listener.exitLoadIndexIntoCache(self)




    def loadIndexIntoCache(self):

        localctx = MySqlParser.LoadIndexIntoCacheContext(self, self._ctx, self.state)
        self.enterRule(localctx, 502, self.RULE_loadIndexIntoCache)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5859
            self.match(MySqlParser.LOAD)
            self.state = 5860
            self.match(MySqlParser.INDEX)
            self.state = 5861
            self.match(MySqlParser.INTO)
            self.state = 5862
            self.match(MySqlParser.CACHE)
            self.state = 5863
            self.loadedTableIndexes()
            self.state = 5868
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 5864
                self.match(MySqlParser.COMMA)
                self.state = 5865
                self.loadedTableIndexes()
                self.state = 5870
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResetStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resetStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResetStatement" ):
                listener.enterResetStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResetStatement" ):
                listener.exitResetStatement(self)




    def resetStatement(self):

        localctx = MySqlParser.ResetStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 504, self.RULE_resetStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5871
            self.match(MySqlParser.RESET)
            self.state = 5872
            self.match(MySqlParser.QUERY)
            self.state = 5873
            self.match(MySqlParser.CACHE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ShutdownStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_shutdownStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterShutdownStatement" ):
                listener.enterShutdownStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitShutdownStatement" ):
                listener.exitShutdownStatement(self)




    def shutdownStatement(self):

        localctx = MySqlParser.ShutdownStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 506, self.RULE_shutdownStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5875
            self.match(MySqlParser.SHUTDOWN)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.indexFormat = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def uidList(self):
            return self.getTypedRuleContext(MySqlParser.UidListContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_tableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableIndexes" ):
                listener.enterTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableIndexes" ):
                listener.exitTableIndexes(self)




    def tableIndexes(self):

        localctx = MySqlParser.TableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 508, self.RULE_tableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5877
            self.tableName()
            self.state = 5885
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==80 or _la==90 or _la==1126:
                self.state = 5879
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 5878
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5881
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5882
                self.uidList()
                self.state = 5883
                self.match(MySqlParser.RR_BRACKET)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_flushOption

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class TableFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def TABLE(self):
            return self.getToken(MySqlParser.TABLE, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def tables(self):
            return self.getTypedRuleContext(MySqlParser.TablesContext,0)

        def flushTableOption(self):
            return self.getTypedRuleContext(MySqlParser.FlushTableOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableFlushOption" ):
                listener.enterTableFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableFlushOption" ):
                listener.exitTableFlushOption(self)


    class ChannelFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def channelOption(self):
            return self.getTypedRuleContext(MySqlParser.ChannelOptionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterChannelFlushOption" ):
                listener.enterChannelFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitChannelFlushOption" ):
                listener.exitChannelFlushOption(self)


    class SimpleFlushOptionContext(FlushOptionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FlushOptionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)
        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)
        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)
        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)
        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)
        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)
        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)
        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)
        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)
        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)
        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)
        def READ(self):
            return self.getToken(MySqlParser.READ, 0)
        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)
        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)
        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)
        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)
        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFlushOption" ):
                listener.enterSimpleFlushOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFlushOption" ):
                listener.exitSimpleFlushOption(self)



    def flushOption(self):

        localctx = MySqlParser.FlushOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 510, self.RULE_flushOption)
        self._la = 0 # Token type
        try:
            self.state = 5919
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,857,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 5905
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [392]:
                    self.state = 5887
                    self.match(MySqlParser.DES_KEY_FILE)
                    pass
                elif token in [445]:
                    self.state = 5888
                    self.match(MySqlParser.HOSTS)
                    pass
                elif token in [224, 407, 409, 436, 474, 572, 613]:
                    self.state = 5890
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==224 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & 536870917) != 0 or _la==572 or _la==613:
                        self.state = 5889
                        _la = self._input.LA(1)
                        if not(_la==224 or (((_la - 407)) & ~0x3f) == 0 and ((1 << (_la - 407)) & 536870917) != 0 or _la==572 or _la==613):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()


                    self.state = 5892
                    self.match(MySqlParser.LOGS)
                    pass
                elif token in [538]:
                    self.state = 5893
                    self.match(MySqlParser.OPTIMIZER_COSTS)
                    pass
                elif token in [720]:
                    self.state = 5894
                    self.match(MySqlParser.PRIVILEGES)
                    pass
                elif token in [565]:
                    self.state = 5895
                    self.match(MySqlParser.QUERY)
                    self.state = 5896
                    self.match(MySqlParser.CACHE)
                    pass
                elif token in [632]:
                    self.state = 5897
                    self.match(MySqlParser.STATUS)
                    pass
                elif token in [665]:
                    self.state = 5898
                    self.match(MySqlParser.USER_RESOURCES)
                    pass
                elif token in [737]:
                    self.state = 5899
                    self.match(MySqlParser.TABLES)
                    self.state = 5903
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==190:
                        self.state = 5900
                        self.match(MySqlParser.WITH)
                        self.state = 5901
                        self.match(MySqlParser.READ)
                        self.state = 5902
                        self.match(MySqlParser.LOCK)


                    pass
                else:
                    raise NoViableAltException(self)

                pass

            elif la_ == 2:
                localctx = MySqlParser.ChannelFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 5907
                self.match(MySqlParser.RELAY)
                self.state = 5908
                self.match(MySqlParser.LOGS)
                self.state = 5910
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 5909
                    self.channelOption()


                pass

            elif la_ == 3:
                localctx = MySqlParser.TableFlushOptionContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 5912
                _la = self._input.LA(1)
                if not(_la==170 or _la==737):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5914
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,855,self._ctx)
                if la_ == 1:
                    self.state = 5913
                    self.tables()


                self.state = 5917
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64 or _la==190:
                    self.state = 5916
                    self.flushTableOption()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FlushTableOptionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WITH(self):
            return self.getToken(MySqlParser.WITH, 0)

        def READ(self):
            return self.getToken(MySqlParser.READ, 0)

        def LOCK(self):
            return self.getToken(MySqlParser.LOCK, 0)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_flushTableOption

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFlushTableOption" ):
                listener.enterFlushTableOption(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFlushTableOption" ):
                listener.exitFlushTableOption(self)




    def flushTableOption(self):

        localctx = MySqlParser.FlushTableOptionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 512, self.RULE_flushTableOption)
        try:
            self.state = 5926
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [190]:
                self.enterOuterAlt(localctx, 1)
                self.state = 5921
                self.match(MySqlParser.WITH)
                self.state = 5922
                self.match(MySqlParser.READ)
                self.state = 5923
                self.match(MySqlParser.LOCK)
                pass
            elif token in [64]:
                self.enterOuterAlt(localctx, 2)
                self.state = 5924
                self.match(MySqlParser.FOR)
                self.state = 5925
                self.match(MySqlParser.EXPORT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadedTableIndexesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.partitionList = None # UidListContext
            self.indexFormat = None # Token
            self.indexList = None # UidListContext

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)

        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)

        def IGNORE(self):
            return self.getToken(MySqlParser.IGNORE, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def uidList(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidListContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidListContext,i)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def INDEX(self):
            return self.getToken(MySqlParser.INDEX, 0)

        def KEY(self):
            return self.getToken(MySqlParser.KEY, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_loadedTableIndexes

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLoadedTableIndexes" ):
                listener.enterLoadedTableIndexes(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLoadedTableIndexes" ):
                listener.exitLoadedTableIndexes(self)




    def loadedTableIndexes(self):

        localctx = MySqlParser.LoadedTableIndexesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 514, self.RULE_loadedTableIndexes)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5928
            self.tableName()
            self.state = 5936
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 5929
                self.match(MySqlParser.PARTITION)
                self.state = 5930
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5933
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                    self.state = 5931
                    localctx.partitionList = self.uidList()
                    pass
                elif token in [6]:
                    self.state = 5932
                    self.match(MySqlParser.ALL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 5935
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5945
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,862,self._ctx)
            if la_ == 1:
                self.state = 5939
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==80 or _la==90:
                    self.state = 5938
                    localctx.indexFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==80 or _la==90):
                        localctx.indexFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 5941
                self.match(MySqlParser.LR_BRACKET)
                self.state = 5942
                localctx.indexList = self.uidList()
                self.state = 5943
                self.match(MySqlParser.RR_BRACKET)


            self.state = 5949
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==77:
                self.state = 5947
                self.match(MySqlParser.IGNORE)
                self.state = 5948
                self.match(MySqlParser.LEAVES)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.column = None # UidContext
            self.pattern = None # Token

        def tableName(self):
            return self.getTypedRuleContext(MySqlParser.TableNameContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDescribeStatement" ):
                listener.enterSimpleDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDescribeStatement" ):
                listener.exitSimpleDescribeStatement(self)




    def simpleDescribeStatement(self):

        localctx = MySqlParser.SimpleDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 516, self.RULE_simpleDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5951
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2305948562329960448) != 0):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5952
            self.tableName()
            self.state = 5955
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,864,self._ctx)
            if la_ == 1:
                self.state = 5953
                localctx.column = self.uid()

            elif la_ == 2:
                self.state = 5954
                localctx.pattern = self.match(MySqlParser.STRING_LITERAL)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullDescribeStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.command = None # Token
            self.formatType = None # Token
            self.formatValue = None # Token

        def describeObjectClause(self):
            return self.getTypedRuleContext(MySqlParser.DescribeObjectClauseContext,0)


        def EXPLAIN(self):
            return self.getToken(MySqlParser.EXPLAIN, 0)

        def DESCRIBE(self):
            return self.getToken(MySqlParser.DESCRIBE, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullDescribeStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullDescribeStatement" ):
                listener.enterFullDescribeStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullDescribeStatement" ):
                listener.exitFullDescribeStatement(self)




    def fullDescribeStatement(self):

        localctx = MySqlParser.FullDescribeStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 518, self.RULE_fullDescribeStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5957
            localctx.command = self._input.LT(1)
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 2305948562329960448) != 0):
                localctx.command = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 5961
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==420 or _la==548 or _la==880:
                self.state = 5958
                localctx.formatType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==420 or _la==548 or _la==880):
                    localctx.formatType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 5959
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 5960
                localctx.formatValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==464 or _la==650):
                    localctx.formatValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 5963
            self.describeObjectClause()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_helpStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHelpStatement" ):
                listener.enterHelpStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHelpStatement" ):
                listener.exitHelpStatement(self)




    def helpStatement(self):

        localctx = MySqlParser.HelpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 520, self.RULE_helpStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5965
            self.match(MySqlParser.HELP)
            self.state = 5966
            self.match(MySqlParser.STRING_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(MySqlParser.USE, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_useStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUseStatement" ):
                listener.enterUseStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUseStatement" ):
                listener.exitUseStatement(self)




    def useStatement(self):

        localctx = MySqlParser.UseStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 522, self.RULE_useStatement)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5968
            self.match(MySqlParser.USE)
            self.state = 5969
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SIGNAL(self):
            return self.getToken(MySqlParser.SIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_signalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalStatement" ):
                listener.enterSignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalStatement" ):
                listener.exitSignalStatement(self)




    def signalStatement(self):

        localctx = MySqlParser.SignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 524, self.RULE_signalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5971
            self.match(MySqlParser.SIGNAL)
            self.state = 5979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.state = 5972
                self.match(MySqlParser.SQLSTATE)
                self.state = 5974
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==667:
                    self.state = 5973
                    self.match(MySqlParser.VALUE)


                self.state = 5976
                self.stringLiteral()
                pass
            elif token in [1149]:
                self.state = 5977
                self.match(MySqlParser.ID)
                pass
            elif token in [1150]:
                self.state = 5978
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 5990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,869,self._ctx)
            if la_ == 1:
                self.state = 5981
                self.match(MySqlParser.SET)
                self.state = 5982
                self.signalConditionInformation()
                self.state = 5987
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 5983
                    self.match(MySqlParser.COMMA)
                    self.state = 5984
                    self.signalConditionInformation()
                    self.state = 5989
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ResignalStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def RESIGNAL(self):
            return self.getToken(MySqlParser.RESIGNAL, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def SET(self):
            return self.getToken(MySqlParser.SET, 0)

        def signalConditionInformation(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.SignalConditionInformationContext)
            else:
                return self.getTypedRuleContext(MySqlParser.SignalConditionInformationContext,i)


        def SQLSTATE(self):
            return self.getToken(MySqlParser.SQLSTATE, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_resignalStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterResignalStatement" ):
                listener.enterResignalStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitResignalStatement" ):
                listener.exitResignalStatement(self)




    def resignalStatement(self):

        localctx = MySqlParser.ResignalStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 526, self.RULE_resignalStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 5992
            self.match(MySqlParser.RESIGNAL)
            self.state = 6000
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [160]:
                self.state = 5993
                self.match(MySqlParser.SQLSTATE)
                self.state = 5995
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==667:
                    self.state = 5994
                    self.match(MySqlParser.VALUE)


                self.state = 5997
                self.stringLiteral()
                pass
            elif token in [1149]:
                self.state = 5998
                self.match(MySqlParser.ID)
                pass
            elif token in [1150]:
                self.state = 5999
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass
            elif token in [-1, 7, 9, 20, 24, 26, 33, 44, 45, 46, 51, 61, 70, 71, 84, 92, 101, 102, 118, 131, 137, 138, 140, 142, 146, 151, 152, 154, 155, 180, 182, 184, 342, 343, 349, 354, 367, 388, 397, 430, 440, 442, 454, 558, 578, 587, 595, 602, 627, 633, 654, 659, 679, 704, 734, 1114, 1126, 1129]:
                pass
            else:
                pass
            self.state = 6011
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,873,self._ctx)
            if la_ == 1:
                self.state = 6002
                self.match(MySqlParser.SET)
                self.state = 6003
                self.signalConditionInformation()
                self.state = 6008
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 6004
                    self.match(MySqlParser.COMMA)
                    self.state = 6005
                    self.signalConditionInformation()
                    self.state = 6010
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SignalConditionInformationContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_signalConditionInformation

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSignalConditionInformation" ):
                listener.enterSignalConditionInformation(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSignalConditionInformation" ):
                listener.exitSignalConditionInformation(self)




    def signalConditionInformation(self):

        localctx = MySqlParser.SignalConditionInformationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 528, self.RULE_signalConditionInformation)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6013
            _la = self._input.LA(1)
            if not((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & 272105729) != 0 or _la==505 or _la==513 or _la==637 or _la==644 or _la==831 or _la==999):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6014
            self.match(MySqlParser.EQUAL_SYMBOL)
            self.state = 6019
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,874,self._ctx)
            if la_ == 1:
                self.state = 6015
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.state = 6016
                self.match(MySqlParser.DECIMAL_LITERAL)
                pass

            elif la_ == 3:
                self.state = 6017
                self.mysqlVariable()
                pass

            elif la_ == 4:
                self.state = 6018
                self.simpleId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsStatementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def GET(self):
            return self.getToken(MySqlParser.GET, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def variableClause(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.VariableClauseContext)
            else:
                return self.getTypedRuleContext(MySqlParser.VariableClauseContext,i)


        def EQUAL_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.EQUAL_SYMBOL)
            else:
                return self.getToken(MySqlParser.EQUAL_SYMBOL, i)

        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def diagnosticsConditionInformationName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DiagnosticsConditionInformationNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DiagnosticsConditionInformationNameContext,i)


        def NUMBER(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.NUMBER)
            else:
                return self.getToken(MySqlParser.NUMBER, i)

        def ROW_COUNT(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ROW_COUNT)
            else:
                return self.getToken(MySqlParser.ROW_COUNT, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsStatement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsStatement" ):
                listener.enterDiagnosticsStatement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsStatement" ):
                listener.exitDiagnosticsStatement(self)




    def diagnosticsStatement(self):

        localctx = MySqlParser.DiagnosticsStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 530, self.RULE_diagnosticsStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6021
            self.match(MySqlParser.GET)
            self.state = 6023
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==35 or _la==166:
                self.state = 6022
                _la = self._input.LA(1)
                if not(_la==35 or _la==166):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


            self.state = 6025
            self.match(MySqlParser.DIAGNOSTICS)
            self.state = 6057
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,879,self._ctx)
            if la_ == 1:
                self.state = 6026
                self.variableClause()
                self.state = 6027
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 6028
                _la = self._input.LA(1)
                if not(_la==116 or _la==990):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6036
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 6029
                    self.match(MySqlParser.COMMA)
                    self.state = 6030
                    self.variableClause()
                    self.state = 6031
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 6032
                    _la = self._input.LA(1)
                    if not(_la==116 or _la==990):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6038
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 6039
                self.match(MySqlParser.CONDITION)
                self.state = 6042
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1131, 1132, 1133, 1142, 1144]:
                    self.state = 6040
                    self.decimalLiteral()
                    pass
                elif token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1130, 1138, 1141, 1149, 1150, 1153, 1154]:
                    self.state = 6041
                    self.variableClause()
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6044
                self.variableClause()
                self.state = 6045
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 6046
                self.diagnosticsConditionInformationName()
                self.state = 6054
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 6047
                    self.match(MySqlParser.COMMA)
                    self.state = 6048
                    self.variableClause()
                    self.state = 6049
                    self.match(MySqlParser.EQUAL_SYMBOL)
                    self.state = 6050
                    self.diagnosticsConditionInformationName()
                    self.state = 6056
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DiagnosticsConditionInformationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_diagnosticsConditionInformationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDiagnosticsConditionInformationName" ):
                listener.enterDiagnosticsConditionInformationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDiagnosticsConditionInformationName" ):
                listener.exitDiagnosticsConditionInformationName(self)




    def diagnosticsConditionInformationName(self):

        localctx = MySqlParser.DiagnosticsConditionInformationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 532, self.RULE_diagnosticsConditionInformationName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6059
            _la = self._input.LA(1)
            if not((((_la - 357)) & ~0x3f) == 0 and ((1 << (_la - 357)) & 272105729) != 0 or _la==505 or _la==513 or (((_la - 590)) & ~0x3f) == 0 and ((1 << (_la - 590)) & 18155135997837313) != 0 or _la==831 or _la==999):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DescribeObjectClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_describeObjectClause

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class DescribeStatementsContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def deleteStatement(self):
            return self.getTypedRuleContext(MySqlParser.DeleteStatementContext,0)

        def insertStatement(self):
            return self.getTypedRuleContext(MySqlParser.InsertStatementContext,0)

        def replaceStatement(self):
            return self.getTypedRuleContext(MySqlParser.ReplaceStatementContext,0)

        def updateStatement(self):
            return self.getTypedRuleContext(MySqlParser.UpdateStatementContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeStatements" ):
                listener.enterDescribeStatements(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeStatements" ):
                listener.exitDescribeStatements(self)


    class DescribeConnectionContext(DescribeObjectClauseContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DescribeObjectClauseContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)
        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)
        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDescribeConnection" ):
                listener.enterDescribeConnection(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDescribeConnection" ):
                listener.exitDescribeConnection(self)



    def describeObjectClause(self):

        localctx = MySqlParser.DescribeObjectClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 534, self.RULE_describeObjectClause)
        try:
            self.state = 6071
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [44, 84, 140, 151, 182, 1126]:
                localctx = MySqlParser.DescribeStatementsContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6066
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [151, 1126]:
                    self.state = 6061
                    self.selectStatement()
                    pass
                elif token in [44]:
                    self.state = 6062
                    self.deleteStatement()
                    pass
                elif token in [84]:
                    self.state = 6063
                    self.insertStatement()
                    pass
                elif token in [140]:
                    self.state = 6064
                    self.replaceStatement()
                    pass
                elif token in [182]:
                    self.state = 6065
                    self.updateStatement()
                    pass
                else:
                    raise NoViableAltException(self)

                pass
            elif token in [64]:
                localctx = MySqlParser.DescribeConnectionContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6068
                self.match(MySqlParser.FOR)
                self.state = 6069
                self.match(MySqlParser.CONNECTION)
                self.state = 6070
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullId" ):
                listener.enterFullId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullId" ):
                listener.exitFullId(self)




    def fullId(self):

        localctx = MySqlParser.FullIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 536, self.RULE_fullId)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6073
            self.uid()
            self.state = 6077
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,882,self._ctx)
            if la_ == 1:
                self.state = 6074
                self.match(MySqlParser.DOT_ID)

            elif la_ == 2:
                self.state = 6075
                self.match(MySqlParser.DOT)
                self.state = 6076
                self.uid()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TableNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_tableName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTableName" ):
                listener.enterTableName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTableName" ):
                listener.exitTableName(self)




    def tableName(self):

        localctx = MySqlParser.TableNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 538, self.RULE_tableName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6079
            self.fullId()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class RoleNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def userName(self):
            return self.getTypedRuleContext(MySqlParser.UserNameContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_roleName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRoleName" ):
                listener.enterRoleName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRoleName" ):
                listener.exitRoleName(self)




    def roleName(self):

        localctx = MySqlParser.RoleNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 540, self.RULE_roleName)
        try:
            self.state = 6083
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,883,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6081
                self.userName()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6082
                self.uid()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def dottedId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DottedIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DottedIdContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_fullColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnName" ):
                listener.enterFullColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnName" ):
                listener.exitFullColumnName(self)




    def fullColumnName(self):

        localctx = MySqlParser.FullColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 542, self.RULE_fullColumnName)
        try:
            self.state = 6099
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,888,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6085
                self.uid()
                self.state = 6090
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,885,self._ctx)
                if la_ == 1:
                    self.state = 6086
                    self.dottedId()
                    self.state = 6088
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,884,self._ctx)
                    if la_ == 1:
                        self.state = 6087
                        self.dottedId()




                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6093
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,886,self._ctx)
                if la_ == 1:
                    self.state = 6092
                    self.matchWildcard()


                self.state = 6095
                self.dottedId()
                self.state = 6097
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,887,self._ctx)
                if la_ == 1:
                    self.state = 6096
                    self.dottedId()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.sortType = None # Token

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnName" ):
                listener.enterIndexColumnName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnName" ):
                listener.exitIndexColumnName(self)




    def indexColumnName(self):

        localctx = MySqlParser.IndexColumnNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 544, self.RULE_indexColumnName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6112
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,891,self._ctx)
            if la_ == 1:
                self.state = 6103
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,889,self._ctx)
                if la_ == 1:
                    self.state = 6101
                    self.uid()
                    pass

                elif la_ == 2:
                    self.state = 6102
                    self.match(MySqlParser.STRING_LITERAL)
                    pass


                self.state = 6109
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 6105
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6106
                    self.decimalLiteral()
                    self.state = 6107
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                self.state = 6111
                self.expression(0)
                pass


            self.state = 6115
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==45:
                self.state = 6114
                localctx.sortType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==13 or _la==45):
                    localctx.sortType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_USER_NAME(self):
            return self.getToken(MySqlParser.STRING_USER_NAME, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_userName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserName" ):
                listener.enterUserName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserName" ):
                listener.exitUserName(self)




    def userName(self):

        localctx = MySqlParser.UserNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 546, self.RULE_userName)
        try:
            self.state = 6122
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,893,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6117
                self.match(MySqlParser.STRING_USER_NAME)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6118
                self.match(MySqlParser.ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6119
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6120
                self.match(MySqlParser.ADMIN)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6121
                self.keywordsCanBeId()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MysqlVariableContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)

        def GLOBAL_ID(self):
            return self.getToken(MySqlParser.GLOBAL_ID, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mysqlVariable

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariable" ):
                listener.enterMysqlVariable(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariable" ):
                listener.exitMysqlVariable(self)




    def mysqlVariable(self):

        localctx = MySqlParser.MysqlVariableContext(self, self._ctx, self.state)
        self.enterRule(localctx, 548, self.RULE_mysqlVariable)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6124
            _la = self._input.LA(1)
            if not(_la==1153 or _la==1154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetName" ):
                listener.enterCharsetName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetName" ):
                listener.exitCharsetName(self)




    def charsetName(self):

        localctx = MySqlParser.CharsetNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 550, self.RULE_charsetName)
        try:
            self.state = 6130
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,894,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6126
                self.match(MySqlParser.BINARY)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6127
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6128
                self.match(MySqlParser.STRING_LITERAL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6129
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollationNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_collationName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollationName" ):
                listener.enterCollationName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollationName" ):
                listener.exitCollationName(self)




    def collationName(self):

        localctx = MySqlParser.CollationNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 552, self.RULE_collationName)
        try:
            self.state = 6134
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,895,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6132
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6133
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EngineNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARCHIVE(self):
            return self.getToken(MySqlParser.ARCHIVE, 0)

        def BLACKHOLE(self):
            return self.getToken(MySqlParser.BLACKHOLE, 0)

        def CSV(self):
            return self.getToken(MySqlParser.CSV, 0)

        def FEDERATED(self):
            return self.getToken(MySqlParser.FEDERATED, 0)

        def INNODB(self):
            return self.getToken(MySqlParser.INNODB, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MRG_MYISAM(self):
            return self.getToken(MySqlParser.MRG_MYISAM, 0)

        def MYISAM(self):
            return self.getToken(MySqlParser.MYISAM, 0)

        def NDB(self):
            return self.getToken(MySqlParser.NDB, 0)

        def NDBCLUSTER(self):
            return self.getToken(MySqlParser.NDBCLUSTER, 0)

        def PERFORMANCE_SCHEMA(self):
            return self.getToken(MySqlParser.PERFORMANCE_SCHEMA, 0)

        def TOKUDB(self):
            return self.getToken(MySqlParser.TOKUDB, 0)

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_engineName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterEngineName" ):
                listener.enterEngineName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitEngineName" ):
                listener.exitEngineName(self)




    def engineName(self):

        localctx = MySqlParser.EngineNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 554, self.RULE_engineName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6136
            _la = self._input.LA(1)
            if not(_la==373 or (((_la - 782)) & ~0x3f) == 0 and ((1 << (_la - 782)) & 4095) != 0 or (((_la - 1141)) & ~0x3f) == 0 and ((1 << (_la - 1141)) & 769) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UuidSetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def MINUS(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.MINUS)
            else:
                return self.getToken(MySqlParser.MINUS, i)

        def COLON_SYMB(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COLON_SYMB)
            else:
                return self.getToken(MySqlParser.COLON_SYMB, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uuidSet

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUuidSet" ):
                listener.enterUuidSet(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUuidSet" ):
                listener.exitUuidSet(self)




    def uuidSet(self):

        localctx = MySqlParser.UuidSetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 556, self.RULE_uuidSet)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6138
            self.decimalLiteral()
            self.state = 6139
            self.match(MySqlParser.MINUS)
            self.state = 6140
            self.decimalLiteral()
            self.state = 6141
            self.match(MySqlParser.MINUS)
            self.state = 6142
            self.decimalLiteral()
            self.state = 6143
            self.match(MySqlParser.MINUS)
            self.state = 6144
            self.decimalLiteral()
            self.state = 6145
            self.match(MySqlParser.MINUS)
            self.state = 6146
            self.decimalLiteral()
            self.state = 6152 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 6147
                self.match(MySqlParser.COLON_SYMB)
                self.state = 6148
                self.decimalLiteral()
                self.state = 6149
                self.match(MySqlParser.MINUS)
                self.state = 6150
                self.decimalLiteral()
                self.state = 6154 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==1137):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.globalTableUid = None # XuidStringIdContext
            self.qualifier = None # XuidStringIdContext
            self.idFormat = None # DecimalLiteralContext

        def xuidStringId(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.XuidStringIdContext)
            else:
                return self.getTypedRuleContext(MySqlParser.XuidStringIdContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_xid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXid" ):
                listener.enterXid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXid" ):
                listener.exitXid(self)




    def xid(self):

        localctx = MySqlParser.XidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 558, self.RULE_xid)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6156
            localctx.globalTableUid = self.xuidStringId()
            self.state = 6163
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1128:
                self.state = 6157
                self.match(MySqlParser.COMMA)
                self.state = 6158
                localctx.qualifier = self.xuidStringId()
                self.state = 6161
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1128:
                    self.state = 6159
                    self.match(MySqlParser.COMMA)
                    self.state = 6160
                    localctx.idFormat = self.decimalLiteral()




        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class XuidStringIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def HEXADECIMAL_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.HEXADECIMAL_LITERAL)
            else:
                return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_xuidStringId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterXuidStringId" ):
                listener.enterXuidStringId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitXuidStringId" ):
                listener.exitXuidStringId(self)




    def xuidStringId(self):

        localctx = MySqlParser.XuidStringIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 560, self.RULE_xuidStringId)
        self._la = 0 # Token type
        try:
            self.state = 6172
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1141]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6165
                self.match(MySqlParser.STRING_LITERAL)
                pass
            elif token in [1146]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6166
                self.match(MySqlParser.BIT_STRING)
                pass
            elif token in [1143]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6168 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6167
                    self.match(MySqlParser.HEXADECIMAL_LITERAL)
                    self.state = 6170 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1143):
                        break

                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AuthPluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_authPlugin

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAuthPlugin" ):
                listener.enterAuthPlugin(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAuthPlugin" ):
                listener.exitAuthPlugin(self)




    def authPlugin(self):

        localctx = MySqlParser.AuthPluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 562, self.RULE_authPlugin)
        try:
            self.state = 6176
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,901,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6174
                self.uid()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6175
                self.match(MySqlParser.STRING_LITERAL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def simpleId(self):
            return self.getTypedRuleContext(MySqlParser.SimpleIdContext,0)


        def REVERSE_QUOTE_ID(self):
            return self.getToken(MySqlParser.REVERSE_QUOTE_ID, 0)

        def CHARSET_REVERSE_QOUTE_STRING(self):
            return self.getToken(MySqlParser.CHARSET_REVERSE_QOUTE_STRING, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_uid

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUid" ):
                listener.enterUid(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUid" ):
                listener.exitUid(self)




    def uid(self):

        localctx = MySqlParser.UidContext(self, self._ctx, self.state)
        self.enterRule(localctx, 564, self.RULE_uid)
        try:
            self.state = 6181
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,902,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6178
                self.simpleId()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6179
                self.match(MySqlParser.REVERSE_QUOTE_ID)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6180
                self.match(MySqlParser.CHARSET_REVERSE_QOUTE_STRING)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ID(self):
            return self.getToken(MySqlParser.ID, 0)

        def charsetNameBase(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameBaseContext,0)


        def transactionLevelBase(self):
            return self.getTypedRuleContext(MySqlParser.TransactionLevelBaseContext,0)


        def engineName(self):
            return self.getTypedRuleContext(MySqlParser.EngineNameContext,0)


        def privilegesBase(self):
            return self.getTypedRuleContext(MySqlParser.PrivilegesBaseContext,0)


        def intervalTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeBaseContext,0)


        def dataTypeBase(self):
            return self.getTypedRuleContext(MySqlParser.DataTypeBaseContext,0)


        def keywordsCanBeId(self):
            return self.getTypedRuleContext(MySqlParser.KeywordsCanBeIdContext,0)


        def scalarFunctionName(self):
            return self.getTypedRuleContext(MySqlParser.ScalarFunctionNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_simpleId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleId" ):
                listener.enterSimpleId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleId" ):
                listener.exitSimpleId(self)




    def simpleId(self):

        localctx = MySqlParser.SimpleIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 566, self.RULE_simpleId)
        try:
            self.state = 6192
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,903,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6183
                self.match(MySqlParser.ID)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6184
                self.charsetNameBase()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6185
                self.transactionLevelBase()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6186
                self.engineName()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6187
                self.privilegesBase()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6188
                self.intervalTypeBase()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6189
                self.dataTypeBase()
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6190
                self.keywordsCanBeId()
                pass

            elif la_ == 9:
                self.enterOuterAlt(localctx, 9)
                self.state = 6191
                self.scalarFunctionName()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DottedIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DOT_ID(self):
            return self.getToken(MySqlParser.DOT_ID, 0)

        def DOT(self):
            return self.getToken(MySqlParser.DOT, 0)

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_dottedId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDottedId" ):
                listener.enterDottedId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDottedId" ):
                listener.exitDottedId(self)




    def dottedId(self):

        localctx = MySqlParser.DottedIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 568, self.RULE_dottedId)
        try:
            self.state = 6197
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1148]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6194
                self.match(MySqlParser.DOT_ID)
                pass
            elif token in [1125]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6195
                self.match(MySqlParser.DOT)
                self.state = 6196
                self.uid()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.DECIMAL_LITERAL, 0)

        def ZERO_DECIMAL(self):
            return self.getToken(MySqlParser.ZERO_DECIMAL, 0)

        def ONE_DECIMAL(self):
            return self.getToken(MySqlParser.ONE_DECIMAL, 0)

        def TWO_DECIMAL(self):
            return self.getToken(MySqlParser.TWO_DECIMAL, 0)

        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_decimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDecimalLiteral" ):
                listener.enterDecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDecimalLiteral" ):
                listener.exitDecimalLiteral(self)




    def decimalLiteral(self):

        localctx = MySqlParser.DecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 570, self.RULE_decimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6199
            _la = self._input.LA(1)
            if not((((_la - 1131)) & ~0x3f) == 0 and ((1 << (_la - 1131)) & 10247) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FileSizeLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def FILESIZE_LITERAL(self):
            return self.getToken(MySqlParser.FILESIZE_LITERAL, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_fileSizeLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFileSizeLiteral" ):
                listener.enterFileSizeLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFileSizeLiteral" ):
                listener.exitFileSizeLiteral(self)




    def fileSizeLiteral(self):

        localctx = MySqlParser.FileSizeLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 572, self.RULE_fileSizeLiteral)
        try:
            self.state = 6203
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1139]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6201
                self.match(MySqlParser.FILESIZE_LITERAL)
                pass
            elif token in [1131, 1132, 1133, 1142, 1144]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6202
                self.decimalLiteral()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StringLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def START_NATIONAL_STRING_LITERAL(self):
            return self.getToken(MySqlParser.START_NATIONAL_STRING_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)

        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_stringLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringLiteral" ):
                listener.enterStringLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringLiteral" ):
                listener.exitStringLiteral(self)




    def stringLiteral(self):

        localctx = MySqlParser.StringLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 574, self.RULE_stringLiteral)
        self._la = 0 # Token type
        try:
            self.state = 6228
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,912,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6210
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1141, 1147]:
                    self.state = 6206
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1147:
                        self.state = 6205
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 6208
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [1140]:
                    self.state = 6209
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6213 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 6212
                        self.match(MySqlParser.STRING_LITERAL)

                    else:
                        raise NoViableAltException(self)
                    self.state = 6215 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,908,self._ctx)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6222
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [1141, 1147]:
                    self.state = 6218
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if _la==1147:
                        self.state = 6217
                        self.match(MySqlParser.STRING_CHARSET_NAME)


                    self.state = 6220
                    self.match(MySqlParser.STRING_LITERAL)
                    pass
                elif token in [1140]:
                    self.state = 6221
                    self.match(MySqlParser.START_NATIONAL_STRING_LITERAL)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 6226
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,911,self._ctx)
                if la_ == 1:
                    self.state = 6224
                    self.match(MySqlParser.COLLATE)
                    self.state = 6225
                    self.collationName()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BooleanLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)

        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_booleanLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBooleanLiteral" ):
                listener.enterBooleanLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBooleanLiteral" ):
                listener.exitBooleanLiteral(self)




    def booleanLiteral(self):

        localctx = MySqlParser.BooleanLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 576, self.RULE_booleanLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6230
            _la = self._input.LA(1)
            if not(_la==62 or _la==176):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HexadecimalLiteralContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HEXADECIMAL_LITERAL(self):
            return self.getToken(MySqlParser.HEXADECIMAL_LITERAL, 0)

        def STRING_CHARSET_NAME(self):
            return self.getToken(MySqlParser.STRING_CHARSET_NAME, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_hexadecimalLiteral

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterHexadecimalLiteral" ):
                listener.enterHexadecimalLiteral(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitHexadecimalLiteral" ):
                listener.exitHexadecimalLiteral(self)




    def hexadecimalLiteral(self):

        localctx = MySqlParser.HexadecimalLiteralContext(self, self._ctx, self.state)
        self.enterRule(localctx, 578, self.RULE_hexadecimalLiteral)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6233
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1147:
                self.state = 6232
                self.match(MySqlParser.STRING_CHARSET_NAME)


            self.state = 6235
            self.match(MySqlParser.HEXADECIMAL_LITERAL)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NullNotnullContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nullNotnull

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNullNotnull" ):
                listener.enterNullNotnull(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNullNotnull" ):
                listener.exitNullNotnull(self)




    def nullNotnull(self):

        localctx = MySqlParser.NullNotnullContext(self, self._ctx, self.state)
        self.enterRule(localctx, 580, self.RULE_nullNotnull)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6238
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==113:
                self.state = 6237
                self.match(MySqlParser.NOT)


            self.state = 6240
            _la = self._input.LA(1)
            if not(_la==115 or _la==1145):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.nullLiteral = None # Token

        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)


        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def hexadecimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.HexadecimalLiteralContext,0)


        def booleanLiteral(self):
            return self.getTypedRuleContext(MySqlParser.BooleanLiteralContext,0)


        def REAL_LITERAL(self):
            return self.getToken(MySqlParser.REAL_LITERAL, 0)

        def BIT_STRING(self):
            return self.getToken(MySqlParser.BIT_STRING, 0)

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def NULL_SPEC_LITERAL(self):
            return self.getToken(MySqlParser.NULL_SPEC_LITERAL, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_constant

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstant" ):
                listener.enterConstant(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstant" ):
                listener.exitConstant(self)




    def constant(self):

        localctx = MySqlParser.ConstantContext(self, self._ctx, self.state)
        self.enterRule(localctx, 582, self.RULE_constant)
        self._la = 0 # Token type
        try:
            self.state = 6254
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,916,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6242
                self.stringLiteral()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6243
                self.decimalLiteral()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6244
                self.match(MySqlParser.MINUS)
                self.state = 6245
                self.decimalLiteral()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6246
                self.hexadecimalLiteral()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6247
                self.booleanLiteral()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6248
                self.match(MySqlParser.REAL_LITERAL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 6249
                self.match(MySqlParser.BIT_STRING)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 6251
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 6250
                    self.match(MySqlParser.NOT)


                self.state = 6253
                localctx.nullLiteral = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==115 or _la==1145):
                    localctx.nullLiteral = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_dataType

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpatialDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)
        def GEOMCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMCOLLECTION, 0)
        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)
        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)
        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)
        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)
        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)
        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)
        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)
        def GEOMETRY(self):
            return self.getToken(MySqlParser.GEOMETRY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpatialDataType" ):
                listener.enterSpatialDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpatialDataType" ):
                listener.exitSpatialDataType(self)


    class LongVarbinaryDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarbinaryDataType" ):
                listener.enterLongVarbinaryDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarbinaryDataType" ):
                listener.exitLongVarbinaryDataType(self)


    class CollectionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def collectionOptions(self):
            return self.getTypedRuleContext(MySqlParser.CollectionOptionsContext,0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)
        def SET(self):
            return self.getToken(MySqlParser.SET, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionDataType" ):
                listener.enterCollectionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionDataType" ):
                listener.exitCollectionDataType(self)


    class NationalVaryingStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalVaryingStringDataType" ):
                listener.enterNationalVaryingStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalVaryingStringDataType" ):
                listener.exitNationalVaryingStringDataType(self)


    class DimensionDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def TINYINT(self):
            return self.getToken(MySqlParser.TINYINT, 0)
        def SMALLINT(self):
            return self.getToken(MySqlParser.SMALLINT, 0)
        def MEDIUMINT(self):
            return self.getToken(MySqlParser.MEDIUMINT, 0)
        def INT(self):
            return self.getToken(MySqlParser.INT, 0)
        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)
        def BIGINT(self):
            return self.getToken(MySqlParser.BIGINT, 0)
        def MIDDLEINT(self):
            return self.getToken(MySqlParser.MIDDLEINT, 0)
        def INT1(self):
            return self.getToken(MySqlParser.INT1, 0)
        def INT2(self):
            return self.getToken(MySqlParser.INT2, 0)
        def INT3(self):
            return self.getToken(MySqlParser.INT3, 0)
        def INT4(self):
            return self.getToken(MySqlParser.INT4, 0)
        def INT8(self):
            return self.getToken(MySqlParser.INT8, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def SIGNED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.SIGNED)
            else:
                return self.getToken(MySqlParser.SIGNED, i)
        def UNSIGNED(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.UNSIGNED)
            else:
                return self.getToken(MySqlParser.UNSIGNED, i)
        def ZEROFILL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.ZEROFILL)
            else:
                return self.getToken(MySqlParser.ZEROFILL, i)
        def REAL(self):
            return self.getToken(MySqlParser.REAL, 0)
        def lengthTwoDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoDimensionContext,0)

        def DOUBLE(self):
            return self.getToken(MySqlParser.DOUBLE, 0)
        def PRECISION(self):
            return self.getToken(MySqlParser.PRECISION, 0)
        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)
        def DEC(self):
            return self.getToken(MySqlParser.DEC, 0)
        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)
        def NUMERIC(self):
            return self.getToken(MySqlParser.NUMERIC, 0)
        def FLOAT(self):
            return self.getToken(MySqlParser.FLOAT, 0)
        def FLOAT4(self):
            return self.getToken(MySqlParser.FLOAT4, 0)
        def FLOAT8(self):
            return self.getToken(MySqlParser.FLOAT8, 0)
        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def VARBINARY(self):
            return self.getToken(MySqlParser.VARBINARY, 0)
        def BLOB(self):
            return self.getToken(MySqlParser.BLOB, 0)
        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDimensionDataType" ):
                listener.enterDimensionDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDimensionDataType" ):
                listener.exitDimensionDataType(self)


    class StringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def TINYTEXT(self):
            return self.getToken(MySqlParser.TINYTEXT, 0)
        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)
        def MEDIUMTEXT(self):
            return self.getToken(MySqlParser.MEDIUMTEXT, 0)
        def LONGTEXT(self):
            return self.getToken(MySqlParser.LONGTEXT, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)
        def NVARCHAR(self):
            return self.getToken(MySqlParser.NVARCHAR, 0)
        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARYING(self):
            return self.getToken(MySqlParser.VARYING, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BINARY)
            else:
                return self.getToken(MySqlParser.BINARY, i)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterStringDataType" ):
                listener.enterStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitStringDataType" ):
                listener.exitStringDataType(self)


    class LongVarcharDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def LONG(self):
            return self.getToken(MySqlParser.LONG, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)

        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLongVarcharDataType" ):
                listener.enterLongVarcharDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLongVarcharDataType" ):
                listener.exitLongVarcharDataType(self)


    class NationalStringDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def NATIONAL(self):
            return self.getToken(MySqlParser.NATIONAL, 0)
        def VARCHAR(self):
            return self.getToken(MySqlParser.VARCHAR, 0)
        def CHARACTER(self):
            return self.getToken(MySqlParser.CHARACTER, 0)
        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNationalStringDataType" ):
                listener.enterNationalStringDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNationalStringDataType" ):
                listener.exitNationalStringDataType(self)


    class SimpleDataTypeContext(DataTypeContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.DataTypeContext
            super().__init__(parser)
            self.typeName = None # Token
            self.copyFrom(ctx)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TINYBLOB(self):
            return self.getToken(MySqlParser.TINYBLOB, 0)
        def MEDIUMBLOB(self):
            return self.getToken(MySqlParser.MEDIUMBLOB, 0)
        def LONGBLOB(self):
            return self.getToken(MySqlParser.LONGBLOB, 0)
        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)
        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)
        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleDataType" ):
                listener.enterSimpleDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleDataType" ):
                listener.exitSimpleDataType(self)



    def dataType(self):

        localctx = MySqlParser.DataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 584, self.RULE_dataType)
        self._la = 0 # Token type
        try:
            self.state = 6378
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,944,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.StringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6256
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==25 or (((_la - 220)) & ~0x3f) == 0 and ((1 << (_la - 220)) & 31239) != 0 or _la==516):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6258
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==236:
                    self.state = 6257
                    self.match(MySqlParser.VARYING)


                self.state = 6261
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,918,self._ctx)
                if la_ == 1:
                    self.state = 6260
                    self.lengthOneDimension()


                self.state = 6264
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,919,self._ctx)
                if la_ == 1:
                    self.state = 6263
                    self.match(MySqlParser.BINARY)


                self.state = 6269
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,920,self._ctx)
                if la_ == 1:
                    self.state = 6266
                    self.charSet()
                    self.state = 6267
                    self.charsetName()


                self.state = 6274
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,921,self._ctx)
                if la_ == 1:
                    self.state = 6271
                    self.match(MySqlParser.COLLATE)
                    self.state = 6272
                    self.collationName()

                elif la_ == 2:
                    self.state = 6273
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 2:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6276
                self.match(MySqlParser.NATIONAL)
                self.state = 6277
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==25 or _la==221):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6279
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,922,self._ctx)
                if la_ == 1:
                    self.state = 6278
                    self.lengthOneDimension()


                self.state = 6282
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,923,self._ctx)
                if la_ == 1:
                    self.state = 6281
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 3:
                localctx = MySqlParser.NationalStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6284
                self.match(MySqlParser.NCHAR)
                self.state = 6285
                localctx.typeName = self.match(MySqlParser.VARCHAR)
                self.state = 6287
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,924,self._ctx)
                if la_ == 1:
                    self.state = 6286
                    self.lengthOneDimension()


                self.state = 6290
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,925,self._ctx)
                if la_ == 1:
                    self.state = 6289
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 4:
                localctx = MySqlParser.NationalVaryingStringDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6292
                self.match(MySqlParser.NATIONAL)
                self.state = 6293
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==25 or _la==220):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6294
                self.match(MySqlParser.VARYING)
                self.state = 6296
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,926,self._ctx)
                if la_ == 1:
                    self.state = 6295
                    self.lengthOneDimension()


                self.state = 6299
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,927,self._ctx)
                if la_ == 1:
                    self.state = 6298
                    self.match(MySqlParser.BINARY)


                pass

            elif la_ == 5:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6301
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 194)) & ~0x3f) == 0 and ((1 << (_la - 194)) & 4095) != 0):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6303
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,928,self._ctx)
                if la_ == 1:
                    self.state = 6302
                    self.lengthOneDimension()


                self.state = 6308
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,929,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6305
                        _la = self._input.LA(1)
                        if not(_la==181 or _la==193 or _la==610):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6310
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,929,self._ctx)

                pass

            elif la_ == 6:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6311
                localctx.typeName = self.match(MySqlParser.REAL)
                self.state = 6313
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,930,self._ctx)
                if la_ == 1:
                    self.state = 6312
                    self.lengthTwoDimension()


                self.state = 6318
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,931,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6315
                        _la = self._input.LA(1)
                        if not(_la==181 or _la==193 or _la==610):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6320
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,931,self._ctx)

                pass

            elif la_ == 7:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6321
                localctx.typeName = self.match(MySqlParser.DOUBLE)
                self.state = 6323
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==208:
                    self.state = 6322
                    self.match(MySqlParser.PRECISION)


                self.state = 6326
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,933,self._ctx)
                if la_ == 1:
                    self.state = 6325
                    self.lengthTwoDimension()


                self.state = 6331
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,934,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6328
                        _la = self._input.LA(1)
                        if not(_la==181 or _la==193 or _la==610):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6333
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,934,self._ctx)

                pass

            elif la_ == 8:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6334
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 209)) & ~0x3f) == 0 and ((1 << (_la - 209)) & 63) != 0 or _la==429):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6336
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,935,self._ctx)
                if la_ == 1:
                    self.state = 6335
                    self.lengthTwoOptionalDimension()


                self.state = 6341
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,936,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 6338
                        _la = self._input.LA(1)
                        if not(_la==181 or _la==193 or _la==610):
                            self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume() 
                    self.state = 6343
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,936,self._ctx)

                pass

            elif la_ == 9:
                localctx = MySqlParser.SimpleDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6344
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & 4237313) != 0 or _la==346 or _la==347):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 10:
                localctx = MySqlParser.DimensionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6345
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 216)) & ~0x3f) == 0 and ((1 << (_la - 216)) & 2831) != 0 or _la==344):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6347
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,937,self._ctx)
                if la_ == 1:
                    self.state = 6346
                    self.lengthOneDimension()


                pass

            elif la_ == 11:
                localctx = MySqlParser.CollectionDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6349
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==152 or _la==235):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6350
                self.collectionOptions()
                self.state = 6352
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,938,self._ctx)
                if la_ == 1:
                    self.state = 6351
                    self.match(MySqlParser.BINARY)


                self.state = 6357
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,939,self._ctx)
                if la_ == 1:
                    self.state = 6354
                    self.charSet()
                    self.state = 6355
                    self.charsetName()


                pass

            elif la_ == 12:
                localctx = MySqlParser.SpatialDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6359
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==464 or (((_la - 798)) & ~0x3f) == 0 and ((1 << (_la - 798)) & 511) != 0):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 13:
                localctx = MySqlParser.LongVarcharDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6360
                localctx.typeName = self.match(MySqlParser.LONG)
                self.state = 6362
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==221:
                    self.state = 6361
                    self.match(MySqlParser.VARCHAR)


                self.state = 6365
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,941,self._ctx)
                if la_ == 1:
                    self.state = 6364
                    self.match(MySqlParser.BINARY)


                self.state = 6370
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,942,self._ctx)
                if la_ == 1:
                    self.state = 6367
                    self.charSet()
                    self.state = 6368
                    self.charsetName()


                self.state = 6374
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,943,self._ctx)
                if la_ == 1:
                    self.state = 6372
                    self.match(MySqlParser.COLLATE)
                    self.state = 6373
                    self.collationName()


                pass

            elif la_ == 14:
                localctx = MySqlParser.LongVarbinaryDataTypeContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6376
                self.match(MySqlParser.LONG)
                self.state = 6377
                self.match(MySqlParser.VARBINARY)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CollectionOptionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_collectionOptions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollectionOptions" ):
                listener.enterCollectionOptions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollectionOptions" ):
                listener.exitCollectionOptions(self)




    def collectionOptions(self):

        localctx = MySqlParser.CollectionOptionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 586, self.RULE_collectionOptions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6380
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6381
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 6386
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6382
                self.match(MySqlParser.COMMA)
                self.state = 6383
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 6388
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6389
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConvertedDataTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.typeName = None # Token

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)

        def DECIMAL(self):
            return self.getToken(MySqlParser.DECIMAL, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def UNSIGNED(self):
            return self.getToken(MySqlParser.UNSIGNED, 0)

        def ARRAY(self):
            return self.getToken(MySqlParser.ARRAY, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def INT(self):
            return self.getToken(MySqlParser.INT, 0)

        def INTEGER(self):
            return self.getToken(MySqlParser.INTEGER, 0)

        def lengthOneDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthOneDimensionContext,0)


        def charSet(self):
            return self.getTypedRuleContext(MySqlParser.CharSetContext,0)


        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def lengthTwoOptionalDimension(self):
            return self.getTypedRuleContext(MySqlParser.LengthTwoOptionalDimensionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_convertedDataType

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConvertedDataType" ):
                listener.enterConvertedDataType(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConvertedDataType" ):
                listener.exitConvertedDataType(self)




    def convertedDataType(self):

        localctx = MySqlParser.ConvertedDataTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 588, self.RULE_convertedDataType)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6413
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [224, 516]:
                self.state = 6391
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==224 or _la==516):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6393
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 6392
                    self.lengthOneDimension()


                pass
            elif token in [220]:
                self.state = 6395
                localctx.typeName = self.match(MySqlParser.CHAR)
                self.state = 6397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 6396
                    self.lengthOneDimension()


                self.state = 6402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==25 or _la==220 or _la==836:
                    self.state = 6399
                    self.charSet()
                    self.state = 6400
                    self.charsetName()


                pass
            elif token in [198, 204, 215, 216, 218, 464]:
                self.state = 6404
                localctx.typeName = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 198)) & ~0x3f) == 0 and ((1 << (_la - 198)) & 1441857) != 0 or _la==464):
                    localctx.typeName = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [212]:
                self.state = 6405
                localctx.typeName = self.match(MySqlParser.DECIMAL)
                self.state = 6407
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1126:
                    self.state = 6406
                    self.lengthTwoOptionalDimension()


                pass
            elif token in [181, 610]:
                self.state = 6409
                _la = self._input.LA(1)
                if not(_la==181 or _la==610):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6411
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==204:
                    self.state = 6410
                    self.match(MySqlParser.INTEGER)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 6416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==11:
                self.state = 6415
                self.match(MySqlParser.ARRAY)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthOneDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthOneDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthOneDimension" ):
                listener.enterLengthOneDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthOneDimension" ):
                listener.exitLengthOneDimension(self)




    def lengthOneDimension(self):

        localctx = MySqlParser.LengthOneDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 590, self.RULE_lengthOneDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6418
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6419
            self.decimalLiteral()
            self.state = 6420
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoDimension" ):
                listener.enterLengthTwoDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoDimension" ):
                listener.exitLengthTwoDimension(self)




    def lengthTwoDimension(self):

        localctx = MySqlParser.LengthTwoDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 592, self.RULE_lengthTwoDimension)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6422
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6423
            self.decimalLiteral()
            self.state = 6424
            self.match(MySqlParser.COMMA)
            self.state = 6425
            self.decimalLiteral()
            self.state = 6426
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LengthTwoOptionalDimensionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_lengthTwoOptionalDimension

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLengthTwoOptionalDimension" ):
                listener.enterLengthTwoOptionalDimension(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLengthTwoOptionalDimension" ):
                listener.exitLengthTwoOptionalDimension(self)




    def lengthTwoOptionalDimension(self):

        localctx = MySqlParser.LengthTwoOptionalDimensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 594, self.RULE_lengthTwoOptionalDimension)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6428
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6429
            self.decimalLiteral()
            self.state = 6432
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==1128:
                self.state = 6430
                self.match(MySqlParser.COMMA)
                self.state = 6431
                self.decimalLiteral()


            self.state = 6434
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UidListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.UidContext)
            else:
                return self.getTypedRuleContext(MySqlParser.UidContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_uidList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUidList" ):
                listener.enterUidList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUidList" ):
                listener.exitUidList(self)




    def uidList(self):

        localctx = MySqlParser.UidListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 596, self.RULE_uidList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6436
            self.uid()
            self.state = 6441
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,954,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6437
                    self.match(MySqlParser.COMMA)
                    self.state = 6438
                    self.uid() 
                self.state = 6443
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,954,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FullColumnNameListContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_fullColumnNameList

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameList" ):
                listener.enterFullColumnNameList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameList" ):
                listener.exitFullColumnNameList(self)




    def fullColumnNameList(self):

        localctx = MySqlParser.FullColumnNameListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 598, self.RULE_fullColumnNameList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6444
            self.fullColumnName()
            self.state = 6449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6445
                self.match(MySqlParser.COMMA)
                self.state = 6446
                self.fullColumnName()
                self.state = 6451
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def tableName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.TableNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.TableNameContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_tables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTables" ):
                listener.enterTables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTables" ):
                listener.exitTables(self)




    def tables(self):

        localctx = MySqlParser.TablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 600, self.RULE_tables)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6452
            self.tableName()
            self.state = 6457
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,956,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 6453
                    self.match(MySqlParser.COMMA)
                    self.state = 6454
                    self.tableName() 
                self.state = 6459
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,956,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IndexColumnNamesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def indexColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.IndexColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.IndexColumnNameContext,i)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_indexColumnNames

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIndexColumnNames" ):
                listener.enterIndexColumnNames(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIndexColumnNames" ):
                listener.exitIndexColumnNames(self)




    def indexColumnNames(self):

        localctx = MySqlParser.IndexColumnNamesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 602, self.RULE_indexColumnNames)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6460
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6461
            self.indexColumnName()
            self.state = 6466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6462
                self.match(MySqlParser.COMMA)
                self.state = 6463
                self.indexColumnName()
                self.state = 6468
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 6469
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressions

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressions" ):
                listener.enterExpressions(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressions" ):
                listener.exitExpressions(self)




    def expressions(self):

        localctx = MySqlParser.ExpressionsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 604, self.RULE_expressions)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6471
            self.expression(0)
            self.state = 6476
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6472
                self.match(MySqlParser.COMMA)
                self.state = 6473
                self.expression(0)
                self.state = 6478
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionsWithDefaultsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expressionOrDefault(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionOrDefaultContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionOrDefaultContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionsWithDefaults

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionsWithDefaults" ):
                listener.enterExpressionsWithDefaults(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionsWithDefaults" ):
                listener.exitExpressionsWithDefaults(self)




    def expressionsWithDefaults(self):

        localctx = MySqlParser.ExpressionsWithDefaultsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 606, self.RULE_expressionsWithDefaults)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6479
            self.expressionOrDefault()
            self.state = 6484
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6480
                self.match(MySqlParser.COMMA)
                self.state = 6481
                self.expressionOrDefault()
                self.state = 6486
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConstantsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_constants

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstants" ):
                listener.enterConstants(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstants" ):
                listener.exitConstants(self)




    def constants(self):

        localctx = MySqlParser.ConstantsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 608, self.RULE_constants)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6487
            self.constant()
            self.state = 6492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6488
                self.match(MySqlParser.COMMA)
                self.state = 6489
                self.constant()
                self.state = 6494
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SimpleStringsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STRING_LITERAL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.STRING_LITERAL)
            else:
                return self.getToken(MySqlParser.STRING_LITERAL, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_simpleStrings

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleStrings" ):
                listener.enterSimpleStrings(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleStrings" ):
                listener.exitSimpleStrings(self)




    def simpleStrings(self):

        localctx = MySqlParser.SimpleStringsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 610, self.RULE_simpleStrings)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6495
            self.match(MySqlParser.STRING_LITERAL)
            self.state = 6500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6496
                self.match(MySqlParser.COMMA)
                self.state = 6497
                self.match(MySqlParser.STRING_LITERAL)
                self.state = 6502
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UserVariablesContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOCAL_ID(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LOCAL_ID)
            else:
                return self.getToken(MySqlParser.LOCAL_ID, i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_userVariables

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUserVariables" ):
                listener.enterUserVariables(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUserVariables" ):
                listener.exitUserVariables(self)




    def userVariables(self):

        localctx = MySqlParser.UserVariablesContext(self, self._ctx, self.state)
        self.enterRule(localctx, 612, self.RULE_userVariables)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6503
            self.match(MySqlParser.LOCAL_ID)
            self.state = 6508
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6504
                self.match(MySqlParser.COMMA)
                self.state = 6505
                self.match(MySqlParser.LOCAL_ID)
                self.state = 6510
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DefaultValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NULL_LITERAL(self):
            return self.getToken(MySqlParser.NULL_LITERAL, 0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)


        def currentTimestamp(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CurrentTimestampContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CurrentTimestampContext,i)


        def ON(self):
            return self.getToken(MySqlParser.ON, 0)

        def UPDATE(self):
            return self.getToken(MySqlParser.UPDATE, 0)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_defaultValue

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDefaultValue" ):
                listener.enterDefaultValue(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDefaultValue" ):
                listener.exitDefaultValue(self)




    def defaultValue(self):

        localctx = MySqlParser.DefaultValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 614, self.RULE_defaultValue)
        try:
            self.state = 6537
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,965,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6511
                self.match(MySqlParser.NULL_LITERAL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6512
                self.match(MySqlParser.CAST)
                self.state = 6513
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6514
                self.expression(0)
                self.state = 6515
                self.match(MySqlParser.AS)
                self.state = 6516
                self.convertedDataType()
                self.state = 6517
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6520
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,963,self._ctx)
                if la_ == 1:
                    self.state = 6519
                    self.unaryOperator()


                self.state = 6522
                self.constant()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 6523
                self.currentTimestamp()
                self.state = 6527
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,964,self._ctx)
                if la_ == 1:
                    self.state = 6524
                    self.match(MySqlParser.ON)
                    self.state = 6525
                    self.match(MySqlParser.UPDATE)
                    self.state = 6526
                    self.currentTimestamp()


                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 6529
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6530
                self.expression(0)
                self.state = 6531
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 6533
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6534
                self.fullId()
                self.state = 6535
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CurrentTimestampContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_currentTimestamp

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCurrentTimestamp" ):
                listener.enterCurrentTimestamp(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCurrentTimestamp" ):
                listener.exitCurrentTimestamp(self)




    def currentTimestamp(self):

        localctx = MySqlParser.CurrentTimestampContext(self, self._ctx, self.state)
        self.enterRule(localctx, 616, self.RULE_currentTimestamp)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6553
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [313, 314, 320]:
                self.state = 6539
                _la = self._input.LA(1)
                if not((((_la - 313)) & ~0x3f) == 0 and ((1 << (_la - 313)) & 131) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6545
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,967,self._ctx)
                if la_ == 1:
                    self.state = 6540
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6542
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if (((_la - 1131)) & ~0x3f) == 0 and ((1 << (_la - 1131)) & 10247) != 0:
                        self.state = 6541
                        self.decimalLiteral()


                    self.state = 6544
                    self.match(MySqlParser.RR_BRACKET)


                pass
            elif token in [321]:
                self.state = 6547
                self.match(MySqlParser.NOW)
                self.state = 6548
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6550
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if (((_la - 1131)) & ~0x3f) == 0 and ((1 << (_la - 1131)) & 10247) != 0:
                    self.state = 6549
                    self.decimalLiteral()


                self.state = 6552
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionOrDefaultContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_expressionOrDefault

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionOrDefault" ):
                listener.enterExpressionOrDefault(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionOrDefault" ):
                listener.exitExpressionOrDefault(self)




    def expressionOrDefault(self):

        localctx = MySqlParser.ExpressionOrDefaultContext(self, self._ctx, self.state)
        self.enterRule(localctx, 618, self.RULE_expressionOrDefault)
        try:
            self.state = 6557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,970,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6555
                self.expression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6556
                self.match(MySqlParser.DEFAULT)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfExists" ):
                listener.enterIfExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfExists" ):
                listener.exitIfExists(self)




    def ifExists(self):

        localctx = MySqlParser.IfExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 620, self.RULE_ifExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6559
            self.match(MySqlParser.IF)
            self.state = 6560
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfNotExistsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_ifNotExists

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIfNotExists" ):
                listener.enterIfNotExists(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIfNotExists" ):
                listener.exitIfNotExists(self)




    def ifNotExists(self):

        localctx = MySqlParser.IfNotExistsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 622, self.RULE_ifNotExists)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6562
            self.match(MySqlParser.IF)
            self.state = 6563
            self.match(MySqlParser.NOT)
            self.state = 6564
            self.match(MySqlParser.EXISTS)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OrReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_orReplace

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOrReplace" ):
                listener.enterOrReplace(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOrReplace" ):
                listener.exitOrReplace(self)




    def orReplace(self):

        localctx = MySqlParser.OrReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 624, self.RULE_orReplace)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6566
            self.match(MySqlParser.OR)
            self.state = 6567
            self.match(MySqlParser.REPLACE)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WaitNowaitClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def NOWAIT(self):
            return self.getToken(MySqlParser.NOWAIT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_waitNowaitClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWaitNowaitClause" ):
                listener.enterWaitNowaitClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWaitNowaitClause" ):
                listener.exitWaitNowaitClause(self)




    def waitNowaitClause(self):

        localctx = MySqlParser.WaitNowaitClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 626, self.RULE_waitNowaitClause)
        try:
            self.state = 6572
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [672]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6569
                self.match(MySqlParser.WAIT)
                self.state = 6570
                self.decimalLiteral()
                pass
            elif token in [525]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6571
                self.match(MySqlParser.NOWAIT)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionCallContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_functionCall

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class SpecificFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def specificFunction(self):
            return self.getTypedRuleContext(MySqlParser.SpecificFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSpecificFunctionCall" ):
                listener.enterSpecificFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSpecificFunctionCall" ):
                listener.exitSpecificFunctionCall(self)


    class PasswordFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def passwordFunctionClause(self):
            return self.getTypedRuleContext(MySqlParser.PasswordFunctionClauseContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionCall" ):
                listener.enterPasswordFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionCall" ):
                listener.exitPasswordFunctionCall(self)


    class UdfFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullId(self):
            return self.getTypedRuleContext(MySqlParser.FullIdContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUdfFunctionCall" ):
                listener.enterUdfFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUdfFunctionCall" ):
                listener.exitUdfFunctionCall(self)


    class NonAggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def nonAggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.NonAggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateFunctionCall" ):
                listener.enterNonAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateFunctionCall" ):
                listener.exitNonAggregateFunctionCall(self)


    class AggregateFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def aggregateWindowedFunction(self):
            return self.getTypedRuleContext(MySqlParser.AggregateWindowedFunctionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateFunctionCall" ):
                listener.enterAggregateFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateFunctionCall" ):
                listener.exitAggregateFunctionCall(self)


    class ScalarFunctionCallContext(FunctionCallContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.FunctionCallContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def scalarFunctionName(self):
            return self.getTypedRuleContext(MySqlParser.ScalarFunctionNameContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionCall" ):
                listener.enterScalarFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionCall" ):
                listener.exitScalarFunctionCall(self)



    def functionCall(self):

        localctx = MySqlParser.FunctionCallContext(self, self._ctx, self.state)
        self.enterRule(localctx, 628, self.RULE_functionCall)
        try:
            self.state = 6592
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,974,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SpecificFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6574
                self.specificFunction()
                pass

            elif la_ == 2:
                localctx = MySqlParser.AggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6575
                self.aggregateWindowedFunction()
                pass

            elif la_ == 3:
                localctx = MySqlParser.NonAggregateFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6576
                self.nonAggregateWindowedFunction()
                pass

            elif la_ == 4:
                localctx = MySqlParser.ScalarFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6577
                self.scalarFunctionName()
                self.state = 6578
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6580
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,972,self._ctx)
                if la_ == 1:
                    self.state = 6579
                    self.functionArgs()


                self.state = 6582
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.UdfFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6584
                self.fullId()
                self.state = 6585
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6587
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,973,self._ctx)
                if la_ == 1:
                    self.state = 6586
                    self.functionArgs()


                self.state = 6589
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.PasswordFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6591
                self.passwordFunctionClause()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpecificFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_specificFunction

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class PositionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positionString = None # StringLiteralContext
            self.positionExpression = None # ExpressionContext
            self.inString = None # StringLiteralContext
            self.inExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPositionFunctionCall" ):
                listener.enterPositionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPositionFunctionCall" ):
                listener.exitPositionFunctionCall(self)


    class TrimFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.positioinForm = None # Token
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromString = None # StringLiteralContext
            self.fromExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def BOTH(self):
            return self.getToken(MySqlParser.BOTH, 0)
        def LEADING(self):
            return self.getToken(MySqlParser.LEADING, 0)
        def TRAILING(self):
            return self.getToken(MySqlParser.TRAILING, 0)
        def stringLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.StringLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.StringLiteralContext,i)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTrimFunctionCall" ):
                listener.enterTrimFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTrimFunctionCall" ):
                listener.exitTrimFunctionCall(self)


    class JsonValueFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def RETURNING(self):
            return self.getToken(MySqlParser.RETURNING, 0)
        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def jsonOnEmpty(self):
            return self.getTypedRuleContext(MySqlParser.JsonOnEmptyContext,0)

        def jsonOnError(self):
            return self.getTypedRuleContext(MySqlParser.JsonOnErrorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonValueFunctionCall" ):
                listener.enterJsonValueFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonValueFunctionCall" ):
                listener.exitJsonValueFunctionCall(self)


    class CaseFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFunctionCall" ):
                listener.enterCaseFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFunctionCall" ):
                listener.exitCaseFunctionCall(self)


    class ExtractFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def EXTRACT(self):
            return self.getToken(MySqlParser.EXTRACT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)

        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExtractFunctionCall" ):
                listener.enterExtractFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExtractFunctionCall" ):
                listener.exitExtractFunctionCall(self)


    class DataTypeFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.separator = None # Token
            self.copyFrom(ctx)

        def CONVERT(self):
            return self.getToken(MySqlParser.CONVERT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def convertedDataType(self):
            return self.getTypedRuleContext(MySqlParser.ConvertedDataTypeContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)

        def CAST(self):
            return self.getToken(MySqlParser.CAST, 0)
        def AS(self):
            return self.getToken(MySqlParser.AS, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeFunctionCall" ):
                listener.enterDataTypeFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeFunctionCall" ):
                listener.exitDataTypeFunctionCall(self)


    class ValuesFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def VALUES(self):
            return self.getToken(MySqlParser.VALUES, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterValuesFunctionCall" ):
                listener.enterValuesFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitValuesFunctionCall" ):
                listener.exitValuesFunctionCall(self)


    class CaseExpressionFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.elseArg = None # FunctionArgContext
            self.copyFrom(ctx)

        def CASE(self):
            return self.getToken(MySqlParser.CASE, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)
        def caseFuncAlternative(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.CaseFuncAlternativeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.CaseFuncAlternativeContext,i)

        def ELSE(self):
            return self.getToken(MySqlParser.ELSE, 0)
        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseExpressionFunctionCall" ):
                listener.enterCaseExpressionFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseExpressionFunctionCall" ):
                listener.exitCaseExpressionFunctionCall(self)


    class SimpleFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)
        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)
        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)
        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)
        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)
        def UTC_TIMESTAMP(self):
            return self.getToken(MySqlParser.UTC_TIMESTAMP, 0)
        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSimpleFunctionCall" ):
                listener.enterSimpleFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSimpleFunctionCall" ):
                listener.exitSimpleFunctionCall(self)


    class CharFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def USING(self):
            return self.getToken(MySqlParser.USING, 0)
        def charsetName(self):
            return self.getTypedRuleContext(MySqlParser.CharsetNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharFunctionCall" ):
                listener.enterCharFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharFunctionCall" ):
                listener.exitCharFunctionCall(self)


    class WeightFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.stringFormat = None # Token
            self.copyFrom(ctx)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)
        def LR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LR_BRACKET)
            else:
                return self.getToken(MySqlParser.LR_BRACKET, i)
        def RR_BRACKET(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.RR_BRACKET)
            else:
                return self.getToken(MySqlParser.RR_BRACKET, i)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def AS(self):
            return self.getToken(MySqlParser.AS, 0)
        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)

        def levelsInWeightString(self):
            return self.getTypedRuleContext(MySqlParser.LevelsInWeightStringContext,0)

        def CHAR(self):
            return self.getToken(MySqlParser.CHAR, 0)
        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWeightFunctionCall" ):
                listener.enterWeightFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWeightFunctionCall" ):
                listener.exitWeightFunctionCall(self)


    class GetFormatFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.datetimeFormat = None # Token
            self.copyFrom(ctx)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def COMMA(self):
            return self.getToken(MySqlParser.COMMA, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)
        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)
        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterGetFormatFunctionCall" ):
                listener.enterGetFormatFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitGetFormatFunctionCall" ):
                listener.exitGetFormatFunctionCall(self)


    class SubstrFunctionCallContext(SpecificFunctionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.SpecificFunctionContext
            super().__init__(parser)
            self.sourceString = None # StringLiteralContext
            self.sourceExpression = None # ExpressionContext
            self.fromDecimal = None # DecimalLiteralContext
            self.fromExpression = None # ExpressionContext
            self.forDecimal = None # DecimalLiteralContext
            self.forExpression = None # ExpressionContext
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def FROM(self):
            return self.getToken(MySqlParser.FROM, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)
        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)
        def stringLiteral(self):
            return self.getTypedRuleContext(MySqlParser.StringLiteralContext,0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)

        def FOR(self):
            return self.getToken(MySqlParser.FOR, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubstrFunctionCall" ):
                listener.enterSubstrFunctionCall(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubstrFunctionCall" ):
                listener.exitSubstrFunctionCall(self)



    def specificFunction(self):

        localctx = MySqlParser.SpecificFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 630, self.RULE_specificFunction)
        self._la = 0 # Token type
        try:
            self.state = 6772
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,998,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.SimpleFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6594
                _la = self._input.LA(1)
                if not(_la==37 or _la==149 or (((_la - 311)) & ~0x3f) == 0 and ((1 << (_la - 311)) & 262159) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6597
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,975,self._ctx)
                if la_ == 1:
                    self.state = 6595
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6596
                    self.match(MySqlParser.RR_BRACKET)


                pass

            elif la_ == 2:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6599
                self.match(MySqlParser.CONVERT)
                self.state = 6600
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6601
                self.expression(0)
                self.state = 6602
                localctx.separator = self.match(MySqlParser.COMMA)
                self.state = 6603
                self.convertedDataType()
                self.state = 6604
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 3:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 3)
                self.state = 6606
                self.match(MySqlParser.CONVERT)
                self.state = 6607
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6608
                self.expression(0)
                self.state = 6609
                self.match(MySqlParser.USING)
                self.state = 6610
                self.charsetName()
                self.state = 6611
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 4:
                localctx = MySqlParser.DataTypeFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 4)
                self.state = 6613
                self.match(MySqlParser.CAST)
                self.state = 6614
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6615
                self.expression(0)
                self.state = 6616
                self.match(MySqlParser.AS)
                self.state = 6617
                self.convertedDataType()
                self.state = 6618
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 5:
                localctx = MySqlParser.ValuesFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 5)
                self.state = 6620
                self.match(MySqlParser.VALUES)
                self.state = 6621
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6622
                self.fullColumnName()
                self.state = 6623
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 6:
                localctx = MySqlParser.CaseExpressionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 6)
                self.state = 6625
                self.match(MySqlParser.CASE)
                self.state = 6626
                self.expression(0)
                self.state = 6628 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6627
                    self.caseFuncAlternative()
                    self.state = 6630 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==187):
                        break

                self.state = 6634
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 6632
                    self.match(MySqlParser.ELSE)
                    self.state = 6633
                    localctx.elseArg = self.functionArg()


                self.state = 6636
                self.match(MySqlParser.END)
                pass

            elif la_ == 7:
                localctx = MySqlParser.CaseFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 7)
                self.state = 6638
                self.match(MySqlParser.CASE)
                self.state = 6640 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 6639
                    self.caseFuncAlternative()
                    self.state = 6642 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==187):
                        break

                self.state = 6646
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==53:
                    self.state = 6644
                    self.match(MySqlParser.ELSE)
                    self.state = 6645
                    localctx.elseArg = self.functionArg()


                self.state = 6648
                self.match(MySqlParser.END)
                pass

            elif la_ == 8:
                localctx = MySqlParser.CharFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 8)
                self.state = 6650
                self.match(MySqlParser.CHAR)
                self.state = 6651
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6652
                self.functionArgs()
                self.state = 6655
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==185:
                    self.state = 6653
                    self.match(MySqlParser.USING)
                    self.state = 6654
                    self.charsetName()


                self.state = 6657
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.PositionFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 9)
                self.state = 6659
                self.match(MySqlParser.POSITION)
                self.state = 6660
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6663
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,981,self._ctx)
                if la_ == 1:
                    self.state = 6661
                    localctx.positionString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6662
                    localctx.positionExpression = self.expression(0)
                    pass


                self.state = 6665
                self.match(MySqlParser.IN)
                self.state = 6668
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,982,self._ctx)
                if la_ == 1:
                    self.state = 6666
                    localctx.inString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6667
                    localctx.inExpression = self.expression(0)
                    pass


                self.state = 6670
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubstrFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 10)
                self.state = 6672
                _la = self._input.LA(1)
                if not(_la==323 or _la==324):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6673
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6676
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,983,self._ctx)
                if la_ == 1:
                    self.state = 6674
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6675
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6678
                self.match(MySqlParser.FROM)
                self.state = 6681
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,984,self._ctx)
                if la_ == 1:
                    self.state = 6679
                    localctx.fromDecimal = self.decimalLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6680
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6688
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==64:
                    self.state = 6683
                    self.match(MySqlParser.FOR)
                    self.state = 6686
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,985,self._ctx)
                    if la_ == 1:
                        self.state = 6684
                        localctx.forDecimal = self.decimalLiteral()
                        pass

                    elif la_ == 2:
                        self.state = 6685
                        localctx.forExpression = self.expression(0)
                        pass




                self.state = 6690
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 11)
                self.state = 6692
                self.match(MySqlParser.TRIM)
                self.state = 6693
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6694
                localctx.positioinForm = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==17 or _la==94 or _la==174):
                    localctx.positioinForm = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6697
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,987,self._ctx)
                if la_ == 1:
                    self.state = 6695
                    localctx.sourceString = self.stringLiteral()

                elif la_ == 2:
                    self.state = 6696
                    localctx.sourceExpression = self.expression(0)


                self.state = 6699
                self.match(MySqlParser.FROM)
                self.state = 6702
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,988,self._ctx)
                if la_ == 1:
                    self.state = 6700
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6701
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6704
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 12:
                localctx = MySqlParser.TrimFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 12)
                self.state = 6706
                self.match(MySqlParser.TRIM)
                self.state = 6707
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6710
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,989,self._ctx)
                if la_ == 1:
                    self.state = 6708
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6709
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6712
                self.match(MySqlParser.FROM)
                self.state = 6715
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,990,self._ctx)
                if la_ == 1:
                    self.state = 6713
                    localctx.fromString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6714
                    localctx.fromExpression = self.expression(0)
                    pass


                self.state = 6717
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 13:
                localctx = MySqlParser.WeightFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 13)
                self.state = 6719
                self.match(MySqlParser.WEIGHT_STRING)
                self.state = 6720
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6723
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,991,self._ctx)
                if la_ == 1:
                    self.state = 6721
                    self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6722
                    self.expression(0)
                    pass


                self.state = 6731
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==12:
                    self.state = 6725
                    self.match(MySqlParser.AS)
                    self.state = 6726
                    localctx.stringFormat = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==220 or _la==224):
                        localctx.stringFormat = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 6727
                    self.match(MySqlParser.LR_BRACKET)
                    self.state = 6728
                    self.decimalLiteral()
                    self.state = 6729
                    self.match(MySqlParser.RR_BRACKET)


                self.state = 6734
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==470:
                    self.state = 6733
                    self.levelsInWeightString()


                self.state = 6736
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 14:
                localctx = MySqlParser.ExtractFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 14)
                self.state = 6738
                self.match(MySqlParser.EXTRACT)
                self.state = 6739
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6740
                self.intervalType()
                self.state = 6741
                self.match(MySqlParser.FROM)
                self.state = 6744
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,994,self._ctx)
                if la_ == 1:
                    self.state = 6742
                    localctx.sourceString = self.stringLiteral()
                    pass

                elif la_ == 2:
                    self.state = 6743
                    localctx.sourceExpression = self.expression(0)
                    pass


                self.state = 6746
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 15:
                localctx = MySqlParser.GetFormatFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 15)
                self.state = 6748
                self.match(MySqlParser.GET_FORMAT)
                self.state = 6749
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6750
                localctx.datetimeFormat = self._input.LT(1)
                _la = self._input.LA(1)
                if not((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & 11) != 0):
                    localctx.datetimeFormat = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6751
                self.match(MySqlParser.COMMA)
                self.state = 6752
                self.stringLiteral()
                self.state = 6753
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 16:
                localctx = MySqlParser.JsonValueFunctionCallContext(self, localctx)
                self.enterOuterAlt(localctx, 16)
                self.state = 6755
                self.match(MySqlParser.JSON_VALUE)
                self.state = 6756
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6757
                self.expression(0)
                self.state = 6758
                self.match(MySqlParser.COMMA)
                self.state = 6759
                self.expression(0)
                self.state = 6762
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==591:
                    self.state = 6760
                    self.match(MySqlParser.RETURNING)
                    self.state = 6761
                    self.convertedDataType()


                self.state = 6765
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,996,self._ctx)
                if la_ == 1:
                    self.state = 6764
                    self.jsonOnEmpty()


                self.state = 6768
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==42 or _la==115 or _la==409:
                    self.state = 6767
                    self.jsonOnError()


                self.state = 6770
                self.match(MySqlParser.RR_BRACKET)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CaseFuncAlternativeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.condition = None # FunctionArgContext
            self.consequent = None # FunctionArgContext

        def WHEN(self):
            return self.getToken(MySqlParser.WHEN, 0)

        def THEN(self):
            return self.getToken(MySqlParser.THEN, 0)

        def functionArg(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionArgContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionArgContext,i)


        def getRuleIndex(self):
            return MySqlParser.RULE_caseFuncAlternative

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCaseFuncAlternative" ):
                listener.enterCaseFuncAlternative(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCaseFuncAlternative" ):
                listener.exitCaseFuncAlternative(self)




    def caseFuncAlternative(self):

        localctx = MySqlParser.CaseFuncAlternativeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 632, self.RULE_caseFuncAlternative)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6774
            self.match(MySqlParser.WHEN)
            self.state = 6775
            localctx.condition = self.functionArg()
            self.state = 6776
            self.match(MySqlParser.THEN)
            self.state = 6777
            localctx.consequent = self.functionArg()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelsInWeightStringContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_levelsInWeightString

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)



    class LevelWeightRangeContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.firstLevel = None # DecimalLiteralContext
            self.lastLevel = None # DecimalLiteralContext
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)
        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightRange" ):
                listener.enterLevelWeightRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightRange" ):
                listener.exitLevelWeightRange(self)


    class LevelWeightListContext(LevelsInWeightStringContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.LevelsInWeightStringContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)
        def levelInWeightListElement(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.LevelInWeightListElementContext)
            else:
                return self.getTypedRuleContext(MySqlParser.LevelInWeightListElementContext,i)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelWeightList" ):
                listener.enterLevelWeightList(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelWeightList" ):
                listener.exitLevelWeightList(self)



    def levelsInWeightString(self):

        localctx = MySqlParser.LevelsInWeightStringContext(self, self._ctx, self.state)
        self.enterRule(localctx, 634, self.RULE_levelsInWeightString)
        self._la = 0 # Token type
        try:
            self.state = 6793
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1000,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.LevelWeightListContext(self, localctx)
                self.enterOuterAlt(localctx, 1)
                self.state = 6779
                self.match(MySqlParser.LEVEL)
                self.state = 6780
                self.levelInWeightListElement()
                self.state = 6785
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 6781
                    self.match(MySqlParser.COMMA)
                    self.state = 6782
                    self.levelInWeightListElement()
                    self.state = 6787
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                localctx = MySqlParser.LevelWeightRangeContext(self, localctx)
                self.enterOuterAlt(localctx, 2)
                self.state = 6788
                self.match(MySqlParser.LEVEL)
                self.state = 6789
                localctx.firstLevel = self.decimalLiteral()
                self.state = 6790
                self.match(MySqlParser.MINUS)
                self.state = 6791
                localctx.lastLevel = self.decimalLiteral()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LevelInWeightListElementContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.orderType = None # Token

        def decimalLiteral(self):
            return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,0)


        def ASC(self):
            return self.getToken(MySqlParser.ASC, 0)

        def DESC(self):
            return self.getToken(MySqlParser.DESC, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_levelInWeightListElement

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLevelInWeightListElement" ):
                listener.enterLevelInWeightListElement(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLevelInWeightListElement" ):
                listener.exitLevelInWeightListElement(self)




    def levelInWeightListElement(self):

        localctx = MySqlParser.LevelInWeightListElementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 636, self.RULE_levelInWeightListElement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6795
            self.decimalLiteral()
            self.state = 6797
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==13 or _la==45 or _la==988:
                self.state = 6796
                localctx.orderType = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==13 or _la==45 or _la==988):
                    localctx.orderType = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.aggregator = None # Token
            self.starArg = None # Token
            self.separator = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def overClause(self):
            return self.getTypedRuleContext(MySqlParser.OverClauseContext,0)


        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)

        def DISTINCT(self):
            return self.getToken(MySqlParser.DISTINCT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def functionArgs(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgsContext,0)


        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def orderByExpression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.OrderByExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.OrderByExpressionContext,i)


        def SEPARATOR(self):
            return self.getToken(MySqlParser.SEPARATOR, 0)

        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_aggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterAggregateWindowedFunction" ):
                listener.enterAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitAggregateWindowedFunction" ):
                listener.exitAggregateWindowedFunction(self)




    def aggregateWindowedFunction(self):

        localctx = MySqlParser.AggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 638, self.RULE_aggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6858
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [284, 296, 297, 307]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6799
                _la = self._input.LA(1)
                if not((((_la - 284)) & ~0x3f) == 0 and ((1 << (_la - 284)) & 8400897) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6800
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6802
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1002,self._ctx)
                if la_ == 1:
                    self.state = 6801
                    localctx.aggregator = self._input.LT(1)
                    _la = self._input.LA(1)
                    if not(_la==6 or _la==49):
                        localctx.aggregator = self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()


                self.state = 6804
                self.functionArg()
                self.state = 6805
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6807
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1003,self._ctx)
                if la_ == 1:
                    self.state = 6806
                    self.overClause()


                pass
            elif token in [288]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6809
                self.match(MySqlParser.COUNT)
                self.state = 6810
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6818
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1005,self._ctx)
                if la_ == 1:
                    self.state = 6811
                    localctx.starArg = self.match(MySqlParser.STAR)
                    pass

                elif la_ == 2:
                    self.state = 6813
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1004,self._ctx)
                    if la_ == 1:
                        self.state = 6812
                        localctx.aggregator = self.match(MySqlParser.ALL)


                    self.state = 6815
                    self.functionArg()
                    pass

                elif la_ == 3:
                    self.state = 6816
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)
                    self.state = 6817
                    self.functionArgs()
                    pass


                self.state = 6820
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6822
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1006,self._ctx)
                if la_ == 1:
                    self.state = 6821
                    self.overClause()


                pass
            elif token in [285, 286, 287, 303, 304, 305, 306, 308, 309, 310]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6824
                _la = self._input.LA(1)
                if not((((_la - 285)) & ~0x3f) == 0 and ((1 << (_la - 285)) & 62652423) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6825
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6827
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1007,self._ctx)
                if la_ == 1:
                    self.state = 6826
                    localctx.aggregator = self.match(MySqlParser.ALL)


                self.state = 6829
                self.functionArg()
                self.state = 6830
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6832
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1008,self._ctx)
                if la_ == 1:
                    self.state = 6831
                    self.overClause()


                pass
            elif token in [292]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6834
                self.match(MySqlParser.GROUP_CONCAT)
                self.state = 6835
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6837
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1009,self._ctx)
                if la_ == 1:
                    self.state = 6836
                    localctx.aggregator = self.match(MySqlParser.DISTINCT)


                self.state = 6839
                self.functionArgs()
                self.state = 6850
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==123:
                    self.state = 6840
                    self.match(MySqlParser.ORDER)
                    self.state = 6841
                    self.match(MySqlParser.BY)
                    self.state = 6842
                    self.orderByExpression()
                    self.state = 6847
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==1128:
                        self.state = 6843
                        self.match(MySqlParser.COMMA)
                        self.state = 6844
                        self.orderByExpression()
                        self.state = 6849
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 6854
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==153:
                    self.state = 6852
                    self.match(MySqlParser.SEPARATOR)
                    self.state = 6853
                    localctx.separator = self.match(MySqlParser.STRING_LITERAL)


                self.state = 6856
                self.match(MySqlParser.RR_BRACKET)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class NonAggregateWindowedFunctionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def overClause(self):
            return self.getTypedRuleContext(MySqlParser.OverClauseContext,0)


        def LAG(self):
            return self.getToken(MySqlParser.LAG, 0)

        def LEAD(self):
            return self.getToken(MySqlParser.LEAD, 0)

        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def decimalLiteral(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.DecimalLiteralContext)
            else:
                return self.getTypedRuleContext(MySqlParser.DecimalLiteralContext,i)


        def FIRST_VALUE(self):
            return self.getToken(MySqlParser.FIRST_VALUE, 0)

        def LAST_VALUE(self):
            return self.getToken(MySqlParser.LAST_VALUE, 0)

        def CUME_DIST(self):
            return self.getToken(MySqlParser.CUME_DIST, 0)

        def DENSE_RANK(self):
            return self.getToken(MySqlParser.DENSE_RANK, 0)

        def PERCENT_RANK(self):
            return self.getToken(MySqlParser.PERCENT_RANK, 0)

        def RANK(self):
            return self.getToken(MySqlParser.RANK, 0)

        def ROW_NUMBER(self):
            return self.getToken(MySqlParser.ROW_NUMBER, 0)

        def NTH_VALUE(self):
            return self.getToken(MySqlParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(MySqlParser.NTILE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_nonAggregateWindowedFunction

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNonAggregateWindowedFunction" ):
                listener.enterNonAggregateWindowedFunction(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNonAggregateWindowedFunction" ):
                listener.exitNonAggregateWindowedFunction(self)




    def nonAggregateWindowedFunction(self):

        localctx = MySqlParser.NonAggregateWindowedFunctionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 640, self.RULE_nonAggregateWindowedFunction)
        self._la = 0 # Token type
        try:
            self.state = 6898
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [293, 295]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6860
                _la = self._input.LA(1)
                if not(_la==293 or _la==295):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6861
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6862
                self.expression(0)
                self.state = 6865
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1014,self._ctx)
                if la_ == 1:
                    self.state = 6863
                    self.match(MySqlParser.COMMA)
                    self.state = 6864
                    self.decimalLiteral()


                self.state = 6869
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==1128:
                    self.state = 6867
                    self.match(MySqlParser.COMMA)
                    self.state = 6868
                    self.decimalLiteral()


                self.state = 6871
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6872
                self.overClause()
                pass
            elif token in [291, 294]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6874
                _la = self._input.LA(1)
                if not(_la==291 or _la==294):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6875
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6876
                self.expression(0)
                self.state = 6877
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6878
                self.overClause()
                pass
            elif token in [289, 290, 300, 301, 302]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6880
                _la = self._input.LA(1)
                if not((((_la - 289)) & ~0x3f) == 0 and ((1 << (_la - 289)) & 14339) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 6881
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6882
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6883
                self.overClause()
                pass
            elif token in [299]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6884
                self.match(MySqlParser.NTH_VALUE)
                self.state = 6885
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6886
                self.expression(0)
                self.state = 6887
                self.match(MySqlParser.COMMA)
                self.state = 6888
                self.decimalLiteral()
                self.state = 6889
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6890
                self.overClause()
                pass
            elif token in [298]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6892
                self.match(MySqlParser.NTILE)
                self.state = 6893
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6894
                self.decimalLiteral()
                self.state = 6895
                self.match(MySqlParser.RR_BRACKET)
                self.state = 6896
                self.overClause()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class OverClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def OVER(self):
            return self.getToken(MySqlParser.OVER, 0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def windowName(self):
            return self.getTypedRuleContext(MySqlParser.WindowNameContext,0)


        def windowSpec(self):
            return self.getTypedRuleContext(MySqlParser.WindowSpecContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_overClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterOverClause" ):
                listener.enterOverClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitOverClause" ):
                listener.exitOverClause(self)




    def overClause(self):

        localctx = MySqlParser.OverClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 642, self.RULE_overClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6900
            self.match(MySqlParser.OVER)
            self.state = 6907
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1126]:
                self.state = 6901
                self.match(MySqlParser.LR_BRACKET)
                self.state = 6903
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1017,self._ctx)
                if la_ == 1:
                    self.state = 6902
                    self.windowSpec()


                self.state = 6905
                self.match(MySqlParser.RR_BRACKET)
                pass
            elif token in [14, 18, 29, 35, 37, 39, 42, 48, 55, 58, 72, 76, 78, 84, 93, 96, 116, 120, 123, 129, 140, 147, 149, 166, 215, 216, 217, 218, 219, 224, 232, 235, 237, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 589, 590, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 675, 676, 677, 678, 679, 680, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 712, 713, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116, 1138, 1141, 1149, 1150]:
                self.state = 6906
                self.windowName()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowSpecContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def windowName(self):
            return self.getTypedRuleContext(MySqlParser.WindowNameContext,0)


        def partitionClause(self):
            return self.getTypedRuleContext(MySqlParser.PartitionClauseContext,0)


        def orderByClause(self):
            return self.getTypedRuleContext(MySqlParser.OrderByClauseContext,0)


        def frameClause(self):
            return self.getTypedRuleContext(MySqlParser.FrameClauseContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_windowSpec

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowSpec" ):
                listener.enterWindowSpec(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowSpec" ):
                listener.exitWindowSpec(self)




    def windowSpec(self):

        localctx = MySqlParser.WindowSpecContext(self, self._ctx, self.state)
        self.enterRule(localctx, 644, self.RULE_windowSpec)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6910
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1019,self._ctx)
            if la_ == 1:
                self.state = 6909
                self.windowName()


            self.state = 6913
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==128:
                self.state = 6912
                self.partitionClause()


            self.state = 6916
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==123:
                self.state = 6915
                self.orderByClause()


            self.state = 6919
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==132 or _la==599:
                self.state = 6918
                self.frameClause()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WindowNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def uid(self):
            return self.getTypedRuleContext(MySqlParser.UidContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_windowName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterWindowName" ):
                listener.enterWindowName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitWindowName" ):
                listener.exitWindowName(self)




    def windowName(self):

        localctx = MySqlParser.WindowNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 646, self.RULE_windowName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6921
            self.uid()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameUnits(self):
            return self.getTypedRuleContext(MySqlParser.FrameUnitsContext,0)


        def frameExtent(self):
            return self.getTypedRuleContext(MySqlParser.FrameExtentContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameClause" ):
                listener.enterFrameClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameClause" ):
                listener.exitFrameClause(self)




    def frameClause(self):

        localctx = MySqlParser.FrameClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 648, self.RULE_frameClause)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6923
            self.frameUnits()
            self.state = 6924
            self.frameExtent()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameUnitsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def RANGE(self):
            return self.getToken(MySqlParser.RANGE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_frameUnits

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameUnits" ):
                listener.enterFrameUnits(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameUnits" ):
                listener.exitFrameUnits(self)




    def frameUnits(self):

        localctx = MySqlParser.FrameUnitsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 650, self.RULE_frameUnits)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6926
            _la = self._input.LA(1)
            if not(_la==132 or _la==599):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameExtentContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def frameRange(self):
            return self.getTypedRuleContext(MySqlParser.FrameRangeContext,0)


        def frameBetween(self):
            return self.getTypedRuleContext(MySqlParser.FrameBetweenContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameExtent

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameExtent" ):
                listener.enterFrameExtent(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameExtent" ):
                listener.exitFrameExtent(self)




    def frameExtent(self):

        localctx = MySqlParser.FrameExtentContext(self, self._ctx, self.state)
        self.enterRule(localctx, 652, self.RULE_frameExtent)
        try:
            self.state = 6930
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1023,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6928
                self.frameRange()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6929
                self.frameBetween()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameBetweenContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)

        def frameRange(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FrameRangeContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FrameRangeContext,i)


        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_frameBetween

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameBetween" ):
                listener.enterFrameBetween(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameBetween" ):
                listener.exitFrameBetween(self)




    def frameBetween(self):

        localctx = MySqlParser.FrameBetweenContext(self, self._ctx, self.state)
        self.enterRule(localctx, 654, self.RULE_frameBetween)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6932
            self.match(MySqlParser.BETWEEN)
            self.state = 6933
            self.frameRange()
            self.state = 6934
            self.match(MySqlParser.AND)
            self.state = 6935
            self.frameRange()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FrameRangeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def UNBOUNDED(self):
            return self.getToken(MySqlParser.UNBOUNDED, 0)

        def PRECEDING(self):
            return self.getToken(MySqlParser.PRECEDING, 0)

        def FOLLOWING(self):
            return self.getToken(MySqlParser.FOLLOWING, 0)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_frameRange

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFrameRange" ):
                listener.enterFrameRange(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFrameRange" ):
                listener.exitFrameRange(self)




    def frameRange(self):

        localctx = MySqlParser.FrameRangeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 656, self.RULE_frameRange)
        self._la = 0 # Token type
        try:
            self.state = 6944
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1024,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 6937
                self.match(MySqlParser.CURRENT)
                self.state = 6938
                self.match(MySqlParser.ROW)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 6939
                self.match(MySqlParser.UNBOUNDED)
                self.state = 6940
                _la = self._input.LA(1)
                if not(_la==431 or _la==557):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 6941
                self.expression(0)
                self.state = 6942
                _la = self._input.LA(1)
                if not(_la==431 or _la==557):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PartitionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PARTITION(self):
            return self.getToken(MySqlParser.PARTITION, 0)

        def BY(self):
            return self.getToken(MySqlParser.BY, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_partitionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPartitionClause" ):
                listener.enterPartitionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPartitionClause" ):
                listener.exitPartitionClause(self)




    def partitionClause(self):

        localctx = MySqlParser.PartitionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 658, self.RULE_partitionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6946
            self.match(MySqlParser.PARTITION)
            self.state = 6947
            self.match(MySqlParser.BY)
            self.state = 6948
            self.expression(0)
            self.state = 6953
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6949
                self.match(MySqlParser.COMMA)
                self.state = 6950
                self.expression(0)
                self.state = 6955
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScalarFunctionNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def functionNameBase(self):
            return self.getTypedRuleContext(MySqlParser.FunctionNameBaseContext,0)


        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def CURDATE(self):
            return self.getToken(MySqlParser.CURDATE, 0)

        def CURRENT_DATE(self):
            return self.getToken(MySqlParser.CURRENT_DATE, 0)

        def CURRENT_TIME(self):
            return self.getToken(MySqlParser.CURRENT_TIME, 0)

        def CURRENT_TIMESTAMP(self):
            return self.getToken(MySqlParser.CURRENT_TIMESTAMP, 0)

        def CURTIME(self):
            return self.getToken(MySqlParser.CURTIME, 0)

        def DATE_ADD(self):
            return self.getToken(MySqlParser.DATE_ADD, 0)

        def DATE_SUB(self):
            return self.getToken(MySqlParser.DATE_SUB, 0)

        def IF(self):
            return self.getToken(MySqlParser.IF, 0)

        def INSERT(self):
            return self.getToken(MySqlParser.INSERT, 0)

        def LOCALTIME(self):
            return self.getToken(MySqlParser.LOCALTIME, 0)

        def LOCALTIMESTAMP(self):
            return self.getToken(MySqlParser.LOCALTIMESTAMP, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def NOW(self):
            return self.getToken(MySqlParser.NOW, 0)

        def REPLACE(self):
            return self.getToken(MySqlParser.REPLACE, 0)

        def SUBSTR(self):
            return self.getToken(MySqlParser.SUBSTR, 0)

        def SUBSTRING(self):
            return self.getToken(MySqlParser.SUBSTRING, 0)

        def SYSDATE(self):
            return self.getToken(MySqlParser.SYSDATE, 0)

        def TRIM(self):
            return self.getToken(MySqlParser.TRIM, 0)

        def UTC_DATE(self):
            return self.getToken(MySqlParser.UTC_DATE, 0)

        def UTC_TIME(self):
            return self.getToken(MySqlParser.UTC_TIME, 0)

        def UTC_TIMESTAMP(self):
            return self.getToken(MySqlParser.UTC_TIMESTAMP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_scalarFunctionName

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterScalarFunctionName" ):
                listener.enterScalarFunctionName(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitScalarFunctionName" ):
                listener.exitScalarFunctionName(self)




    def scalarFunctionName(self):

        localctx = MySqlParser.ScalarFunctionNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 660, self.RULE_scalarFunctionName)
        try:
            self.state = 6979
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [39, 96, 147, 149, 215, 216, 217, 219, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 288, 289, 290, 291, 293, 294, 295, 298, 299, 300, 301, 302, 322, 457, 671, 687, 688, 689, 690, 691, 692, 693, 694, 731, 798, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 995, 996, 997, 998, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1116]:
                self.enterOuterAlt(localctx, 1)
                self.state = 6956
                self.functionNameBase()
                pass
            elif token in [742]:
                self.enterOuterAlt(localctx, 2)
                self.state = 6957
                self.match(MySqlParser.ASCII)
                pass
            elif token in [315]:
                self.enterOuterAlt(localctx, 3)
                self.state = 6958
                self.match(MySqlParser.CURDATE)
                pass
            elif token in [311]:
                self.enterOuterAlt(localctx, 4)
                self.state = 6959
                self.match(MySqlParser.CURRENT_DATE)
                pass
            elif token in [312]:
                self.enterOuterAlt(localctx, 5)
                self.state = 6960
                self.match(MySqlParser.CURRENT_TIME)
                pass
            elif token in [313]:
                self.enterOuterAlt(localctx, 6)
                self.state = 6961
                self.match(MySqlParser.CURRENT_TIMESTAMP)
                pass
            elif token in [316]:
                self.enterOuterAlt(localctx, 7)
                self.state = 6962
                self.match(MySqlParser.CURTIME)
                pass
            elif token in [317]:
                self.enterOuterAlt(localctx, 8)
                self.state = 6963
                self.match(MySqlParser.DATE_ADD)
                pass
            elif token in [318]:
                self.enterOuterAlt(localctx, 9)
                self.state = 6964
                self.match(MySqlParser.DATE_SUB)
                pass
            elif token in [76]:
                self.enterOuterAlt(localctx, 10)
                self.state = 6965
                self.match(MySqlParser.IF)
                pass
            elif token in [84]:
                self.enterOuterAlt(localctx, 11)
                self.state = 6966
                self.match(MySqlParser.INSERT)
                pass
            elif token in [314]:
                self.enterOuterAlt(localctx, 12)
                self.state = 6967
                self.match(MySqlParser.LOCALTIME)
                pass
            elif token in [320]:
                self.enterOuterAlt(localctx, 13)
                self.state = 6968
                self.match(MySqlParser.LOCALTIMESTAMP)
                pass
            elif token in [506]:
                self.enterOuterAlt(localctx, 14)
                self.state = 6969
                self.match(MySqlParser.MID)
                pass
            elif token in [321]:
                self.enterOuterAlt(localctx, 15)
                self.state = 6970
                self.match(MySqlParser.NOW)
                pass
            elif token in [140]:
                self.enterOuterAlt(localctx, 16)
                self.state = 6971
                self.match(MySqlParser.REPLACE)
                pass
            elif token in [323]:
                self.enterOuterAlt(localctx, 17)
                self.state = 6972
                self.match(MySqlParser.SUBSTR)
                pass
            elif token in [324]:
                self.enterOuterAlt(localctx, 18)
                self.state = 6973
                self.match(MySqlParser.SUBSTRING)
                pass
            elif token in [325]:
                self.enterOuterAlt(localctx, 19)
                self.state = 6974
                self.match(MySqlParser.SYSDATE)
                pass
            elif token in [326]:
                self.enterOuterAlt(localctx, 20)
                self.state = 6975
                self.match(MySqlParser.TRIM)
                pass
            elif token in [327]:
                self.enterOuterAlt(localctx, 21)
                self.state = 6976
                self.match(MySqlParser.UTC_DATE)
                pass
            elif token in [328]:
                self.enterOuterAlt(localctx, 22)
                self.state = 6977
                self.match(MySqlParser.UTC_TIME)
                pass
            elif token in [329]:
                self.enterOuterAlt(localctx, 23)
                self.state = 6978
                self.match(MySqlParser.UTC_TIMESTAMP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PasswordFunctionClauseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser
            self.functionName = None # Token

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)

        def functionArg(self):
            return self.getTypedRuleContext(MySqlParser.FunctionArgContext,0)


        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_passwordFunctionClause

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPasswordFunctionClause" ):
                listener.enterPasswordFunctionClause(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPasswordFunctionClause" ):
                listener.exitPasswordFunctionClause(self)




    def passwordFunctionClause(self):

        localctx = MySqlParser.PasswordFunctionClauseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 662, self.RULE_passwordFunctionClause)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6981
            localctx.functionName = self._input.LT(1)
            _la = self._input.LA(1)
            if not(_la==533 or _la==549):
                localctx.functionName = self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 6982
            self.match(MySqlParser.LR_BRACKET)
            self.state = 6983
            self.functionArg()
            self.state = 6984
            self.match(MySqlParser.RR_BRACKET)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgsContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ConstantContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ConstantContext,i)


        def fullColumnName(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FullColumnNameContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,i)


        def functionCall(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.FunctionCallContext)
            else:
                return self.getTypedRuleContext(MySqlParser.FunctionCallContext,i)


        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)


        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionArgs

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArgs" ):
                listener.enterFunctionArgs(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArgs" ):
                listener.exitFunctionArgs(self)




    def functionArgs(self):

        localctx = MySqlParser.FunctionArgsContext(self, self._ctx, self.state)
        self.enterRule(localctx, 664, self.RULE_functionArgs)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 6990
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1027,self._ctx)
            if la_ == 1:
                self.state = 6986
                self.constant()
                pass

            elif la_ == 2:
                self.state = 6987
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.state = 6988
                self.functionCall()
                pass

            elif la_ == 4:
                self.state = 6989
                self.expression(0)
                pass


            self.state = 7001
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==1128:
                self.state = 6992
                self.match(MySqlParser.COMMA)
                self.state = 6997
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,1028,self._ctx)
                if la_ == 1:
                    self.state = 6993
                    self.constant()
                    pass

                elif la_ == 2:
                    self.state = 6994
                    self.fullColumnName()
                    pass

                elif la_ == 3:
                    self.state = 6995
                    self.functionCall()
                    pass

                elif la_ == 4:
                    self.state = 6996
                    self.expression(0)
                    pass


                self.state = 7003
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionArgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)


        def getRuleIndex(self):
            return MySqlParser.RULE_functionArg

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionArg" ):
                listener.enterFunctionArg(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionArg" ):
                listener.exitFunctionArg(self)




    def functionArg(self):

        localctx = MySqlParser.FunctionArgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 666, self.RULE_functionArg)
        try:
            self.state = 7008
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1030,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7004
                self.constant()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7005
                self.fullColumnName()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7006
                self.functionCall()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7007
                self.expression(0)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expression

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class IsExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.testValue = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def TRUE(self):
            return self.getToken(MySqlParser.TRUE, 0)
        def FALSE(self):
            return self.getToken(MySqlParser.FALSE, 0)
        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsExpression" ):
                listener.enterIsExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsExpression" ):
                listener.exitIsExpression(self)


    class NotExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.notOperator = None # Token
            self.copyFrom(ctx)

        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNotExpression" ):
                listener.enterNotExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNotExpression" ):
                listener.exitNotExpression(self)


    class LogicalExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def logicalOperator(self):
            return self.getTypedRuleContext(MySqlParser.LogicalOperatorContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalExpression" ):
                listener.enterLogicalExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalExpression" ):
                listener.exitLogicalExpression(self)


    class PredicateExpressionContext(ExpressionContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPredicateExpression" ):
                listener.enterPredicateExpression(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPredicateExpression" ):
                listener.exitPredicateExpression(self)



    def expression(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 668
        self.enterRecursionRule(localctx, 668, self.RULE_expression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7021
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1032,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.NotExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 7011
                localctx.notOperator = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==113 or _la==1120):
                    localctx.notOperator = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 7012
                self.expression(4)
                pass

            elif la_ == 2:
                localctx = MySqlParser.IsExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7013
                self.predicate(0)
                self.state = 7014
                self.match(MySqlParser.IS)
                self.state = 7016
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==113:
                    self.state = 7015
                    self.match(MySqlParser.NOT)


                self.state = 7018
                localctx.testValue = self._input.LT(1)
                _la = self._input.LA(1)
                if not(_la==62 or _la==176 or _la==660):
                    localctx.testValue = self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 3:
                localctx = MySqlParser.PredicateExpressionContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7020
                self.predicate(0)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7029
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1033,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = MySqlParser.LogicalExpressionContext(self, MySqlParser.ExpressionContext(self, _parentctx, _parentState))
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_expression)
                    self.state = 7023
                    if not self.precpred(self._ctx, 3):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                    self.state = 7024
                    self.logicalOperator()
                    self.state = 7025
                    self.expression(4) 
                self.state = 7031
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1033,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class PredicateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_predicate

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class SoundsLikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)
        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSoundsLikePredicate" ):
                listener.enterSoundsLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSoundsLikePredicate" ):
                listener.exitSoundsLikePredicate(self)


    class ExpressionAtomPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def LOCAL_ID(self):
            return self.getToken(MySqlParser.LOCAL_ID, 0)
        def VAR_ASSIGN(self):
            return self.getToken(MySqlParser.VAR_ASSIGN, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExpressionAtomPredicate" ):
                listener.enterExpressionAtomPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExpressionAtomPredicate" ):
                listener.exitExpressionAtomPredicate(self)


    class SubqueryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.quantifier = None # Token
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def ALL(self):
            return self.getToken(MySqlParser.ALL, 0)
        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)
        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryComparisonPredicate" ):
                listener.enterSubqueryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryComparisonPredicate" ):
                listener.exitSubqueryComparisonPredicate(self)


    class JsonMemberOfPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)
        def OF(self):
            return self.getToken(MySqlParser.OF, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonMemberOfPredicate" ):
                listener.enterJsonMemberOfPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonMemberOfPredicate" ):
                listener.exitJsonMemberOfPredicate(self)


    class BinaryComparisonPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.left = None # PredicateContext
            self.right = None # PredicateContext
            self.copyFrom(ctx)

        def comparisonOperator(self):
            return self.getTypedRuleContext(MySqlParser.ComparisonOperatorContext,0)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryComparisonPredicate" ):
                listener.enterBinaryComparisonPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryComparisonPredicate" ):
                listener.exitBinaryComparisonPredicate(self)


    class InPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IN(self):
            return self.getToken(MySqlParser.IN, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def expressions(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionsContext,0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterInPredicate" ):
                listener.enterInPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitInPredicate" ):
                listener.exitInPredicate(self)


    class BetweenPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def BETWEEN(self):
            return self.getToken(MySqlParser.BETWEEN, 0)
        def AND(self):
            return self.getToken(MySqlParser.AND, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBetweenPredicate" ):
                listener.enterBetweenPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBetweenPredicate" ):
                listener.exitBetweenPredicate(self)


    class IsNullPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self):
            return self.getTypedRuleContext(MySqlParser.PredicateContext,0)

        def IS(self):
            return self.getToken(MySqlParser.IS, 0)
        def nullNotnull(self):
            return self.getTypedRuleContext(MySqlParser.NullNotnullContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIsNullPredicate" ):
                listener.enterIsNullPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIsNullPredicate" ):
                listener.exitIsNullPredicate(self)


    class LikePredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def LIKE(self):
            return self.getToken(MySqlParser.LIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)
        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)
        def STRING_LITERAL(self):
            return self.getToken(MySqlParser.STRING_LITERAL, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLikePredicate" ):
                listener.enterLikePredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLikePredicate" ):
                listener.exitLikePredicate(self)


    class RegexpPredicateContext(PredicateContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.PredicateContext
            super().__init__(parser)
            self.regex = None # Token
            self.copyFrom(ctx)

        def predicate(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.PredicateContext)
            else:
                return self.getTypedRuleContext(MySqlParser.PredicateContext,i)

        def REGEXP(self):
            return self.getToken(MySqlParser.REGEXP, 0)
        def RLIKE(self):
            return self.getToken(MySqlParser.RLIKE, 0)
        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterRegexpPredicate" ):
                listener.enterRegexpPredicate(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitRegexpPredicate" ):
                listener.exitRegexpPredicate(self)



    def predicate(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.PredicateContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 670
        self.enterRecursionRule(localctx, 670, self.RULE_predicate, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            localctx = MySqlParser.ExpressionAtomPredicateContext(self, localctx)
            self._ctx = localctx
            _prevctx = localctx

            self.state = 7035
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1034,self._ctx)
            if la_ == 1:
                self.state = 7033
                self.match(MySqlParser.LOCAL_ID)
                self.state = 7034
                self.match(MySqlParser.VAR_ASSIGN)


            self.state = 7037
            self.expressionAtom(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 7103
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1042,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7101
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1041,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BinaryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7039
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 7040
                        self.comparisonOperator()
                        self.state = 7041
                        localctx.right = self.predicate(9)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.BetweenPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7043
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 7045
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==113:
                            self.state = 7044
                            self.match(MySqlParser.NOT)


                        self.state = 7047
                        self.match(MySqlParser.BETWEEN)
                        self.state = 7048
                        self.predicate(0)
                        self.state = 7049
                        self.match(MySqlParser.AND)
                        self.state = 7050
                        self.predicate(7)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.SoundsLikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7052
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 7053
                        self.match(MySqlParser.SOUNDS)
                        self.state = 7054
                        self.match(MySqlParser.LIKE)
                        self.state = 7055
                        self.predicate(6)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.RegexpPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7056
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7058
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==113:
                            self.state = 7057
                            self.match(MySqlParser.NOT)


                        self.state = 7060
                        localctx.regex = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==136 or _la==148):
                            localctx.regex = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7061
                        self.predicate(4)
                        pass

                    elif la_ == 5:
                        localctx = MySqlParser.InPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7062
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 7064
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==113:
                            self.state = 7063
                            self.match(MySqlParser.NOT)


                        self.state = 7066
                        self.match(MySqlParser.IN)
                        self.state = 7067
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7070
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1038,self._ctx)
                        if la_ == 1:
                            self.state = 7068
                            self.selectStatement()
                            pass

                        elif la_ == 2:
                            self.state = 7069
                            self.expressions()
                            pass


                        self.state = 7072
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 6:
                        localctx = MySqlParser.IsNullPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7074
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 7075
                        self.match(MySqlParser.IS)
                        self.state = 7076
                        self.nullNotnull()
                        pass

                    elif la_ == 7:
                        localctx = MySqlParser.SubqueryComparisonPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7077
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 7078
                        self.comparisonOperator()
                        self.state = 7079
                        localctx.quantifier = self._input.LT(1)
                        _la = self._input.LA(1)
                        if not(_la==6 or _la==335 or _la==616):
                            localctx.quantifier = self._errHandler.recoverInline(self)
                        else:
                            self._errHandler.reportMatch(self)
                            self.consume()
                        self.state = 7080
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7081
                        self.selectStatement()
                        self.state = 7082
                        self.match(MySqlParser.RR_BRACKET)
                        pass

                    elif la_ == 8:
                        localctx = MySqlParser.LikePredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7084
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 7086
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        if _la==113:
                            self.state = 7085
                            self.match(MySqlParser.NOT)


                        self.state = 7088
                        self.match(MySqlParser.LIKE)
                        self.state = 7089
                        self.predicate(0)
                        self.state = 7092
                        self._errHandler.sync(self)
                        la_ = self._interp.adaptivePredict(self._input,1040,self._ctx)
                        if la_ == 1:
                            self.state = 7090
                            self.match(MySqlParser.ESCAPE)
                            self.state = 7091
                            self.match(MySqlParser.STRING_LITERAL)


                        pass

                    elif la_ == 9:
                        localctx = MySqlParser.JsonMemberOfPredicateContext(self, MySqlParser.PredicateContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_predicate)
                        self.state = 7094
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7095
                        self.match(MySqlParser.MEMBER)
                        self.state = 7096
                        self.match(MySqlParser.OF)
                        self.state = 7097
                        self.match(MySqlParser.LR_BRACKET)
                        self.state = 7098
                        self.predicate(0)
                        self.state = 7099
                        self.match(MySqlParser.RR_BRACKET)
                        pass

             
                self.state = 7105
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1042,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class ExpressionAtomContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return MySqlParser.RULE_expressionAtom

     
        def copyFrom(self, ctx:ParserRuleContext):
            super().copyFrom(ctx)


    class UnaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def unaryOperator(self):
            return self.getTypedRuleContext(MySqlParser.UnaryOperatorContext,0)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryExpressionAtom" ):
                listener.enterUnaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryExpressionAtom" ):
                listener.exitUnaryExpressionAtom(self)


    class CollateExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)

        def COLLATE(self):
            return self.getToken(MySqlParser.COLLATE, 0)
        def collationName(self):
            return self.getTypedRuleContext(MySqlParser.CollationNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCollateExpressionAtom" ):
                listener.enterCollateExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCollateExpressionAtom" ):
                listener.exitCollateExpressionAtom(self)


    class MysqlVariableExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def mysqlVariable(self):
            return self.getTypedRuleContext(MySqlParser.MysqlVariableContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMysqlVariableExpressionAtom" ):
                listener.enterMysqlVariableExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMysqlVariableExpressionAtom" ):
                listener.exitMysqlVariableExpressionAtom(self)


    class NestedExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedExpressionAtom" ):
                listener.enterNestedExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedExpressionAtom" ):
                listener.exitNestedExpressionAtom(self)


    class NestedRowExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionContext,i)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)
        def COMMA(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.COMMA)
            else:
                return self.getToken(MySqlParser.COMMA, i)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterNestedRowExpressionAtom" ):
                listener.enterNestedRowExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitNestedRowExpressionAtom" ):
                listener.exitNestedRowExpressionAtom(self)


    class MathExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def mathOperator(self):
            return self.getTypedRuleContext(MySqlParser.MathOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathExpressionAtom" ):
                listener.enterMathExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathExpressionAtom" ):
                listener.exitMathExpressionAtom(self)


    class ExistsExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def EXISTS(self):
            return self.getToken(MySqlParser.EXISTS, 0)
        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterExistsExpressionAtom" ):
                listener.enterExistsExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitExistsExpressionAtom" ):
                listener.exitExistsExpressionAtom(self)


    class IntervalExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def INTERVAL(self):
            return self.getToken(MySqlParser.INTERVAL, 0)
        def expression(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionContext,0)

        def intervalType(self):
            return self.getTypedRuleContext(MySqlParser.IntervalTypeContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalExpressionAtom" ):
                listener.enterIntervalExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalExpressionAtom" ):
                listener.exitIntervalExpressionAtom(self)


    class JsonExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def jsonOperator(self):
            return self.getTypedRuleContext(MySqlParser.JsonOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonExpressionAtom" ):
                listener.enterJsonExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonExpressionAtom" ):
                listener.exitJsonExpressionAtom(self)


    class SubqueryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def LR_BRACKET(self):
            return self.getToken(MySqlParser.LR_BRACKET, 0)
        def selectStatement(self):
            return self.getTypedRuleContext(MySqlParser.SelectStatementContext,0)

        def RR_BRACKET(self):
            return self.getToken(MySqlParser.RR_BRACKET, 0)

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterSubqueryExpressionAtom" ):
                listener.enterSubqueryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitSubqueryExpressionAtom" ):
                listener.exitSubqueryExpressionAtom(self)


    class ConstantExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def constant(self):
            return self.getTypedRuleContext(MySqlParser.ConstantContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterConstantExpressionAtom" ):
                listener.enterConstantExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitConstantExpressionAtom" ):
                listener.exitConstantExpressionAtom(self)


    class FunctionCallExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def functionCall(self):
            return self.getTypedRuleContext(MySqlParser.FunctionCallContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionCallExpressionAtom" ):
                listener.enterFunctionCallExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionCallExpressionAtom" ):
                listener.exitFunctionCallExpressionAtom(self)


    class BinaryExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)
        def expressionAtom(self):
            return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBinaryExpressionAtom" ):
                listener.enterBinaryExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBinaryExpressionAtom" ):
                listener.exitBinaryExpressionAtom(self)


    class FullColumnNameExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.copyFrom(ctx)

        def fullColumnName(self):
            return self.getTypedRuleContext(MySqlParser.FullColumnNameContext,0)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFullColumnNameExpressionAtom" ):
                listener.enterFullColumnNameExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFullColumnNameExpressionAtom" ):
                listener.exitFullColumnNameExpressionAtom(self)


    class BitExpressionAtomContext(ExpressionAtomContext):

        def __init__(self, parser, ctx:ParserRuleContext): # actually a MySqlParser.ExpressionAtomContext
            super().__init__(parser)
            self.left = None # ExpressionAtomContext
            self.right = None # ExpressionAtomContext
            self.copyFrom(ctx)

        def bitOperator(self):
            return self.getTypedRuleContext(MySqlParser.BitOperatorContext,0)

        def expressionAtom(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(MySqlParser.ExpressionAtomContext)
            else:
                return self.getTypedRuleContext(MySqlParser.ExpressionAtomContext,i)


        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitExpressionAtom" ):
                listener.enterBitExpressionAtom(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitExpressionAtom" ):
                listener.exitBitExpressionAtom(self)



    def expressionAtom(self, _p:int=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = MySqlParser.ExpressionAtomContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 672
        self.enterRecursionRule(localctx, 672, self.RULE_expressionAtom, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7151
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1045,self._ctx)
            if la_ == 1:
                localctx = MySqlParser.ConstantExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx

                self.state = 7107
                self.constant()
                pass

            elif la_ == 2:
                localctx = MySqlParser.FullColumnNameExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7108
                self.fullColumnName()
                pass

            elif la_ == 3:
                localctx = MySqlParser.FunctionCallExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7109
                self.functionCall()
                pass

            elif la_ == 4:
                localctx = MySqlParser.MysqlVariableExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7110
                self.mysqlVariable()
                pass

            elif la_ == 5:
                localctx = MySqlParser.UnaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7111
                self.unaryOperator()
                self.state = 7112
                self.expressionAtom(10)
                pass

            elif la_ == 6:
                localctx = MySqlParser.BinaryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7114
                self.match(MySqlParser.BINARY)
                self.state = 7115
                self.expressionAtom(9)
                pass

            elif la_ == 7:
                localctx = MySqlParser.NestedExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7116
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7117
                self.expression(0)
                self.state = 7122
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==1128:
                    self.state = 7118
                    self.match(MySqlParser.COMMA)
                    self.state = 7119
                    self.expression(0)
                    self.state = 7124
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 7125
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 8:
                localctx = MySqlParser.NestedRowExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7127
                self.match(MySqlParser.ROW)
                self.state = 7128
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7129
                self.expression(0)
                self.state = 7132 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 7130
                    self.match(MySqlParser.COMMA)
                    self.state = 7131
                    self.expression(0)
                    self.state = 7134 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==1128):
                        break

                self.state = 7136
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 9:
                localctx = MySqlParser.ExistsExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7138
                self.match(MySqlParser.EXISTS)
                self.state = 7139
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7140
                self.selectStatement()
                self.state = 7141
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 10:
                localctx = MySqlParser.SubqueryExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7143
                self.match(MySqlParser.LR_BRACKET)
                self.state = 7144
                self.selectStatement()
                self.state = 7145
                self.match(MySqlParser.RR_BRACKET)
                pass

            elif la_ == 11:
                localctx = MySqlParser.IntervalExpressionAtomContext(self, localctx)
                self._ctx = localctx
                _prevctx = localctx
                self.state = 7147
                self.match(MySqlParser.INTERVAL)
                self.state = 7148
                self.expression(0)
                self.state = 7149
                self.intervalType()
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 7170
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 7168
                    self._errHandler.sync(self)
                    la_ = self._interp.adaptivePredict(self._input,1046,self._ctx)
                    if la_ == 1:
                        localctx = MySqlParser.BitExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7153
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 7154
                        self.bitOperator()
                        self.state = 7155
                        localctx.right = self.expressionAtom(4)
                        pass

                    elif la_ == 2:
                        localctx = MySqlParser.MathExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7157
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 7158
                        self.mathOperator()
                        self.state = 7159
                        localctx.right = self.expressionAtom(3)
                        pass

                    elif la_ == 3:
                        localctx = MySqlParser.JsonExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        localctx.left = _prevctx
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7161
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 7162
                        self.jsonOperator()
                        self.state = 7163
                        localctx.right = self.expressionAtom(2)
                        pass

                    elif la_ == 4:
                        localctx = MySqlParser.CollateExpressionAtomContext(self, MySqlParser.ExpressionAtomContext(self, _parentctx, _parentState))
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_expressionAtom)
                        self.state = 7165
                        if not self.precpred(self._ctx, 12):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 12)")
                        self.state = 7166
                        self.match(MySqlParser.COLLATE)
                        self.state = 7167
                        self.collationName()
                        pass

             
                self.state = 7172
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,1047,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx


    class UnaryOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def BIT_NOT_OP(self):
            return self.getToken(MySqlParser.BIT_NOT_OP, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def NOT(self):
            return self.getToken(MySqlParser.NOT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_unaryOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterUnaryOperator" ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitUnaryOperator" ):
                listener.exitUnaryOperator(self)




    def unaryOperator(self):

        localctx = MySqlParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 674, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7173
            _la = self._input.LA(1)
            if not(_la==113 or (((_la - 1113)) & ~0x3f) == 0 and ((1 << (_la - 1113)) & 387) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ComparisonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EQUAL_SYMBOL(self):
            return self.getToken(MySqlParser.EQUAL_SYMBOL, 0)

        def GREATER_SYMBOL(self):
            return self.getToken(MySqlParser.GREATER_SYMBOL, 0)

        def LESS_SYMBOL(self):
            return self.getToken(MySqlParser.LESS_SYMBOL, 0)

        def EXCLAMATION_SYMBOL(self):
            return self.getToken(MySqlParser.EXCLAMATION_SYMBOL, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_comparisonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterComparisonOperator" ):
                listener.enterComparisonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitComparisonOperator" ):
                listener.exitComparisonOperator(self)




    def comparisonOperator(self):

        localctx = MySqlParser.ComparisonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 676, self.RULE_comparisonOperator)
        try:
            self.state = 7189
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1048,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7175
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7176
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 7177
                self.match(MySqlParser.LESS_SYMBOL)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 7178
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7179
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 7180
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7181
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 7182
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7183
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 7184
                self.match(MySqlParser.EXCLAMATION_SYMBOL)
                self.state = 7185
                self.match(MySqlParser.EQUAL_SYMBOL)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 7186
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7187
                self.match(MySqlParser.EQUAL_SYMBOL)
                self.state = 7188
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LogicalOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def AND(self):
            return self.getToken(MySqlParser.AND, 0)

        def BIT_AND_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_AND_OP)
            else:
                return self.getToken(MySqlParser.BIT_AND_OP, i)

        def XOR(self):
            return self.getToken(MySqlParser.XOR, 0)

        def OR(self):
            return self.getToken(MySqlParser.OR, 0)

        def BIT_OR_OP(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.BIT_OR_OP)
            else:
                return self.getToken(MySqlParser.BIT_OR_OP, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_logicalOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterLogicalOperator" ):
                listener.enterLogicalOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitLogicalOperator" ):
                listener.exitLogicalOperator(self)




    def logicalOperator(self):

        localctx = MySqlParser.LogicalOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 678, self.RULE_logicalOperator)
        try:
            self.state = 7198
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7191
                self.match(MySqlParser.AND)
                pass
            elif token in [1123]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7192
                self.match(MySqlParser.BIT_AND_OP)
                self.state = 7193
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [192]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7194
                self.match(MySqlParser.XOR)
                pass
            elif token in [122]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7195
                self.match(MySqlParser.OR)
                pass
            elif token in [1122]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7196
                self.match(MySqlParser.BIT_OR_OP)
                self.state = 7197
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BitOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LESS_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.LESS_SYMBOL)
            else:
                return self.getToken(MySqlParser.LESS_SYMBOL, i)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def BIT_AND_OP(self):
            return self.getToken(MySqlParser.BIT_AND_OP, 0)

        def BIT_XOR_OP(self):
            return self.getToken(MySqlParser.BIT_XOR_OP, 0)

        def BIT_OR_OP(self):
            return self.getToken(MySqlParser.BIT_OR_OP, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_bitOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterBitOperator" ):
                listener.enterBitOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitBitOperator" ):
                listener.exitBitOperator(self)




    def bitOperator(self):

        localctx = MySqlParser.BitOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 680, self.RULE_bitOperator)
        try:
            self.state = 7207
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [1119]:
                self.enterOuterAlt(localctx, 1)
                self.state = 7200
                self.match(MySqlParser.LESS_SYMBOL)
                self.state = 7201
                self.match(MySqlParser.LESS_SYMBOL)
                pass
            elif token in [1118]:
                self.enterOuterAlt(localctx, 2)
                self.state = 7202
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7203
                self.match(MySqlParser.GREATER_SYMBOL)
                pass
            elif token in [1123]:
                self.enterOuterAlt(localctx, 3)
                self.state = 7204
                self.match(MySqlParser.BIT_AND_OP)
                pass
            elif token in [1124]:
                self.enterOuterAlt(localctx, 4)
                self.state = 7205
                self.match(MySqlParser.BIT_XOR_OP)
                pass
            elif token in [1122]:
                self.enterOuterAlt(localctx, 5)
                self.state = 7206
                self.match(MySqlParser.BIT_OR_OP)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MathOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def STAR(self):
            return self.getToken(MySqlParser.STAR, 0)

        def DIVIDE(self):
            return self.getToken(MySqlParser.DIVIDE, 0)

        def MODULE(self):
            return self.getToken(MySqlParser.MODULE, 0)

        def DIV(self):
            return self.getToken(MySqlParser.DIV, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def PLUS(self):
            return self.getToken(MySqlParser.PLUS, 0)

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_mathOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterMathOperator" ):
                listener.enterMathOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitMathOperator" ):
                listener.exitMathOperator(self)




    def mathOperator(self):

        localctx = MySqlParser.MathOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 682, self.RULE_mathOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7209
            _la = self._input.LA(1)
            if not((((_la - 1110)) & ~0x3f) == 0 and ((1 << (_la - 1110)) & 127) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JsonOperatorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MINUS(self):
            return self.getToken(MySqlParser.MINUS, 0)

        def GREATER_SYMBOL(self, i:int=None):
            if i is None:
                return self.getTokens(MySqlParser.GREATER_SYMBOL)
            else:
                return self.getToken(MySqlParser.GREATER_SYMBOL, i)

        def getRuleIndex(self):
            return MySqlParser.RULE_jsonOperator

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterJsonOperator" ):
                listener.enterJsonOperator(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitJsonOperator" ):
                listener.exitJsonOperator(self)




    def jsonOperator(self):

        localctx = MySqlParser.JsonOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 684, self.RULE_jsonOperator)
        try:
            self.state = 7216
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1051,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 7211
                self.match(MySqlParser.MINUS)
                self.state = 7212
                self.match(MySqlParser.GREATER_SYMBOL)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 7213
                self.match(MySqlParser.MINUS)
                self.state = 7214
                self.match(MySqlParser.GREATER_SYMBOL)
                self.state = 7215
                self.match(MySqlParser.GREATER_SYMBOL)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CharsetNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ARMSCII8(self):
            return self.getToken(MySqlParser.ARMSCII8, 0)

        def ASCII(self):
            return self.getToken(MySqlParser.ASCII, 0)

        def BIG5(self):
            return self.getToken(MySqlParser.BIG5, 0)

        def BINARY(self):
            return self.getToken(MySqlParser.BINARY, 0)

        def CP1250(self):
            return self.getToken(MySqlParser.CP1250, 0)

        def CP1251(self):
            return self.getToken(MySqlParser.CP1251, 0)

        def CP1256(self):
            return self.getToken(MySqlParser.CP1256, 0)

        def CP1257(self):
            return self.getToken(MySqlParser.CP1257, 0)

        def CP850(self):
            return self.getToken(MySqlParser.CP850, 0)

        def CP852(self):
            return self.getToken(MySqlParser.CP852, 0)

        def CP866(self):
            return self.getToken(MySqlParser.CP866, 0)

        def CP932(self):
            return self.getToken(MySqlParser.CP932, 0)

        def DEC8(self):
            return self.getToken(MySqlParser.DEC8, 0)

        def EUCJPMS(self):
            return self.getToken(MySqlParser.EUCJPMS, 0)

        def EUCKR(self):
            return self.getToken(MySqlParser.EUCKR, 0)

        def GB18030(self):
            return self.getToken(MySqlParser.GB18030, 0)

        def GB2312(self):
            return self.getToken(MySqlParser.GB2312, 0)

        def GBK(self):
            return self.getToken(MySqlParser.GBK, 0)

        def GEOSTD8(self):
            return self.getToken(MySqlParser.GEOSTD8, 0)

        def GREEK(self):
            return self.getToken(MySqlParser.GREEK, 0)

        def HEBREW(self):
            return self.getToken(MySqlParser.HEBREW, 0)

        def HP8(self):
            return self.getToken(MySqlParser.HP8, 0)

        def KEYBCS2(self):
            return self.getToken(MySqlParser.KEYBCS2, 0)

        def KOI8R(self):
            return self.getToken(MySqlParser.KOI8R, 0)

        def KOI8U(self):
            return self.getToken(MySqlParser.KOI8U, 0)

        def LATIN1(self):
            return self.getToken(MySqlParser.LATIN1, 0)

        def LATIN2(self):
            return self.getToken(MySqlParser.LATIN2, 0)

        def LATIN5(self):
            return self.getToken(MySqlParser.LATIN5, 0)

        def LATIN7(self):
            return self.getToken(MySqlParser.LATIN7, 0)

        def MACCE(self):
            return self.getToken(MySqlParser.MACCE, 0)

        def MACROMAN(self):
            return self.getToken(MySqlParser.MACROMAN, 0)

        def SJIS(self):
            return self.getToken(MySqlParser.SJIS, 0)

        def SWE7(self):
            return self.getToken(MySqlParser.SWE7, 0)

        def TIS620(self):
            return self.getToken(MySqlParser.TIS620, 0)

        def UCS2(self):
            return self.getToken(MySqlParser.UCS2, 0)

        def UJIS(self):
            return self.getToken(MySqlParser.UJIS, 0)

        def UTF16(self):
            return self.getToken(MySqlParser.UTF16, 0)

        def UTF16LE(self):
            return self.getToken(MySqlParser.UTF16LE, 0)

        def UTF32(self):
            return self.getToken(MySqlParser.UTF32, 0)

        def UTF8(self):
            return self.getToken(MySqlParser.UTF8, 0)

        def UTF8MB3(self):
            return self.getToken(MySqlParser.UTF8MB3, 0)

        def UTF8MB4(self):
            return self.getToken(MySqlParser.UTF8MB4, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_charsetNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterCharsetNameBase" ):
                listener.enterCharsetNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitCharsetNameBase" ):
                listener.exitCharsetNameBase(self)




    def charsetNameBase(self):

        localctx = MySqlParser.CharsetNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 686, self.RULE_charsetNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7218
            _la = self._input.LA(1)
            if not(_la==224 or (((_la - 741)) & ~0x3f) == 0 and ((1 << (_la - 741)) & 2199023255551) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class TransactionLevelBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def REPEATABLE(self):
            return self.getToken(MySqlParser.REPEATABLE, 0)

        def COMMITTED(self):
            return self.getToken(MySqlParser.COMMITTED, 0)

        def UNCOMMITTED(self):
            return self.getToken(MySqlParser.UNCOMMITTED, 0)

        def SERIALIZABLE(self):
            return self.getToken(MySqlParser.SERIALIZABLE, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_transactionLevelBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterTransactionLevelBase" ):
                listener.enterTransactionLevelBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitTransactionLevelBase" ):
                listener.exitTransactionLevelBase(self)




    def transactionLevelBase(self):

        localctx = MySqlParser.TransactionLevelBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 688, self.RULE_transactionLevelBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7220
            _la = self._input.LA(1)
            if not((((_la - 794)) & ~0x3f) == 0 and ((1 << (_la - 794)) & 15) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PrivilegesBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def TABLES(self):
            return self.getToken(MySqlParser.TABLES, 0)

        def ROUTINE(self):
            return self.getToken(MySqlParser.ROUTINE, 0)

        def EXECUTE(self):
            return self.getToken(MySqlParser.EXECUTE, 0)

        def FILE(self):
            return self.getToken(MySqlParser.FILE, 0)

        def PROCESS(self):
            return self.getToken(MySqlParser.PROCESS, 0)

        def RELOAD(self):
            return self.getToken(MySqlParser.RELOAD, 0)

        def SHUTDOWN(self):
            return self.getToken(MySqlParser.SHUTDOWN, 0)

        def SUPER(self):
            return self.getToken(MySqlParser.SUPER, 0)

        def PRIVILEGES(self):
            return self.getToken(MySqlParser.PRIVILEGES, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_privilegesBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterPrivilegesBase" ):
                listener.enterPrivilegesBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitPrivilegesBase" ):
                listener.exitPrivilegesBase(self)




    def privilegesBase(self):

        localctx = MySqlParser.PrivilegesBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 690, self.RULE_privilegesBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7222
            _la = self._input.LA(1)
            if not((((_la - 704)) & ~0x3f) == 0 and ((1 << (_la - 704)) & 11828396035) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IntervalTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_intervalTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterIntervalTypeBase" ):
                listener.enterIntervalTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitIntervalTypeBase" ):
                listener.exitIntervalTypeBase(self)




    def intervalTypeBase(self):

        localctx = MySqlParser.IntervalTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 692, self.RULE_intervalTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7224
            _la = self._input.LA(1)
            if not((((_la - 687)) & ~0x3f) == 0 and ((1 << (_la - 687)) & 255) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataTypeBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def DATETIME(self):
            return self.getToken(MySqlParser.DATETIME, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def ENUM(self):
            return self.getToken(MySqlParser.ENUM, 0)

        def TEXT(self):
            return self.getToken(MySqlParser.TEXT, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_dataTypeBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterDataTypeBase" ):
                listener.enterDataTypeBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitDataTypeBase" ):
                listener.exitDataTypeBase(self)




    def dataTypeBase(self):

        localctx = MySqlParser.DataTypeBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 694, self.RULE_dataTypeBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7226
            _la = self._input.LA(1)
            if not((((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & 1179679) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class KeywordsCanBeIdContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ACCOUNT(self):
            return self.getToken(MySqlParser.ACCOUNT, 0)

        def ACTION(self):
            return self.getToken(MySqlParser.ACTION, 0)

        def ADMIN(self):
            return self.getToken(MySqlParser.ADMIN, 0)

        def AFTER(self):
            return self.getToken(MySqlParser.AFTER, 0)

        def AGGREGATE(self):
            return self.getToken(MySqlParser.AGGREGATE, 0)

        def ALGORITHM(self):
            return self.getToken(MySqlParser.ALGORITHM, 0)

        def ANY(self):
            return self.getToken(MySqlParser.ANY, 0)

        def AT(self):
            return self.getToken(MySqlParser.AT, 0)

        def AUDIT_ADMIN(self):
            return self.getToken(MySqlParser.AUDIT_ADMIN, 0)

        def AUTHORS(self):
            return self.getToken(MySqlParser.AUTHORS, 0)

        def AUTOCOMMIT(self):
            return self.getToken(MySqlParser.AUTOCOMMIT, 0)

        def AUTOEXTEND_SIZE(self):
            return self.getToken(MySqlParser.AUTOEXTEND_SIZE, 0)

        def AUTO_INCREMENT(self):
            return self.getToken(MySqlParser.AUTO_INCREMENT, 0)

        def AVG(self):
            return self.getToken(MySqlParser.AVG, 0)

        def AVG_ROW_LENGTH(self):
            return self.getToken(MySqlParser.AVG_ROW_LENGTH, 0)

        def ATTRIBUTE(self):
            return self.getToken(MySqlParser.ATTRIBUTE, 0)

        def BACKUP_ADMIN(self):
            return self.getToken(MySqlParser.BACKUP_ADMIN, 0)

        def BEGIN(self):
            return self.getToken(MySqlParser.BEGIN, 0)

        def BINLOG(self):
            return self.getToken(MySqlParser.BINLOG, 0)

        def BINLOG_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ADMIN, 0)

        def BINLOG_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.BINLOG_ENCRYPTION_ADMIN, 0)

        def BIT(self):
            return self.getToken(MySqlParser.BIT, 0)

        def BIT_AND(self):
            return self.getToken(MySqlParser.BIT_AND, 0)

        def BIT_OR(self):
            return self.getToken(MySqlParser.BIT_OR, 0)

        def BIT_XOR(self):
            return self.getToken(MySqlParser.BIT_XOR, 0)

        def BLOCK(self):
            return self.getToken(MySqlParser.BLOCK, 0)

        def BOOL(self):
            return self.getToken(MySqlParser.BOOL, 0)

        def BOOLEAN(self):
            return self.getToken(MySqlParser.BOOLEAN, 0)

        def BTREE(self):
            return self.getToken(MySqlParser.BTREE, 0)

        def BUCKETS(self):
            return self.getToken(MySqlParser.BUCKETS, 0)

        def CACHE(self):
            return self.getToken(MySqlParser.CACHE, 0)

        def CASCADED(self):
            return self.getToken(MySqlParser.CASCADED, 0)

        def CHAIN(self):
            return self.getToken(MySqlParser.CHAIN, 0)

        def CHANGED(self):
            return self.getToken(MySqlParser.CHANGED, 0)

        def CHANNEL(self):
            return self.getToken(MySqlParser.CHANNEL, 0)

        def CHECKSUM(self):
            return self.getToken(MySqlParser.CHECKSUM, 0)

        def PAGE_CHECKSUM(self):
            return self.getToken(MySqlParser.PAGE_CHECKSUM, 0)

        def CATALOG_NAME(self):
            return self.getToken(MySqlParser.CATALOG_NAME, 0)

        def CIPHER(self):
            return self.getToken(MySqlParser.CIPHER, 0)

        def CLASS_ORIGIN(self):
            return self.getToken(MySqlParser.CLASS_ORIGIN, 0)

        def CLIENT(self):
            return self.getToken(MySqlParser.CLIENT, 0)

        def CLONE_ADMIN(self):
            return self.getToken(MySqlParser.CLONE_ADMIN, 0)

        def CLOSE(self):
            return self.getToken(MySqlParser.CLOSE, 0)

        def CLUSTERING(self):
            return self.getToken(MySqlParser.CLUSTERING, 0)

        def COALESCE(self):
            return self.getToken(MySqlParser.COALESCE, 0)

        def CODE(self):
            return self.getToken(MySqlParser.CODE, 0)

        def COLUMNS(self):
            return self.getToken(MySqlParser.COLUMNS, 0)

        def COLUMN_FORMAT(self):
            return self.getToken(MySqlParser.COLUMN_FORMAT, 0)

        def COLUMN_NAME(self):
            return self.getToken(MySqlParser.COLUMN_NAME, 0)

        def COMMENT(self):
            return self.getToken(MySqlParser.COMMENT, 0)

        def COMMIT(self):
            return self.getToken(MySqlParser.COMMIT, 0)

        def COMPACT(self):
            return self.getToken(MySqlParser.COMPACT, 0)

        def COMPLETION(self):
            return self.getToken(MySqlParser.COMPLETION, 0)

        def COMPRESSED(self):
            return self.getToken(MySqlParser.COMPRESSED, 0)

        def COMPRESSION(self):
            return self.getToken(MySqlParser.COMPRESSION, 0)

        def CONCURRENT(self):
            return self.getToken(MySqlParser.CONCURRENT, 0)

        def CONDITION(self):
            return self.getToken(MySqlParser.CONDITION, 0)

        def CONNECT(self):
            return self.getToken(MySqlParser.CONNECT, 0)

        def CONNECTION(self):
            return self.getToken(MySqlParser.CONNECTION, 0)

        def CONNECTION_ADMIN(self):
            return self.getToken(MySqlParser.CONNECTION_ADMIN, 0)

        def CONSISTENT(self):
            return self.getToken(MySqlParser.CONSISTENT, 0)

        def CONSTRAINT_CATALOG(self):
            return self.getToken(MySqlParser.CONSTRAINT_CATALOG, 0)

        def CONSTRAINT_NAME(self):
            return self.getToken(MySqlParser.CONSTRAINT_NAME, 0)

        def CONSTRAINT_SCHEMA(self):
            return self.getToken(MySqlParser.CONSTRAINT_SCHEMA, 0)

        def CONTAINS(self):
            return self.getToken(MySqlParser.CONTAINS, 0)

        def CONTEXT(self):
            return self.getToken(MySqlParser.CONTEXT, 0)

        def CONTRIBUTORS(self):
            return self.getToken(MySqlParser.CONTRIBUTORS, 0)

        def COPY(self):
            return self.getToken(MySqlParser.COPY, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CPU(self):
            return self.getToken(MySqlParser.CPU, 0)

        def CURRENT(self):
            return self.getToken(MySqlParser.CURRENT, 0)

        def CURRENT_USER(self):
            return self.getToken(MySqlParser.CURRENT_USER, 0)

        def CURSOR_NAME(self):
            return self.getToken(MySqlParser.CURSOR_NAME, 0)

        def DATA(self):
            return self.getToken(MySqlParser.DATA, 0)

        def DATAFILE(self):
            return self.getToken(MySqlParser.DATAFILE, 0)

        def DEALLOCATE(self):
            return self.getToken(MySqlParser.DEALLOCATE, 0)

        def DEFAULT(self):
            return self.getToken(MySqlParser.DEFAULT, 0)

        def DEFAULT_AUTH(self):
            return self.getToken(MySqlParser.DEFAULT_AUTH, 0)

        def DEFINER(self):
            return self.getToken(MySqlParser.DEFINER, 0)

        def DELAY_KEY_WRITE(self):
            return self.getToken(MySqlParser.DELAY_KEY_WRITE, 0)

        def DES_KEY_FILE(self):
            return self.getToken(MySqlParser.DES_KEY_FILE, 0)

        def DIAGNOSTICS(self):
            return self.getToken(MySqlParser.DIAGNOSTICS, 0)

        def DIRECTORY(self):
            return self.getToken(MySqlParser.DIRECTORY, 0)

        def DISABLE(self):
            return self.getToken(MySqlParser.DISABLE, 0)

        def DISCARD(self):
            return self.getToken(MySqlParser.DISCARD, 0)

        def DISK(self):
            return self.getToken(MySqlParser.DISK, 0)

        def DO(self):
            return self.getToken(MySqlParser.DO, 0)

        def DUMPFILE(self):
            return self.getToken(MySqlParser.DUMPFILE, 0)

        def DUPLICATE(self):
            return self.getToken(MySqlParser.DUPLICATE, 0)

        def DYNAMIC(self):
            return self.getToken(MySqlParser.DYNAMIC, 0)

        def EMPTY(self):
            return self.getToken(MySqlParser.EMPTY, 0)

        def ENABLE(self):
            return self.getToken(MySqlParser.ENABLE, 0)

        def ENCRYPTION(self):
            return self.getToken(MySqlParser.ENCRYPTION, 0)

        def ENCRYPTION_KEY_ADMIN(self):
            return self.getToken(MySqlParser.ENCRYPTION_KEY_ADMIN, 0)

        def END(self):
            return self.getToken(MySqlParser.END, 0)

        def ENDS(self):
            return self.getToken(MySqlParser.ENDS, 0)

        def ENGINE(self):
            return self.getToken(MySqlParser.ENGINE, 0)

        def ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.ENGINE_ATTRIBUTE, 0)

        def ENGINES(self):
            return self.getToken(MySqlParser.ENGINES, 0)

        def ERROR(self):
            return self.getToken(MySqlParser.ERROR, 0)

        def ERRORS(self):
            return self.getToken(MySqlParser.ERRORS, 0)

        def ESCAPE(self):
            return self.getToken(MySqlParser.ESCAPE, 0)

        def EUR(self):
            return self.getToken(MySqlParser.EUR, 0)

        def EVEN(self):
            return self.getToken(MySqlParser.EVEN, 0)

        def EVENT(self):
            return self.getToken(MySqlParser.EVENT, 0)

        def EVENTS(self):
            return self.getToken(MySqlParser.EVENTS, 0)

        def EVERY(self):
            return self.getToken(MySqlParser.EVERY, 0)

        def EXCEPT(self):
            return self.getToken(MySqlParser.EXCEPT, 0)

        def EXCHANGE(self):
            return self.getToken(MySqlParser.EXCHANGE, 0)

        def EXCLUSIVE(self):
            return self.getToken(MySqlParser.EXCLUSIVE, 0)

        def EXPIRE(self):
            return self.getToken(MySqlParser.EXPIRE, 0)

        def EXPORT(self):
            return self.getToken(MySqlParser.EXPORT, 0)

        def EXTENDED(self):
            return self.getToken(MySqlParser.EXTENDED, 0)

        def EXTENT_SIZE(self):
            return self.getToken(MySqlParser.EXTENT_SIZE, 0)

        def FAILED_LOGIN_ATTEMPTS(self):
            return self.getToken(MySqlParser.FAILED_LOGIN_ATTEMPTS, 0)

        def FAST(self):
            return self.getToken(MySqlParser.FAST, 0)

        def FAULTS(self):
            return self.getToken(MySqlParser.FAULTS, 0)

        def FIELDS(self):
            return self.getToken(MySqlParser.FIELDS, 0)

        def FILE_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.FILE_BLOCK_SIZE, 0)

        def FILTER(self):
            return self.getToken(MySqlParser.FILTER, 0)

        def FIREWALL_ADMIN(self):
            return self.getToken(MySqlParser.FIREWALL_ADMIN, 0)

        def FIREWALL_USER(self):
            return self.getToken(MySqlParser.FIREWALL_USER, 0)

        def FIRST(self):
            return self.getToken(MySqlParser.FIRST, 0)

        def FIXED(self):
            return self.getToken(MySqlParser.FIXED, 0)

        def FLUSH(self):
            return self.getToken(MySqlParser.FLUSH, 0)

        def FOLLOWS(self):
            return self.getToken(MySqlParser.FOLLOWS, 0)

        def FOUND(self):
            return self.getToken(MySqlParser.FOUND, 0)

        def FULL(self):
            return self.getToken(MySqlParser.FULL, 0)

        def FUNCTION(self):
            return self.getToken(MySqlParser.FUNCTION, 0)

        def GENERAL(self):
            return self.getToken(MySqlParser.GENERAL, 0)

        def GLOBAL(self):
            return self.getToken(MySqlParser.GLOBAL, 0)

        def GRANTS(self):
            return self.getToken(MySqlParser.GRANTS, 0)

        def GROUP(self):
            return self.getToken(MySqlParser.GROUP, 0)

        def GROUP_CONCAT(self):
            return self.getToken(MySqlParser.GROUP_CONCAT, 0)

        def GROUP_REPLICATION(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION, 0)

        def GROUP_REPLICATION_ADMIN(self):
            return self.getToken(MySqlParser.GROUP_REPLICATION_ADMIN, 0)

        def HANDLER(self):
            return self.getToken(MySqlParser.HANDLER, 0)

        def HASH(self):
            return self.getToken(MySqlParser.HASH, 0)

        def HELP(self):
            return self.getToken(MySqlParser.HELP, 0)

        def HISTORY(self):
            return self.getToken(MySqlParser.HISTORY, 0)

        def HOST(self):
            return self.getToken(MySqlParser.HOST, 0)

        def HOSTS(self):
            return self.getToken(MySqlParser.HOSTS, 0)

        def IDENTIFIED(self):
            return self.getToken(MySqlParser.IDENTIFIED, 0)

        def IGNORED(self):
            return self.getToken(MySqlParser.IGNORED, 0)

        def IGNORE_SERVER_IDS(self):
            return self.getToken(MySqlParser.IGNORE_SERVER_IDS, 0)

        def IMPORT(self):
            return self.getToken(MySqlParser.IMPORT, 0)

        def INDEXES(self):
            return self.getToken(MySqlParser.INDEXES, 0)

        def INITIAL_SIZE(self):
            return self.getToken(MySqlParser.INITIAL_SIZE, 0)

        def INNODB_REDO_LOG_ARCHIVE(self):
            return self.getToken(MySqlParser.INNODB_REDO_LOG_ARCHIVE, 0)

        def INPLACE(self):
            return self.getToken(MySqlParser.INPLACE, 0)

        def INSERT_METHOD(self):
            return self.getToken(MySqlParser.INSERT_METHOD, 0)

        def INSTALL(self):
            return self.getToken(MySqlParser.INSTALL, 0)

        def INSTANCE(self):
            return self.getToken(MySqlParser.INSTANCE, 0)

        def INSTANT(self):
            return self.getToken(MySqlParser.INSTANT, 0)

        def INTERNAL(self):
            return self.getToken(MySqlParser.INTERNAL, 0)

        def INVOKE(self):
            return self.getToken(MySqlParser.INVOKE, 0)

        def INVOKER(self):
            return self.getToken(MySqlParser.INVOKER, 0)

        def IO(self):
            return self.getToken(MySqlParser.IO, 0)

        def IO_THREAD(self):
            return self.getToken(MySqlParser.IO_THREAD, 0)

        def IPC(self):
            return self.getToken(MySqlParser.IPC, 0)

        def ISO(self):
            return self.getToken(MySqlParser.ISO, 0)

        def ISOLATION(self):
            return self.getToken(MySqlParser.ISOLATION, 0)

        def ISSUER(self):
            return self.getToken(MySqlParser.ISSUER, 0)

        def JIS(self):
            return self.getToken(MySqlParser.JIS, 0)

        def JSON(self):
            return self.getToken(MySqlParser.JSON, 0)

        def KEY_BLOCK_SIZE(self):
            return self.getToken(MySqlParser.KEY_BLOCK_SIZE, 0)

        def LAMBDA(self):
            return self.getToken(MySqlParser.LAMBDA, 0)

        def LANGUAGE(self):
            return self.getToken(MySqlParser.LANGUAGE, 0)

        def LAST(self):
            return self.getToken(MySqlParser.LAST, 0)

        def LATERAL(self):
            return self.getToken(MySqlParser.LATERAL, 0)

        def LEAVES(self):
            return self.getToken(MySqlParser.LEAVES, 0)

        def LESS(self):
            return self.getToken(MySqlParser.LESS, 0)

        def LEVEL(self):
            return self.getToken(MySqlParser.LEVEL, 0)

        def LIST(self):
            return self.getToken(MySqlParser.LIST, 0)

        def LOCAL(self):
            return self.getToken(MySqlParser.LOCAL, 0)

        def LOGFILE(self):
            return self.getToken(MySqlParser.LOGFILE, 0)

        def LOGS(self):
            return self.getToken(MySqlParser.LOGS, 0)

        def MASTER(self):
            return self.getToken(MySqlParser.MASTER, 0)

        def MASTER_AUTO_POSITION(self):
            return self.getToken(MySqlParser.MASTER_AUTO_POSITION, 0)

        def MASTER_CONNECT_RETRY(self):
            return self.getToken(MySqlParser.MASTER_CONNECT_RETRY, 0)

        def MASTER_DELAY(self):
            return self.getToken(MySqlParser.MASTER_DELAY, 0)

        def MASTER_HEARTBEAT_PERIOD(self):
            return self.getToken(MySqlParser.MASTER_HEARTBEAT_PERIOD, 0)

        def MASTER_HOST(self):
            return self.getToken(MySqlParser.MASTER_HOST, 0)

        def MASTER_LOG_FILE(self):
            return self.getToken(MySqlParser.MASTER_LOG_FILE, 0)

        def MASTER_LOG_POS(self):
            return self.getToken(MySqlParser.MASTER_LOG_POS, 0)

        def MASTER_PASSWORD(self):
            return self.getToken(MySqlParser.MASTER_PASSWORD, 0)

        def MASTER_PORT(self):
            return self.getToken(MySqlParser.MASTER_PORT, 0)

        def MASTER_RETRY_COUNT(self):
            return self.getToken(MySqlParser.MASTER_RETRY_COUNT, 0)

        def MASTER_SSL(self):
            return self.getToken(MySqlParser.MASTER_SSL, 0)

        def MASTER_SSL_CA(self):
            return self.getToken(MySqlParser.MASTER_SSL_CA, 0)

        def MASTER_SSL_CAPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CAPATH, 0)

        def MASTER_SSL_CERT(self):
            return self.getToken(MySqlParser.MASTER_SSL_CERT, 0)

        def MASTER_SSL_CIPHER(self):
            return self.getToken(MySqlParser.MASTER_SSL_CIPHER, 0)

        def MASTER_SSL_CRL(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRL, 0)

        def MASTER_SSL_CRLPATH(self):
            return self.getToken(MySqlParser.MASTER_SSL_CRLPATH, 0)

        def MASTER_SSL_KEY(self):
            return self.getToken(MySqlParser.MASTER_SSL_KEY, 0)

        def MASTER_TLS_VERSION(self):
            return self.getToken(MySqlParser.MASTER_TLS_VERSION, 0)

        def MASTER_USER(self):
            return self.getToken(MySqlParser.MASTER_USER, 0)

        def MAX_CONNECTIONS_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_CONNECTIONS_PER_HOUR, 0)

        def MAX_QUERIES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_QUERIES_PER_HOUR, 0)

        def MAX(self):
            return self.getToken(MySqlParser.MAX, 0)

        def MAX_ROWS(self):
            return self.getToken(MySqlParser.MAX_ROWS, 0)

        def MAX_SIZE(self):
            return self.getToken(MySqlParser.MAX_SIZE, 0)

        def MAX_UPDATES_PER_HOUR(self):
            return self.getToken(MySqlParser.MAX_UPDATES_PER_HOUR, 0)

        def MAX_USER_CONNECTIONS(self):
            return self.getToken(MySqlParser.MAX_USER_CONNECTIONS, 0)

        def MEDIUM(self):
            return self.getToken(MySqlParser.MEDIUM, 0)

        def MEMBER(self):
            return self.getToken(MySqlParser.MEMBER, 0)

        def MEMORY(self):
            return self.getToken(MySqlParser.MEMORY, 0)

        def MERGE(self):
            return self.getToken(MySqlParser.MERGE, 0)

        def MESSAGE_TEXT(self):
            return self.getToken(MySqlParser.MESSAGE_TEXT, 0)

        def MID(self):
            return self.getToken(MySqlParser.MID, 0)

        def MIGRATE(self):
            return self.getToken(MySqlParser.MIGRATE, 0)

        def MIN(self):
            return self.getToken(MySqlParser.MIN, 0)

        def MIN_ROWS(self):
            return self.getToken(MySqlParser.MIN_ROWS, 0)

        def MODE(self):
            return self.getToken(MySqlParser.MODE, 0)

        def MODIFY(self):
            return self.getToken(MySqlParser.MODIFY, 0)

        def MUTEX(self):
            return self.getToken(MySqlParser.MUTEX, 0)

        def MYSQL(self):
            return self.getToken(MySqlParser.MYSQL, 0)

        def MYSQL_ERRNO(self):
            return self.getToken(MySqlParser.MYSQL_ERRNO, 0)

        def NAME(self):
            return self.getToken(MySqlParser.NAME, 0)

        def NAMES(self):
            return self.getToken(MySqlParser.NAMES, 0)

        def NCHAR(self):
            return self.getToken(MySqlParser.NCHAR, 0)

        def NDB_STORED_USER(self):
            return self.getToken(MySqlParser.NDB_STORED_USER, 0)

        def NESTED(self):
            return self.getToken(MySqlParser.NESTED, 0)

        def NEVER(self):
            return self.getToken(MySqlParser.NEVER, 0)

        def NEXT(self):
            return self.getToken(MySqlParser.NEXT, 0)

        def NO(self):
            return self.getToken(MySqlParser.NO, 0)

        def NOCOPY(self):
            return self.getToken(MySqlParser.NOCOPY, 0)

        def NODEGROUP(self):
            return self.getToken(MySqlParser.NODEGROUP, 0)

        def NONE(self):
            return self.getToken(MySqlParser.NONE, 0)

        def NOWAIT(self):
            return self.getToken(MySqlParser.NOWAIT, 0)

        def NUMBER(self):
            return self.getToken(MySqlParser.NUMBER, 0)

        def ODBC(self):
            return self.getToken(MySqlParser.ODBC, 0)

        def OFFLINE(self):
            return self.getToken(MySqlParser.OFFLINE, 0)

        def OFFSET(self):
            return self.getToken(MySqlParser.OFFSET, 0)

        def OF(self):
            return self.getToken(MySqlParser.OF, 0)

        def OJ(self):
            return self.getToken(MySqlParser.OJ, 0)

        def OLD_PASSWORD(self):
            return self.getToken(MySqlParser.OLD_PASSWORD, 0)

        def ONE(self):
            return self.getToken(MySqlParser.ONE, 0)

        def ONLINE(self):
            return self.getToken(MySqlParser.ONLINE, 0)

        def ONLY(self):
            return self.getToken(MySqlParser.ONLY, 0)

        def OPEN(self):
            return self.getToken(MySqlParser.OPEN, 0)

        def OPTIMIZER_COSTS(self):
            return self.getToken(MySqlParser.OPTIMIZER_COSTS, 0)

        def OPTIONAL(self):
            return self.getToken(MySqlParser.OPTIONAL, 0)

        def OPTIONS(self):
            return self.getToken(MySqlParser.OPTIONS, 0)

        def ORDER(self):
            return self.getToken(MySqlParser.ORDER, 0)

        def ORDINALITY(self):
            return self.getToken(MySqlParser.ORDINALITY, 0)

        def OWNER(self):
            return self.getToken(MySqlParser.OWNER, 0)

        def PACK_KEYS(self):
            return self.getToken(MySqlParser.PACK_KEYS, 0)

        def PAGE(self):
            return self.getToken(MySqlParser.PAGE, 0)

        def PARSER(self):
            return self.getToken(MySqlParser.PARSER, 0)

        def PARTIAL(self):
            return self.getToken(MySqlParser.PARTIAL, 0)

        def PARTITIONING(self):
            return self.getToken(MySqlParser.PARTITIONING, 0)

        def PARTITIONS(self):
            return self.getToken(MySqlParser.PARTITIONS, 0)

        def PASSWORD(self):
            return self.getToken(MySqlParser.PASSWORD, 0)

        def PASSWORDLESS_USER_ADMIN(self):
            return self.getToken(MySqlParser.PASSWORDLESS_USER_ADMIN, 0)

        def PASSWORD_LOCK_TIME(self):
            return self.getToken(MySqlParser.PASSWORD_LOCK_TIME, 0)

        def PATH(self):
            return self.getToken(MySqlParser.PATH, 0)

        def PERSIST_RO_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.PERSIST_RO_VARIABLES_ADMIN, 0)

        def PHASE(self):
            return self.getToken(MySqlParser.PHASE, 0)

        def PLUGINS(self):
            return self.getToken(MySqlParser.PLUGINS, 0)

        def PLUGIN_DIR(self):
            return self.getToken(MySqlParser.PLUGIN_DIR, 0)

        def PLUGIN(self):
            return self.getToken(MySqlParser.PLUGIN, 0)

        def PORT(self):
            return self.getToken(MySqlParser.PORT, 0)

        def PRECEDES(self):
            return self.getToken(MySqlParser.PRECEDES, 0)

        def PREPARE(self):
            return self.getToken(MySqlParser.PREPARE, 0)

        def PRESERVE(self):
            return self.getToken(MySqlParser.PRESERVE, 0)

        def PREV(self):
            return self.getToken(MySqlParser.PREV, 0)

        def PRIMARY(self):
            return self.getToken(MySqlParser.PRIMARY, 0)

        def PROCESSLIST(self):
            return self.getToken(MySqlParser.PROCESSLIST, 0)

        def PROFILE(self):
            return self.getToken(MySqlParser.PROFILE, 0)

        def PROFILES(self):
            return self.getToken(MySqlParser.PROFILES, 0)

        def PROXY(self):
            return self.getToken(MySqlParser.PROXY, 0)

        def QUERY(self):
            return self.getToken(MySqlParser.QUERY, 0)

        def QUICK(self):
            return self.getToken(MySqlParser.QUICK, 0)

        def REBUILD(self):
            return self.getToken(MySqlParser.REBUILD, 0)

        def RECOVER(self):
            return self.getToken(MySqlParser.RECOVER, 0)

        def RECURSIVE(self):
            return self.getToken(MySqlParser.RECURSIVE, 0)

        def REDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.REDO_BUFFER_SIZE, 0)

        def REDUNDANT(self):
            return self.getToken(MySqlParser.REDUNDANT, 0)

        def RELAY(self):
            return self.getToken(MySqlParser.RELAY, 0)

        def RELAYLOG(self):
            return self.getToken(MySqlParser.RELAYLOG, 0)

        def RELAY_LOG_FILE(self):
            return self.getToken(MySqlParser.RELAY_LOG_FILE, 0)

        def RELAY_LOG_POS(self):
            return self.getToken(MySqlParser.RELAY_LOG_POS, 0)

        def REMOVE(self):
            return self.getToken(MySqlParser.REMOVE, 0)

        def REORGANIZE(self):
            return self.getToken(MySqlParser.REORGANIZE, 0)

        def REPAIR(self):
            return self.getToken(MySqlParser.REPAIR, 0)

        def REPLICATE_DO_DB(self):
            return self.getToken(MySqlParser.REPLICATE_DO_DB, 0)

        def REPLICATE_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_DO_TABLE, 0)

        def REPLICATE_IGNORE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_DB, 0)

        def REPLICATE_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_IGNORE_TABLE, 0)

        def REPLICATE_REWRITE_DB(self):
            return self.getToken(MySqlParser.REPLICATE_REWRITE_DB, 0)

        def REPLICATE_WILD_DO_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_DO_TABLE, 0)

        def REPLICATE_WILD_IGNORE_TABLE(self):
            return self.getToken(MySqlParser.REPLICATE_WILD_IGNORE_TABLE, 0)

        def REPLICATION(self):
            return self.getToken(MySqlParser.REPLICATION, 0)

        def REPLICATION_APPLIER(self):
            return self.getToken(MySqlParser.REPLICATION_APPLIER, 0)

        def REPLICATION_SLAVE_ADMIN(self):
            return self.getToken(MySqlParser.REPLICATION_SLAVE_ADMIN, 0)

        def RESET(self):
            return self.getToken(MySqlParser.RESET, 0)

        def RESOURCE_GROUP_ADMIN(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_ADMIN, 0)

        def RESOURCE_GROUP_USER(self):
            return self.getToken(MySqlParser.RESOURCE_GROUP_USER, 0)

        def RESUME(self):
            return self.getToken(MySqlParser.RESUME, 0)

        def RETURNED_SQLSTATE(self):
            return self.getToken(MySqlParser.RETURNED_SQLSTATE, 0)

        def RETURNS(self):
            return self.getToken(MySqlParser.RETURNS, 0)

        def REUSE(self):
            return self.getToken(MySqlParser.REUSE, 0)

        def ROLE(self):
            return self.getToken(MySqlParser.ROLE, 0)

        def ROLE_ADMIN(self):
            return self.getToken(MySqlParser.ROLE_ADMIN, 0)

        def ROLLBACK(self):
            return self.getToken(MySqlParser.ROLLBACK, 0)

        def ROLLUP(self):
            return self.getToken(MySqlParser.ROLLUP, 0)

        def ROTATE(self):
            return self.getToken(MySqlParser.ROTATE, 0)

        def ROW(self):
            return self.getToken(MySqlParser.ROW, 0)

        def ROWS(self):
            return self.getToken(MySqlParser.ROWS, 0)

        def ROW_FORMAT(self):
            return self.getToken(MySqlParser.ROW_FORMAT, 0)

        def RTREE(self):
            return self.getToken(MySqlParser.RTREE, 0)

        def S3(self):
            return self.getToken(MySqlParser.S3, 0)

        def SAVEPOINT(self):
            return self.getToken(MySqlParser.SAVEPOINT, 0)

        def SCHEDULE(self):
            return self.getToken(MySqlParser.SCHEDULE, 0)

        def SCHEMA_NAME(self):
            return self.getToken(MySqlParser.SCHEMA_NAME, 0)

        def SECURITY(self):
            return self.getToken(MySqlParser.SECURITY, 0)

        def SECONDARY_ENGINE_ATTRIBUTE(self):
            return self.getToken(MySqlParser.SECONDARY_ENGINE_ATTRIBUTE, 0)

        def SERIAL(self):
            return self.getToken(MySqlParser.SERIAL, 0)

        def SERVER(self):
            return self.getToken(MySqlParser.SERVER, 0)

        def SESSION(self):
            return self.getToken(MySqlParser.SESSION, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SET_USER_ID(self):
            return self.getToken(MySqlParser.SET_USER_ID, 0)

        def SHARE(self):
            return self.getToken(MySqlParser.SHARE, 0)

        def SHARED(self):
            return self.getToken(MySqlParser.SHARED, 0)

        def SHOW_ROUTINE(self):
            return self.getToken(MySqlParser.SHOW_ROUTINE, 0)

        def SIGNED(self):
            return self.getToken(MySqlParser.SIGNED, 0)

        def SIMPLE(self):
            return self.getToken(MySqlParser.SIMPLE, 0)

        def SLAVE(self):
            return self.getToken(MySqlParser.SLAVE, 0)

        def SLOW(self):
            return self.getToken(MySqlParser.SLOW, 0)

        def SNAPSHOT(self):
            return self.getToken(MySqlParser.SNAPSHOT, 0)

        def SOCKET(self):
            return self.getToken(MySqlParser.SOCKET, 0)

        def SOME(self):
            return self.getToken(MySqlParser.SOME, 0)

        def SONAME(self):
            return self.getToken(MySqlParser.SONAME, 0)

        def SOUNDS(self):
            return self.getToken(MySqlParser.SOUNDS, 0)

        def SOURCE(self):
            return self.getToken(MySqlParser.SOURCE, 0)

        def SQL_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_AFTER_GTIDS, 0)

        def SQL_AFTER_MTS_GAPS(self):
            return self.getToken(MySqlParser.SQL_AFTER_MTS_GAPS, 0)

        def SQL_BEFORE_GTIDS(self):
            return self.getToken(MySqlParser.SQL_BEFORE_GTIDS, 0)

        def SQL_BUFFER_RESULT(self):
            return self.getToken(MySqlParser.SQL_BUFFER_RESULT, 0)

        def SQL_CACHE(self):
            return self.getToken(MySqlParser.SQL_CACHE, 0)

        def SQL_NO_CACHE(self):
            return self.getToken(MySqlParser.SQL_NO_CACHE, 0)

        def SQL_THREAD(self):
            return self.getToken(MySqlParser.SQL_THREAD, 0)

        def STACKED(self):
            return self.getToken(MySqlParser.STACKED, 0)

        def START(self):
            return self.getToken(MySqlParser.START, 0)

        def STARTS(self):
            return self.getToken(MySqlParser.STARTS, 0)

        def STATS_AUTO_RECALC(self):
            return self.getToken(MySqlParser.STATS_AUTO_RECALC, 0)

        def STATS_PERSISTENT(self):
            return self.getToken(MySqlParser.STATS_PERSISTENT, 0)

        def STATS_SAMPLE_PAGES(self):
            return self.getToken(MySqlParser.STATS_SAMPLE_PAGES, 0)

        def STATUS(self):
            return self.getToken(MySqlParser.STATUS, 0)

        def STD(self):
            return self.getToken(MySqlParser.STD, 0)

        def STDDEV(self):
            return self.getToken(MySqlParser.STDDEV, 0)

        def STDDEV_POP(self):
            return self.getToken(MySqlParser.STDDEV_POP, 0)

        def STDDEV_SAMP(self):
            return self.getToken(MySqlParser.STDDEV_SAMP, 0)

        def STOP(self):
            return self.getToken(MySqlParser.STOP, 0)

        def STORAGE(self):
            return self.getToken(MySqlParser.STORAGE, 0)

        def STRING(self):
            return self.getToken(MySqlParser.STRING, 0)

        def SUBCLASS_ORIGIN(self):
            return self.getToken(MySqlParser.SUBCLASS_ORIGIN, 0)

        def SUBJECT(self):
            return self.getToken(MySqlParser.SUBJECT, 0)

        def SUBPARTITION(self):
            return self.getToken(MySqlParser.SUBPARTITION, 0)

        def SUBPARTITIONS(self):
            return self.getToken(MySqlParser.SUBPARTITIONS, 0)

        def SUM(self):
            return self.getToken(MySqlParser.SUM, 0)

        def SUSPEND(self):
            return self.getToken(MySqlParser.SUSPEND, 0)

        def SWAPS(self):
            return self.getToken(MySqlParser.SWAPS, 0)

        def SWITCHES(self):
            return self.getToken(MySqlParser.SWITCHES, 0)

        def SYSTEM_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SYSTEM_VARIABLES_ADMIN, 0)

        def TABLE_NAME(self):
            return self.getToken(MySqlParser.TABLE_NAME, 0)

        def TABLESPACE(self):
            return self.getToken(MySqlParser.TABLESPACE, 0)

        def TABLE_ENCRYPTION_ADMIN(self):
            return self.getToken(MySqlParser.TABLE_ENCRYPTION_ADMIN, 0)

        def TABLE_TYPE(self):
            return self.getToken(MySqlParser.TABLE_TYPE, 0)

        def TEMPORARY(self):
            return self.getToken(MySqlParser.TEMPORARY, 0)

        def TEMPTABLE(self):
            return self.getToken(MySqlParser.TEMPTABLE, 0)

        def THAN(self):
            return self.getToken(MySqlParser.THAN, 0)

        def TRADITIONAL(self):
            return self.getToken(MySqlParser.TRADITIONAL, 0)

        def TRANSACTION(self):
            return self.getToken(MySqlParser.TRANSACTION, 0)

        def TRANSACTIONAL(self):
            return self.getToken(MySqlParser.TRANSACTIONAL, 0)

        def TRIGGERS(self):
            return self.getToken(MySqlParser.TRIGGERS, 0)

        def TRUNCATE(self):
            return self.getToken(MySqlParser.TRUNCATE, 0)

        def UNBOUNDED(self):
            return self.getToken(MySqlParser.UNBOUNDED, 0)

        def UNDEFINED(self):
            return self.getToken(MySqlParser.UNDEFINED, 0)

        def UNDOFILE(self):
            return self.getToken(MySqlParser.UNDOFILE, 0)

        def UNDO_BUFFER_SIZE(self):
            return self.getToken(MySqlParser.UNDO_BUFFER_SIZE, 0)

        def UNINSTALL(self):
            return self.getToken(MySqlParser.UNINSTALL, 0)

        def UNKNOWN(self):
            return self.getToken(MySqlParser.UNKNOWN, 0)

        def UNTIL(self):
            return self.getToken(MySqlParser.UNTIL, 0)

        def UPGRADE(self):
            return self.getToken(MySqlParser.UPGRADE, 0)

        def USA(self):
            return self.getToken(MySqlParser.USA, 0)

        def USER(self):
            return self.getToken(MySqlParser.USER, 0)

        def USE_FRM(self):
            return self.getToken(MySqlParser.USE_FRM, 0)

        def USER_RESOURCES(self):
            return self.getToken(MySqlParser.USER_RESOURCES, 0)

        def VALIDATION(self):
            return self.getToken(MySqlParser.VALIDATION, 0)

        def VALUE(self):
            return self.getToken(MySqlParser.VALUE, 0)

        def VAR_POP(self):
            return self.getToken(MySqlParser.VAR_POP, 0)

        def VAR_SAMP(self):
            return self.getToken(MySqlParser.VAR_SAMP, 0)

        def VARIABLES(self):
            return self.getToken(MySqlParser.VARIABLES, 0)

        def VARIANCE(self):
            return self.getToken(MySqlParser.VARIANCE, 0)

        def VERSION_TOKEN_ADMIN(self):
            return self.getToken(MySqlParser.VERSION_TOKEN_ADMIN, 0)

        def VIEW(self):
            return self.getToken(MySqlParser.VIEW, 0)

        def VIRTUAL(self):
            return self.getToken(MySqlParser.VIRTUAL, 0)

        def WAIT(self):
            return self.getToken(MySqlParser.WAIT, 0)

        def WARNINGS(self):
            return self.getToken(MySqlParser.WARNINGS, 0)

        def WITHOUT(self):
            return self.getToken(MySqlParser.WITHOUT, 0)

        def WORK(self):
            return self.getToken(MySqlParser.WORK, 0)

        def WRAPPER(self):
            return self.getToken(MySqlParser.WRAPPER, 0)

        def X509(self):
            return self.getToken(MySqlParser.X509, 0)

        def XA(self):
            return self.getToken(MySqlParser.XA, 0)

        def XA_RECOVER_ADMIN(self):
            return self.getToken(MySqlParser.XA_RECOVER_ADMIN, 0)

        def XML(self):
            return self.getToken(MySqlParser.XML, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_keywordsCanBeId

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterKeywordsCanBeId" ):
                listener.enterKeywordsCanBeId(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitKeywordsCanBeId" ):
                listener.exitKeywordsCanBeId(self)




    def keywordsCanBeId(self):

        localctx = MySqlParser.KeywordsCanBeIdContext(self, self._ctx, self.state)
        self.enterRule(localctx, 696, self.RULE_keywordsCanBeId)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7228
            _la = self._input.LA(1)
            if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 324545218529738752) != 0 or (((_la - 72)) & ~0x3f) == 0 and ((1 << (_la - 72)) & 146666055054393409) != 0 or _la==166 or (((_la - 237)) & ~0x3f) == 0 and ((1 << (_la - 237)) & 1769897061370560513) != 0 or (((_la - 303)) & ~0x3f) == 0 and ((1 << (_la - 303)) & -134217473) != 0 or (((_la - 367)) & ~0x3f) == 0 and ((1 << (_la - 367)) & -171798822913) != 0 or (((_la - 432)) & ~0x3f) == 0 and ((1 << (_la - 432)) & -33685505) != 0 or (((_la - 496)) & ~0x3f) == 0 and ((1 << (_la - 496)) & -2306265222165299201) != 0 or (((_la - 560)) & ~0x3f) == 0 and ((1 << (_la - 560)) & -35186788007937) != 0 or (((_la - 624)) & ~0x3f) == 0 and ((1 << (_la - 624)) & 9077990211383719935) != 0 or (((_la - 695)) & ~0x3f) == 0 and ((1 << (_la - 695)) & 64278245022205) != 0 or _la==787 or _la==831 or _la==870 or _la==994 or _la==999):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class FunctionNameBaseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ABS(self):
            return self.getToken(MySqlParser.ABS, 0)

        def ACOS(self):
            return self.getToken(MySqlParser.ACOS, 0)

        def ADDDATE(self):
            return self.getToken(MySqlParser.ADDDATE, 0)

        def ADDTIME(self):
            return self.getToken(MySqlParser.ADDTIME, 0)

        def AES_DECRYPT(self):
            return self.getToken(MySqlParser.AES_DECRYPT, 0)

        def AES_ENCRYPT(self):
            return self.getToken(MySqlParser.AES_ENCRYPT, 0)

        def AREA(self):
            return self.getToken(MySqlParser.AREA, 0)

        def ASBINARY(self):
            return self.getToken(MySqlParser.ASBINARY, 0)

        def ASIN(self):
            return self.getToken(MySqlParser.ASIN, 0)

        def ASTEXT(self):
            return self.getToken(MySqlParser.ASTEXT, 0)

        def ASWKB(self):
            return self.getToken(MySqlParser.ASWKB, 0)

        def ASWKT(self):
            return self.getToken(MySqlParser.ASWKT, 0)

        def ASYMMETRIC_DECRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DECRYPT, 0)

        def ASYMMETRIC_DERIVE(self):
            return self.getToken(MySqlParser.ASYMMETRIC_DERIVE, 0)

        def ASYMMETRIC_ENCRYPT(self):
            return self.getToken(MySqlParser.ASYMMETRIC_ENCRYPT, 0)

        def ASYMMETRIC_SIGN(self):
            return self.getToken(MySqlParser.ASYMMETRIC_SIGN, 0)

        def ASYMMETRIC_VERIFY(self):
            return self.getToken(MySqlParser.ASYMMETRIC_VERIFY, 0)

        def ATAN(self):
            return self.getToken(MySqlParser.ATAN, 0)

        def ATAN2(self):
            return self.getToken(MySqlParser.ATAN2, 0)

        def BENCHMARK(self):
            return self.getToken(MySqlParser.BENCHMARK, 0)

        def BIN(self):
            return self.getToken(MySqlParser.BIN, 0)

        def BIT_COUNT(self):
            return self.getToken(MySqlParser.BIT_COUNT, 0)

        def BIT_LENGTH(self):
            return self.getToken(MySqlParser.BIT_LENGTH, 0)

        def BUFFER(self):
            return self.getToken(MySqlParser.BUFFER, 0)

        def CEIL(self):
            return self.getToken(MySqlParser.CEIL, 0)

        def CEILING(self):
            return self.getToken(MySqlParser.CEILING, 0)

        def CENTROID(self):
            return self.getToken(MySqlParser.CENTROID, 0)

        def CHARACTER_LENGTH(self):
            return self.getToken(MySqlParser.CHARACTER_LENGTH, 0)

        def CHARSET(self):
            return self.getToken(MySqlParser.CHARSET, 0)

        def CHAR_LENGTH(self):
            return self.getToken(MySqlParser.CHAR_LENGTH, 0)

        def COERCIBILITY(self):
            return self.getToken(MySqlParser.COERCIBILITY, 0)

        def COLLATION(self):
            return self.getToken(MySqlParser.COLLATION, 0)

        def COMPRESS(self):
            return self.getToken(MySqlParser.COMPRESS, 0)

        def CONCAT(self):
            return self.getToken(MySqlParser.CONCAT, 0)

        def CONCAT_WS(self):
            return self.getToken(MySqlParser.CONCAT_WS, 0)

        def CONNECTION_ID(self):
            return self.getToken(MySqlParser.CONNECTION_ID, 0)

        def CONV(self):
            return self.getToken(MySqlParser.CONV, 0)

        def CONVERT_TZ(self):
            return self.getToken(MySqlParser.CONVERT_TZ, 0)

        def COS(self):
            return self.getToken(MySqlParser.COS, 0)

        def COT(self):
            return self.getToken(MySqlParser.COT, 0)

        def COUNT(self):
            return self.getToken(MySqlParser.COUNT, 0)

        def CRC32(self):
            return self.getToken(MySqlParser.CRC32, 0)

        def CREATE_ASYMMETRIC_PRIV_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PRIV_KEY, 0)

        def CREATE_ASYMMETRIC_PUB_KEY(self):
            return self.getToken(MySqlParser.CREATE_ASYMMETRIC_PUB_KEY, 0)

        def CREATE_DH_PARAMETERS(self):
            return self.getToken(MySqlParser.CREATE_DH_PARAMETERS, 0)

        def CREATE_DIGEST(self):
            return self.getToken(MySqlParser.CREATE_DIGEST, 0)

        def CROSSES(self):
            return self.getToken(MySqlParser.CROSSES, 0)

        def CUME_DIST(self):
            return self.getToken(MySqlParser.CUME_DIST, 0)

        def DATABASE(self):
            return self.getToken(MySqlParser.DATABASE, 0)

        def DATE(self):
            return self.getToken(MySqlParser.DATE, 0)

        def DATEDIFF(self):
            return self.getToken(MySqlParser.DATEDIFF, 0)

        def DATE_FORMAT(self):
            return self.getToken(MySqlParser.DATE_FORMAT, 0)

        def DAY(self):
            return self.getToken(MySqlParser.DAY, 0)

        def DAYNAME(self):
            return self.getToken(MySqlParser.DAYNAME, 0)

        def DAYOFMONTH(self):
            return self.getToken(MySqlParser.DAYOFMONTH, 0)

        def DAYOFWEEK(self):
            return self.getToken(MySqlParser.DAYOFWEEK, 0)

        def DAYOFYEAR(self):
            return self.getToken(MySqlParser.DAYOFYEAR, 0)

        def DECODE(self):
            return self.getToken(MySqlParser.DECODE, 0)

        def DEGREES(self):
            return self.getToken(MySqlParser.DEGREES, 0)

        def DENSE_RANK(self):
            return self.getToken(MySqlParser.DENSE_RANK, 0)

        def DES_DECRYPT(self):
            return self.getToken(MySqlParser.DES_DECRYPT, 0)

        def DES_ENCRYPT(self):
            return self.getToken(MySqlParser.DES_ENCRYPT, 0)

        def DIMENSION(self):
            return self.getToken(MySqlParser.DIMENSION, 0)

        def DISJOINT(self):
            return self.getToken(MySqlParser.DISJOINT, 0)

        def ELT(self):
            return self.getToken(MySqlParser.ELT, 0)

        def ENCODE(self):
            return self.getToken(MySqlParser.ENCODE, 0)

        def ENCRYPT(self):
            return self.getToken(MySqlParser.ENCRYPT, 0)

        def ENDPOINT(self):
            return self.getToken(MySqlParser.ENDPOINT, 0)

        def ENVELOPE(self):
            return self.getToken(MySqlParser.ENVELOPE, 0)

        def EQUALS(self):
            return self.getToken(MySqlParser.EQUALS, 0)

        def EXP(self):
            return self.getToken(MySqlParser.EXP, 0)

        def EXPORT_SET(self):
            return self.getToken(MySqlParser.EXPORT_SET, 0)

        def EXTERIORRING(self):
            return self.getToken(MySqlParser.EXTERIORRING, 0)

        def EXTRACTVALUE(self):
            return self.getToken(MySqlParser.EXTRACTVALUE, 0)

        def FIELD(self):
            return self.getToken(MySqlParser.FIELD, 0)

        def FIND_IN_SET(self):
            return self.getToken(MySqlParser.FIND_IN_SET, 0)

        def FIRST_VALUE(self):
            return self.getToken(MySqlParser.FIRST_VALUE, 0)

        def FLOOR(self):
            return self.getToken(MySqlParser.FLOOR, 0)

        def FORMAT(self):
            return self.getToken(MySqlParser.FORMAT, 0)

        def FOUND_ROWS(self):
            return self.getToken(MySqlParser.FOUND_ROWS, 0)

        def FROM_BASE64(self):
            return self.getToken(MySqlParser.FROM_BASE64, 0)

        def FROM_DAYS(self):
            return self.getToken(MySqlParser.FROM_DAYS, 0)

        def FROM_UNIXTIME(self):
            return self.getToken(MySqlParser.FROM_UNIXTIME, 0)

        def GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMTEXT, 0)

        def GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.GEOMCOLLFROMWKB, 0)

        def GEOMETRYCOLLECTION(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTION, 0)

        def GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMTEXT, 0)

        def GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYCOLLECTIONFROMWKB, 0)

        def GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMETRYFROMTEXT, 0)

        def GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.GEOMETRYFROMWKB, 0)

        def GEOMETRYN(self):
            return self.getToken(MySqlParser.GEOMETRYN, 0)

        def GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.GEOMETRYTYPE, 0)

        def GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.GEOMFROMTEXT, 0)

        def GEOMFROMWKB(self):
            return self.getToken(MySqlParser.GEOMFROMWKB, 0)

        def GET_FORMAT(self):
            return self.getToken(MySqlParser.GET_FORMAT, 0)

        def GET_LOCK(self):
            return self.getToken(MySqlParser.GET_LOCK, 0)

        def GLENGTH(self):
            return self.getToken(MySqlParser.GLENGTH, 0)

        def GREATEST(self):
            return self.getToken(MySqlParser.GREATEST, 0)

        def GTID_SUBSET(self):
            return self.getToken(MySqlParser.GTID_SUBSET, 0)

        def GTID_SUBTRACT(self):
            return self.getToken(MySqlParser.GTID_SUBTRACT, 0)

        def HEX(self):
            return self.getToken(MySqlParser.HEX, 0)

        def HOUR(self):
            return self.getToken(MySqlParser.HOUR, 0)

        def IFNULL(self):
            return self.getToken(MySqlParser.IFNULL, 0)

        def INET6_ATON(self):
            return self.getToken(MySqlParser.INET6_ATON, 0)

        def INET6_NTOA(self):
            return self.getToken(MySqlParser.INET6_NTOA, 0)

        def INET_ATON(self):
            return self.getToken(MySqlParser.INET_ATON, 0)

        def INET_NTOA(self):
            return self.getToken(MySqlParser.INET_NTOA, 0)

        def INSTR(self):
            return self.getToken(MySqlParser.INSTR, 0)

        def INTERIORRINGN(self):
            return self.getToken(MySqlParser.INTERIORRINGN, 0)

        def INTERSECTS(self):
            return self.getToken(MySqlParser.INTERSECTS, 0)

        def INVISIBLE(self):
            return self.getToken(MySqlParser.INVISIBLE, 0)

        def ISCLOSED(self):
            return self.getToken(MySqlParser.ISCLOSED, 0)

        def ISEMPTY(self):
            return self.getToken(MySqlParser.ISEMPTY, 0)

        def ISNULL(self):
            return self.getToken(MySqlParser.ISNULL, 0)

        def ISSIMPLE(self):
            return self.getToken(MySqlParser.ISSIMPLE, 0)

        def IS_FREE_LOCK(self):
            return self.getToken(MySqlParser.IS_FREE_LOCK, 0)

        def IS_IPV4(self):
            return self.getToken(MySqlParser.IS_IPV4, 0)

        def IS_IPV4_COMPAT(self):
            return self.getToken(MySqlParser.IS_IPV4_COMPAT, 0)

        def IS_IPV4_MAPPED(self):
            return self.getToken(MySqlParser.IS_IPV4_MAPPED, 0)

        def IS_IPV6(self):
            return self.getToken(MySqlParser.IS_IPV6, 0)

        def IS_USED_LOCK(self):
            return self.getToken(MySqlParser.IS_USED_LOCK, 0)

        def LAG(self):
            return self.getToken(MySqlParser.LAG, 0)

        def LAST_INSERT_ID(self):
            return self.getToken(MySqlParser.LAST_INSERT_ID, 0)

        def LAST_VALUE(self):
            return self.getToken(MySqlParser.LAST_VALUE, 0)

        def LCASE(self):
            return self.getToken(MySqlParser.LCASE, 0)

        def LEAD(self):
            return self.getToken(MySqlParser.LEAD, 0)

        def LEAST(self):
            return self.getToken(MySqlParser.LEAST, 0)

        def LEFT(self):
            return self.getToken(MySqlParser.LEFT, 0)

        def LENGTH(self):
            return self.getToken(MySqlParser.LENGTH, 0)

        def LINEFROMTEXT(self):
            return self.getToken(MySqlParser.LINEFROMTEXT, 0)

        def LINEFROMWKB(self):
            return self.getToken(MySqlParser.LINEFROMWKB, 0)

        def LINESTRING(self):
            return self.getToken(MySqlParser.LINESTRING, 0)

        def LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.LINESTRINGFROMTEXT, 0)

        def LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.LINESTRINGFROMWKB, 0)

        def LN(self):
            return self.getToken(MySqlParser.LN, 0)

        def LOAD_FILE(self):
            return self.getToken(MySqlParser.LOAD_FILE, 0)

        def LOCATE(self):
            return self.getToken(MySqlParser.LOCATE, 0)

        def LOG(self):
            return self.getToken(MySqlParser.LOG, 0)

        def LOG10(self):
            return self.getToken(MySqlParser.LOG10, 0)

        def LOG2(self):
            return self.getToken(MySqlParser.LOG2, 0)

        def LOWER(self):
            return self.getToken(MySqlParser.LOWER, 0)

        def LPAD(self):
            return self.getToken(MySqlParser.LPAD, 0)

        def LTRIM(self):
            return self.getToken(MySqlParser.LTRIM, 0)

        def MAKEDATE(self):
            return self.getToken(MySqlParser.MAKEDATE, 0)

        def MAKETIME(self):
            return self.getToken(MySqlParser.MAKETIME, 0)

        def MAKE_SET(self):
            return self.getToken(MySqlParser.MAKE_SET, 0)

        def MASTER_POS_WAIT(self):
            return self.getToken(MySqlParser.MASTER_POS_WAIT, 0)

        def MBRCONTAINS(self):
            return self.getToken(MySqlParser.MBRCONTAINS, 0)

        def MBRDISJOINT(self):
            return self.getToken(MySqlParser.MBRDISJOINT, 0)

        def MBREQUAL(self):
            return self.getToken(MySqlParser.MBREQUAL, 0)

        def MBRINTERSECTS(self):
            return self.getToken(MySqlParser.MBRINTERSECTS, 0)

        def MBROVERLAPS(self):
            return self.getToken(MySqlParser.MBROVERLAPS, 0)

        def MBRTOUCHES(self):
            return self.getToken(MySqlParser.MBRTOUCHES, 0)

        def MBRWITHIN(self):
            return self.getToken(MySqlParser.MBRWITHIN, 0)

        def MD5(self):
            return self.getToken(MySqlParser.MD5, 0)

        def MICROSECOND(self):
            return self.getToken(MySqlParser.MICROSECOND, 0)

        def MINUTE(self):
            return self.getToken(MySqlParser.MINUTE, 0)

        def MLINEFROMTEXT(self):
            return self.getToken(MySqlParser.MLINEFROMTEXT, 0)

        def MLINEFROMWKB(self):
            return self.getToken(MySqlParser.MLINEFROMWKB, 0)

        def MOD(self):
            return self.getToken(MySqlParser.MOD, 0)

        def MONTH(self):
            return self.getToken(MySqlParser.MONTH, 0)

        def MONTHNAME(self):
            return self.getToken(MySqlParser.MONTHNAME, 0)

        def MPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MPOINTFROMTEXT, 0)

        def MPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MPOINTFROMWKB, 0)

        def MPOLYFROMTEXT(self):
            return self.getToken(MySqlParser.MPOLYFROMTEXT, 0)

        def MPOLYFROMWKB(self):
            return self.getToken(MySqlParser.MPOLYFROMWKB, 0)

        def MULTILINESTRING(self):
            return self.getToken(MySqlParser.MULTILINESTRING, 0)

        def MULTILINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMTEXT, 0)

        def MULTILINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.MULTILINESTRINGFROMWKB, 0)

        def MULTIPOINT(self):
            return self.getToken(MySqlParser.MULTIPOINT, 0)

        def MULTIPOINTFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMTEXT, 0)

        def MULTIPOINTFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOINTFROMWKB, 0)

        def MULTIPOLYGON(self):
            return self.getToken(MySqlParser.MULTIPOLYGON, 0)

        def MULTIPOLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMTEXT, 0)

        def MULTIPOLYGONFROMWKB(self):
            return self.getToken(MySqlParser.MULTIPOLYGONFROMWKB, 0)

        def NAME_CONST(self):
            return self.getToken(MySqlParser.NAME_CONST, 0)

        def NTH_VALUE(self):
            return self.getToken(MySqlParser.NTH_VALUE, 0)

        def NTILE(self):
            return self.getToken(MySqlParser.NTILE, 0)

        def NULLIF(self):
            return self.getToken(MySqlParser.NULLIF, 0)

        def NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.NUMGEOMETRIES, 0)

        def NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.NUMINTERIORRINGS, 0)

        def NUMPOINTS(self):
            return self.getToken(MySqlParser.NUMPOINTS, 0)

        def OCT(self):
            return self.getToken(MySqlParser.OCT, 0)

        def OCTET_LENGTH(self):
            return self.getToken(MySqlParser.OCTET_LENGTH, 0)

        def ORD(self):
            return self.getToken(MySqlParser.ORD, 0)

        def OVERLAPS(self):
            return self.getToken(MySqlParser.OVERLAPS, 0)

        def PERCENT_RANK(self):
            return self.getToken(MySqlParser.PERCENT_RANK, 0)

        def PERIOD_ADD(self):
            return self.getToken(MySqlParser.PERIOD_ADD, 0)

        def PERIOD_DIFF(self):
            return self.getToken(MySqlParser.PERIOD_DIFF, 0)

        def PI(self):
            return self.getToken(MySqlParser.PI, 0)

        def POINT(self):
            return self.getToken(MySqlParser.POINT, 0)

        def POINTFROMTEXT(self):
            return self.getToken(MySqlParser.POINTFROMTEXT, 0)

        def POINTFROMWKB(self):
            return self.getToken(MySqlParser.POINTFROMWKB, 0)

        def POINTN(self):
            return self.getToken(MySqlParser.POINTN, 0)

        def POLYFROMTEXT(self):
            return self.getToken(MySqlParser.POLYFROMTEXT, 0)

        def POLYFROMWKB(self):
            return self.getToken(MySqlParser.POLYFROMWKB, 0)

        def POLYGON(self):
            return self.getToken(MySqlParser.POLYGON, 0)

        def POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.POLYGONFROMTEXT, 0)

        def POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.POLYGONFROMWKB, 0)

        def POSITION(self):
            return self.getToken(MySqlParser.POSITION, 0)

        def POW(self):
            return self.getToken(MySqlParser.POW, 0)

        def POWER(self):
            return self.getToken(MySqlParser.POWER, 0)

        def QUARTER(self):
            return self.getToken(MySqlParser.QUARTER, 0)

        def QUOTE(self):
            return self.getToken(MySqlParser.QUOTE, 0)

        def RADIANS(self):
            return self.getToken(MySqlParser.RADIANS, 0)

        def RAND(self):
            return self.getToken(MySqlParser.RAND, 0)

        def RANK(self):
            return self.getToken(MySqlParser.RANK, 0)

        def RANDOM_BYTES(self):
            return self.getToken(MySqlParser.RANDOM_BYTES, 0)

        def RELEASE_LOCK(self):
            return self.getToken(MySqlParser.RELEASE_LOCK, 0)

        def REVERSE(self):
            return self.getToken(MySqlParser.REVERSE, 0)

        def RIGHT(self):
            return self.getToken(MySqlParser.RIGHT, 0)

        def ROUND(self):
            return self.getToken(MySqlParser.ROUND, 0)

        def ROW_COUNT(self):
            return self.getToken(MySqlParser.ROW_COUNT, 0)

        def ROW_NUMBER(self):
            return self.getToken(MySqlParser.ROW_NUMBER, 0)

        def RPAD(self):
            return self.getToken(MySqlParser.RPAD, 0)

        def RTRIM(self):
            return self.getToken(MySqlParser.RTRIM, 0)

        def SCHEMA(self):
            return self.getToken(MySqlParser.SCHEMA, 0)

        def SECOND(self):
            return self.getToken(MySqlParser.SECOND, 0)

        def SEC_TO_TIME(self):
            return self.getToken(MySqlParser.SEC_TO_TIME, 0)

        def SESSION_USER(self):
            return self.getToken(MySqlParser.SESSION_USER, 0)

        def SESSION_VARIABLES_ADMIN(self):
            return self.getToken(MySqlParser.SESSION_VARIABLES_ADMIN, 0)

        def SHA(self):
            return self.getToken(MySqlParser.SHA, 0)

        def SHA1(self):
            return self.getToken(MySqlParser.SHA1, 0)

        def SHA2(self):
            return self.getToken(MySqlParser.SHA2, 0)

        def SIGN(self):
            return self.getToken(MySqlParser.SIGN, 0)

        def SIN(self):
            return self.getToken(MySqlParser.SIN, 0)

        def SLEEP(self):
            return self.getToken(MySqlParser.SLEEP, 0)

        def SOUNDEX(self):
            return self.getToken(MySqlParser.SOUNDEX, 0)

        def SQL_THREAD_WAIT_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.SQL_THREAD_WAIT_AFTER_GTIDS, 0)

        def SQRT(self):
            return self.getToken(MySqlParser.SQRT, 0)

        def SRID(self):
            return self.getToken(MySqlParser.SRID, 0)

        def STARTPOINT(self):
            return self.getToken(MySqlParser.STARTPOINT, 0)

        def STRCMP(self):
            return self.getToken(MySqlParser.STRCMP, 0)

        def STR_TO_DATE(self):
            return self.getToken(MySqlParser.STR_TO_DATE, 0)

        def ST_AREA(self):
            return self.getToken(MySqlParser.ST_AREA, 0)

        def ST_ASBINARY(self):
            return self.getToken(MySqlParser.ST_ASBINARY, 0)

        def ST_ASTEXT(self):
            return self.getToken(MySqlParser.ST_ASTEXT, 0)

        def ST_ASWKB(self):
            return self.getToken(MySqlParser.ST_ASWKB, 0)

        def ST_ASWKT(self):
            return self.getToken(MySqlParser.ST_ASWKT, 0)

        def ST_BUFFER(self):
            return self.getToken(MySqlParser.ST_BUFFER, 0)

        def ST_CENTROID(self):
            return self.getToken(MySqlParser.ST_CENTROID, 0)

        def ST_CONTAINS(self):
            return self.getToken(MySqlParser.ST_CONTAINS, 0)

        def ST_CROSSES(self):
            return self.getToken(MySqlParser.ST_CROSSES, 0)

        def ST_DIFFERENCE(self):
            return self.getToken(MySqlParser.ST_DIFFERENCE, 0)

        def ST_DIMENSION(self):
            return self.getToken(MySqlParser.ST_DIMENSION, 0)

        def ST_DISJOINT(self):
            return self.getToken(MySqlParser.ST_DISJOINT, 0)

        def ST_DISTANCE(self):
            return self.getToken(MySqlParser.ST_DISTANCE, 0)

        def ST_ENDPOINT(self):
            return self.getToken(MySqlParser.ST_ENDPOINT, 0)

        def ST_ENVELOPE(self):
            return self.getToken(MySqlParser.ST_ENVELOPE, 0)

        def ST_EQUALS(self):
            return self.getToken(MySqlParser.ST_EQUALS, 0)

        def ST_EXTERIORRING(self):
            return self.getToken(MySqlParser.ST_EXTERIORRING, 0)

        def ST_GEOMCOLLFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTEXT, 0)

        def ST_GEOMCOLLFROMTXT(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMTXT, 0)

        def ST_GEOMCOLLFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMCOLLFROMWKB, 0)

        def ST_GEOMETRYCOLLECTIONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMTEXT, 0)

        def ST_GEOMETRYCOLLECTIONFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYCOLLECTIONFROMWKB, 0)

        def ST_GEOMETRYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMTEXT, 0)

        def ST_GEOMETRYFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMETRYFROMWKB, 0)

        def ST_GEOMETRYN(self):
            return self.getToken(MySqlParser.ST_GEOMETRYN, 0)

        def ST_GEOMETRYTYPE(self):
            return self.getToken(MySqlParser.ST_GEOMETRYTYPE, 0)

        def ST_GEOMFROMTEXT(self):
            return self.getToken(MySqlParser.ST_GEOMFROMTEXT, 0)

        def ST_GEOMFROMWKB(self):
            return self.getToken(MySqlParser.ST_GEOMFROMWKB, 0)

        def ST_INTERIORRINGN(self):
            return self.getToken(MySqlParser.ST_INTERIORRINGN, 0)

        def ST_INTERSECTION(self):
            return self.getToken(MySqlParser.ST_INTERSECTION, 0)

        def ST_INTERSECTS(self):
            return self.getToken(MySqlParser.ST_INTERSECTS, 0)

        def ST_ISCLOSED(self):
            return self.getToken(MySqlParser.ST_ISCLOSED, 0)

        def ST_ISEMPTY(self):
            return self.getToken(MySqlParser.ST_ISEMPTY, 0)

        def ST_ISSIMPLE(self):
            return self.getToken(MySqlParser.ST_ISSIMPLE, 0)

        def ST_LINEFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINEFROMTEXT, 0)

        def ST_LINEFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINEFROMWKB, 0)

        def ST_LINESTRINGFROMTEXT(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMTEXT, 0)

        def ST_LINESTRINGFROMWKB(self):
            return self.getToken(MySqlParser.ST_LINESTRINGFROMWKB, 0)

        def ST_NUMGEOMETRIES(self):
            return self.getToken(MySqlParser.ST_NUMGEOMETRIES, 0)

        def ST_NUMINTERIORRING(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRING, 0)

        def ST_NUMINTERIORRINGS(self):
            return self.getToken(MySqlParser.ST_NUMINTERIORRINGS, 0)

        def ST_NUMPOINTS(self):
            return self.getToken(MySqlParser.ST_NUMPOINTS, 0)

        def ST_OVERLAPS(self):
            return self.getToken(MySqlParser.ST_OVERLAPS, 0)

        def ST_POINTFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POINTFROMTEXT, 0)

        def ST_POINTFROMWKB(self):
            return self.getToken(MySqlParser.ST_POINTFROMWKB, 0)

        def ST_POINTN(self):
            return self.getToken(MySqlParser.ST_POINTN, 0)

        def ST_POLYFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYFROMTEXT, 0)

        def ST_POLYFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYFROMWKB, 0)

        def ST_POLYGONFROMTEXT(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMTEXT, 0)

        def ST_POLYGONFROMWKB(self):
            return self.getToken(MySqlParser.ST_POLYGONFROMWKB, 0)

        def ST_SRID(self):
            return self.getToken(MySqlParser.ST_SRID, 0)

        def ST_STARTPOINT(self):
            return self.getToken(MySqlParser.ST_STARTPOINT, 0)

        def ST_SYMDIFFERENCE(self):
            return self.getToken(MySqlParser.ST_SYMDIFFERENCE, 0)

        def ST_TOUCHES(self):
            return self.getToken(MySqlParser.ST_TOUCHES, 0)

        def ST_UNION(self):
            return self.getToken(MySqlParser.ST_UNION, 0)

        def ST_WITHIN(self):
            return self.getToken(MySqlParser.ST_WITHIN, 0)

        def ST_X(self):
            return self.getToken(MySqlParser.ST_X, 0)

        def ST_Y(self):
            return self.getToken(MySqlParser.ST_Y, 0)

        def SUBDATE(self):
            return self.getToken(MySqlParser.SUBDATE, 0)

        def SUBSTRING_INDEX(self):
            return self.getToken(MySqlParser.SUBSTRING_INDEX, 0)

        def SUBTIME(self):
            return self.getToken(MySqlParser.SUBTIME, 0)

        def SYSTEM_USER(self):
            return self.getToken(MySqlParser.SYSTEM_USER, 0)

        def TAN(self):
            return self.getToken(MySqlParser.TAN, 0)

        def TIME(self):
            return self.getToken(MySqlParser.TIME, 0)

        def TIMEDIFF(self):
            return self.getToken(MySqlParser.TIMEDIFF, 0)

        def TIMESTAMP(self):
            return self.getToken(MySqlParser.TIMESTAMP, 0)

        def TIMESTAMPADD(self):
            return self.getToken(MySqlParser.TIMESTAMPADD, 0)

        def TIMESTAMPDIFF(self):
            return self.getToken(MySqlParser.TIMESTAMPDIFF, 0)

        def TIME_FORMAT(self):
            return self.getToken(MySqlParser.TIME_FORMAT, 0)

        def TIME_TO_SEC(self):
            return self.getToken(MySqlParser.TIME_TO_SEC, 0)

        def TOUCHES(self):
            return self.getToken(MySqlParser.TOUCHES, 0)

        def TO_BASE64(self):
            return self.getToken(MySqlParser.TO_BASE64, 0)

        def TO_DAYS(self):
            return self.getToken(MySqlParser.TO_DAYS, 0)

        def TO_SECONDS(self):
            return self.getToken(MySqlParser.TO_SECONDS, 0)

        def UCASE(self):
            return self.getToken(MySqlParser.UCASE, 0)

        def UNCOMPRESS(self):
            return self.getToken(MySqlParser.UNCOMPRESS, 0)

        def UNCOMPRESSED_LENGTH(self):
            return self.getToken(MySqlParser.UNCOMPRESSED_LENGTH, 0)

        def UNHEX(self):
            return self.getToken(MySqlParser.UNHEX, 0)

        def UNIX_TIMESTAMP(self):
            return self.getToken(MySqlParser.UNIX_TIMESTAMP, 0)

        def UPDATEXML(self):
            return self.getToken(MySqlParser.UPDATEXML, 0)

        def UPPER(self):
            return self.getToken(MySqlParser.UPPER, 0)

        def UUID(self):
            return self.getToken(MySqlParser.UUID, 0)

        def UUID_SHORT(self):
            return self.getToken(MySqlParser.UUID_SHORT, 0)

        def VALIDATE_PASSWORD_STRENGTH(self):
            return self.getToken(MySqlParser.VALIDATE_PASSWORD_STRENGTH, 0)

        def VERSION(self):
            return self.getToken(MySqlParser.VERSION, 0)

        def VISIBLE(self):
            return self.getToken(MySqlParser.VISIBLE, 0)

        def WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS(self):
            return self.getToken(MySqlParser.WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS, 0)

        def WEEK(self):
            return self.getToken(MySqlParser.WEEK, 0)

        def WEEKDAY(self):
            return self.getToken(MySqlParser.WEEKDAY, 0)

        def WEEKOFYEAR(self):
            return self.getToken(MySqlParser.WEEKOFYEAR, 0)

        def WEIGHT_STRING(self):
            return self.getToken(MySqlParser.WEIGHT_STRING, 0)

        def WITHIN(self):
            return self.getToken(MySqlParser.WITHIN, 0)

        def YEAR(self):
            return self.getToken(MySqlParser.YEAR, 0)

        def YEARWEEK(self):
            return self.getToken(MySqlParser.YEARWEEK, 0)

        def Y_FUNCTION(self):
            return self.getToken(MySqlParser.Y_FUNCTION, 0)

        def X_FUNCTION(self):
            return self.getToken(MySqlParser.X_FUNCTION, 0)

        def JSON_ARRAY(self):
            return self.getToken(MySqlParser.JSON_ARRAY, 0)

        def JSON_OBJECT(self):
            return self.getToken(MySqlParser.JSON_OBJECT, 0)

        def JSON_QUOTE(self):
            return self.getToken(MySqlParser.JSON_QUOTE, 0)

        def JSON_CONTAINS(self):
            return self.getToken(MySqlParser.JSON_CONTAINS, 0)

        def JSON_CONTAINS_PATH(self):
            return self.getToken(MySqlParser.JSON_CONTAINS_PATH, 0)

        def JSON_EXTRACT(self):
            return self.getToken(MySqlParser.JSON_EXTRACT, 0)

        def JSON_KEYS(self):
            return self.getToken(MySqlParser.JSON_KEYS, 0)

        def JSON_OVERLAPS(self):
            return self.getToken(MySqlParser.JSON_OVERLAPS, 0)

        def JSON_SEARCH(self):
            return self.getToken(MySqlParser.JSON_SEARCH, 0)

        def JSON_VALUE(self):
            return self.getToken(MySqlParser.JSON_VALUE, 0)

        def JSON_ARRAY_APPEND(self):
            return self.getToken(MySqlParser.JSON_ARRAY_APPEND, 0)

        def JSON_ARRAY_INSERT(self):
            return self.getToken(MySqlParser.JSON_ARRAY_INSERT, 0)

        def JSON_INSERT(self):
            return self.getToken(MySqlParser.JSON_INSERT, 0)

        def JSON_MERGE(self):
            return self.getToken(MySqlParser.JSON_MERGE, 0)

        def JSON_MERGE_PATCH(self):
            return self.getToken(MySqlParser.JSON_MERGE_PATCH, 0)

        def JSON_MERGE_PRESERVE(self):
            return self.getToken(MySqlParser.JSON_MERGE_PRESERVE, 0)

        def JSON_REMOVE(self):
            return self.getToken(MySqlParser.JSON_REMOVE, 0)

        def JSON_REPLACE(self):
            return self.getToken(MySqlParser.JSON_REPLACE, 0)

        def JSON_SET(self):
            return self.getToken(MySqlParser.JSON_SET, 0)

        def JSON_UNQUOTE(self):
            return self.getToken(MySqlParser.JSON_UNQUOTE, 0)

        def JSON_DEPTH(self):
            return self.getToken(MySqlParser.JSON_DEPTH, 0)

        def JSON_LENGTH(self):
            return self.getToken(MySqlParser.JSON_LENGTH, 0)

        def JSON_TYPE(self):
            return self.getToken(MySqlParser.JSON_TYPE, 0)

        def JSON_VALID(self):
            return self.getToken(MySqlParser.JSON_VALID, 0)

        def JSON_TABLE(self):
            return self.getToken(MySqlParser.JSON_TABLE, 0)

        def JSON_SCHEMA_VALID(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALID, 0)

        def JSON_SCHEMA_VALIDATION_REPORT(self):
            return self.getToken(MySqlParser.JSON_SCHEMA_VALIDATION_REPORT, 0)

        def JSON_PRETTY(self):
            return self.getToken(MySqlParser.JSON_PRETTY, 0)

        def JSON_STORAGE_FREE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_FREE, 0)

        def JSON_STORAGE_SIZE(self):
            return self.getToken(MySqlParser.JSON_STORAGE_SIZE, 0)

        def JSON_ARRAYAGG(self):
            return self.getToken(MySqlParser.JSON_ARRAYAGG, 0)

        def JSON_OBJECTAGG(self):
            return self.getToken(MySqlParser.JSON_OBJECTAGG, 0)

        def getRuleIndex(self):
            return MySqlParser.RULE_functionNameBase

        def enterRule(self, listener:ParseTreeListener):
            if hasattr( listener, "enterFunctionNameBase" ):
                listener.enterFunctionNameBase(self)

        def exitRule(self, listener:ParseTreeListener):
            if hasattr( listener, "exitFunctionNameBase" ):
                listener.exitFunctionNameBase(self)




    def functionNameBase(self):

        localctx = MySqlParser.FunctionNameBaseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 698, self.RULE_functionNameBase)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 7230
            _la = self._input.LA(1)
            if not(_la==39 or (((_la - 96)) & ~0x3f) == 0 and ((1 << (_la - 96)) & 11258999068426241) != 0 or (((_la - 215)) & ~0x3f) == 0 and ((1 << (_la - 215)) & -17179869161) != 0 or (((_la - 279)) & ~0x3f) == 0 and ((1 << (_la - 279)) & 8796109397507) != 0 or _la==457 or (((_la - 671)) & ~0x3f) == 0 and ((1 << (_la - 671)) & 1152921504623558657) != 0 or (((_la - 798)) & ~0x3f) == 0 and ((1 << (_la - 798)) & -8589934599) != 0 or (((_la - 862)) & ~0x3f) == 0 and ((1 << (_la - 862)) & -257) != 0 or (((_la - 926)) & ~0x3f) == 0 and ((1 << (_la - 926)) & -1) != 0 or (((_la - 990)) & ~0x3f) == 0 and ((1 << (_la - 990)) & -529) != 0 or (((_la - 1054)) & ~0x3f) == 0 and ((1 << (_la - 1054)) & 4611826755915743231) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx:RuleContext, ruleIndex:int, predIndex:int):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[334] = self.expression_sempred
        self._predicates[335] = self.predicate_sempred
        self._predicates[336] = self.expressionAtom_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def expression_sempred(self, localctx:ExpressionContext, predIndex:int):
            if predIndex == 0:
                return self.precpred(self._ctx, 3)
         

    def predicate_sempred(self, localctx:PredicateContext, predIndex:int):
            if predIndex == 1:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 6:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 9:
                return self.precpred(self._ctx, 1)
         

    def expressionAtom_sempred(self, localctx:ExpressionAtomContext, predIndex:int):
            if predIndex == 10:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

            if predIndex == 13:
                return self.precpred(self._ctx, 12)
         




